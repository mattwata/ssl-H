// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_wrapper_tracked.proto

#include "vision_wrapper_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vision_5fdetection_5ftracked_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fdetection_5ftracked_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TrackedFrame;
}  // namespace protobuf_vision_5fdetection_5ftracked_2eproto
namespace ssl_protos {
namespace vision {
class TrackerWrapperPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackerWrapperPacket>
      _instance;
} _TrackerWrapperPacket_default_instance_;
}  // namespace vision
}  // namespace ssl_protos
namespace protobuf_vision_5fwrapper_5ftracked_2eproto {
static void InitDefaultsTrackerWrapperPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_TrackerWrapperPacket_default_instance_;
    new (ptr) ::ssl_protos::vision::TrackerWrapperPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::TrackerWrapperPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrackerWrapperPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrackerWrapperPacket}, {
      &protobuf_vision_5fdetection_5ftracked_2eproto::scc_info_TrackedFrame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrackerWrapperPacket.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::TrackerWrapperPacket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::TrackerWrapperPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::TrackerWrapperPacket, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::TrackerWrapperPacket, source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::TrackerWrapperPacket, tracked_frame_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ssl_protos::vision::TrackerWrapperPacket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_TrackerWrapperPacket_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vision_wrapper_tracked.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034vision_wrapper_tracked.proto\022\021ssl_prot"
      "os.vision\032\036vision_detection_tracked.prot"
      "o\"q\n\024TrackerWrapperPacket\022\014\n\004uuid\030\001 \002(\t\022"
      "\023\n\013source_name\030\002 \001(\t\0226\n\rtracked_frame\030\003 "
      "\001(\0132\037.ssl_protos.vision.TrackedFrame"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_wrapper_tracked.proto", &protobuf_RegisterTypes);
  ::protobuf_vision_5fdetection_5ftracked_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vision_5fwrapper_5ftracked_2eproto
namespace ssl_protos {
namespace vision {

// ===================================================================

void TrackerWrapperPacket::InitAsDefaultInstance() {
  ::ssl_protos::vision::_TrackerWrapperPacket_default_instance_._instance.get_mutable()->tracked_frame_ = const_cast< ::ssl_protos::vision::TrackedFrame*>(
      ::ssl_protos::vision::TrackedFrame::internal_default_instance());
}
void TrackerWrapperPacket::clear_tracked_frame() {
  if (tracked_frame_ != NULL) tracked_frame_->Clear();
  clear_has_tracked_frame();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerWrapperPacket::kUuidFieldNumber;
const int TrackerWrapperPacket::kSourceNameFieldNumber;
const int TrackerWrapperPacket::kTrackedFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerWrapperPacket::TrackerWrapperPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fwrapper_5ftracked_2eproto::scc_info_TrackerWrapperPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.TrackerWrapperPacket)
}
TrackerWrapperPacket::TrackerWrapperPacket(const TrackerWrapperPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_name()) {
    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.has_tracked_frame()) {
    tracked_frame_ = new ::ssl_protos::vision::TrackedFrame(*from.tracked_frame_);
  } else {
    tracked_frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.TrackerWrapperPacket)
}

void TrackerWrapperPacket::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracked_frame_ = NULL;
}

TrackerWrapperPacket::~TrackerWrapperPacket() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.TrackerWrapperPacket)
  SharedDtor();
}

void TrackerWrapperPacket::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracked_frame_;
}

void TrackerWrapperPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackerWrapperPacket::descriptor() {
  ::protobuf_vision_5fwrapper_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fwrapper_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerWrapperPacket& TrackerWrapperPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fwrapper_5ftracked_2eproto::scc_info_TrackerWrapperPacket.base);
  return *internal_default_instance();
}


void TrackerWrapperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.TrackerWrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tracked_frame_ != NULL);
      tracked_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackerWrapperPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.TrackerWrapperPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.vision.TrackerWrapperPacket.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_name().data(), static_cast<int>(this->source_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.vision.TrackerWrapperPacket.source_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.TrackedFrame tracked_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tracked_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.TrackerWrapperPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.TrackerWrapperPacket)
  return false;
#undef DO_
}

void TrackerWrapperPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.TrackerWrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.TrackerWrapperPacket.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.TrackerWrapperPacket.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_name(), output);
  }

  // optional .ssl_protos.vision.TrackedFrame tracked_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_tracked_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.TrackerWrapperPacket)
}

::google::protobuf::uint8* TrackerWrapperPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.TrackerWrapperPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.TrackerWrapperPacket.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.TrackerWrapperPacket.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_name(), target);
  }

  // optional .ssl_protos.vision.TrackedFrame tracked_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_tracked_frame(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.TrackerWrapperPacket)
  return target;
}

size_t TrackerWrapperPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.TrackerWrapperPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string uuid = 1;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string source_name = 2;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // optional .ssl_protos.vision.TrackedFrame tracked_frame = 3;
    if (has_tracked_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tracked_frame_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerWrapperPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.TrackerWrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerWrapperPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackerWrapperPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.TrackerWrapperPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.TrackerWrapperPacket)
    MergeFrom(*source);
  }
}

void TrackerWrapperPacket::MergeFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.TrackerWrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_source_name();
      source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tracked_frame()->::ssl_protos::vision::TrackedFrame::MergeFrom(from.tracked_frame());
    }
  }
}

void TrackerWrapperPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerWrapperPacket::CopyFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerWrapperPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_tracked_frame()) {
    if (!this->tracked_frame_->IsInitialized()) return false;
  }
  return true;
}

void TrackerWrapperPacket::Swap(TrackerWrapperPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackerWrapperPacket::InternalSwap(TrackerWrapperPacket* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_name_.Swap(&other->source_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tracked_frame_, other->tracked_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackerWrapperPacket::GetMetadata() const {
  protobuf_vision_5fwrapper_5ftracked_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fwrapper_5ftracked_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::TrackerWrapperPacket* Arena::CreateMaybeMessage< ::ssl_protos::vision::TrackerWrapperPacket >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::TrackerWrapperPacket >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
