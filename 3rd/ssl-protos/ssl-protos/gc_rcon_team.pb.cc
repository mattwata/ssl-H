// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_rcon_team.proto

#include "gc_rcon_team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5frcon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signature;
}  // namespace protobuf_gc_5frcon_2eproto
namespace ssl_protos {
namespace gc {
class TeamRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamRegistration>
      _instance;
} _TeamRegistration_default_instance_;
class TeamToControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamToController>
      _instance;
  ::google::protobuf::int32 desired_keeper_;
  bool substitute_bot_;
  bool ping_;
} _TeamToController_default_instance_;
class ControllerToTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerToTeam>
      _instance;
  const ::ssl_protos::gc::ControllerReply* controller_reply_;
} _ControllerToTeam_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5frcon_5fteam_2eproto {
static void InitDefaultsTeamRegistration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_TeamRegistration_default_instance_;
    new (ptr) ::ssl_protos::gc::TeamRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::TeamRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TeamRegistration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTeamRegistration}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsTeamToController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_TeamToController_default_instance_;
    new (ptr) ::ssl_protos::gc::TeamToController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::TeamToController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TeamToController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTeamToController}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsControllerToTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_ControllerToTeam_default_instance_;
    new (ptr) ::ssl_protos::gc::ControllerToTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::ControllerToTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerToTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerToTeam}, {
      &protobuf_gc_5frcon_2eproto::scc_info_ControllerReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TeamRegistration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeamToController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerToTeam.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamRegistration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamRegistration, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamRegistration, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamToController, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamToController, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamToController, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamToController, signature_),
  offsetof(::ssl_protos::gc::TeamToControllerDefaultTypeInternal, desired_keeper_),
  offsetof(::ssl_protos::gc::TeamToControllerDefaultTypeInternal, substitute_bot_),
  offsetof(::ssl_protos::gc::TeamToControllerDefaultTypeInternal, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::TeamToController, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToTeam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ssl_protos::gc::ControllerToTeamDefaultTypeInternal, controller_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToTeam, msg_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssl_protos::gc::TeamRegistration)},
  { 9, 19, sizeof(::ssl_protos::gc::TeamToController)},
  { 23, 30, sizeof(::ssl_protos::gc::ControllerToTeam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_TeamRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_TeamToController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_ControllerToTeam_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_rcon_team.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022gc_rcon_team.proto\022\rssl_protos.gc\032\rgc_"
      "rcon.proto\"R\n\020TeamRegistration\022\021\n\tteam_n"
      "ame\030\001 \002(\t\022+\n\tsignature\030\002 \001(\0132\030.ssl_proto"
      "s.gc.Signature\"\220\001\n\020TeamToController\022+\n\ts"
      "ignature\030\001 \001(\0132\030.ssl_protos.gc.Signature"
      "\022\030\n\016desired_keeper\030\002 \001(\005H\000\022\030\n\016substitute"
      "_bot\030\004 \001(\010H\000\022\016\n\004ping\030\005 \001(\010H\000B\005\n\003msgJ\004\010\003\020"
      "\004\"[\n\020ControllerToTeam\022:\n\020controller_repl"
      "y\030\001 \001(\0132\036.ssl_protos.gc.ControllerReplyH"
      "\000B\005\n\003msgJ\004\010\002\020\003B>Z<github.com/RoboCup-SSL"
      "/ssl-game-controller/internal/app/rcon"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_rcon_team.proto", &protobuf_RegisterTypes);
  ::protobuf_gc_5frcon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5frcon_5fteam_2eproto
namespace ssl_protos {
namespace gc {

// ===================================================================

void TeamRegistration::InitAsDefaultInstance() {
  ::ssl_protos::gc::_TeamRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
}
void TeamRegistration::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRegistration::kTeamNameFieldNumber;
const int TeamRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRegistration::TeamRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fteam_2eproto::scc_info_TeamRegistration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.TeamRegistration)
}
TeamRegistration::TeamRegistration(const TeamRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.TeamRegistration)
}

void TeamRegistration::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
}

TeamRegistration::~TeamRegistration() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.TeamRegistration)
  SharedDtor();
}

void TeamRegistration::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void TeamRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamRegistration::descriptor() {
  ::protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRegistration& TeamRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fteam_2eproto::scc_info_TeamRegistration.base);
  return *internal_default_instance();
}


void TeamRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.TeamRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.TeamRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string team_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.TeamRegistration.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.TeamRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.TeamRegistration)
  return false;
#undef DO_
}

void TeamRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.TeamRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.TeamRegistration.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.TeamRegistration)
}

::google::protobuf::uint8* TeamRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.TeamRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.TeamRegistration.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_signature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.TeamRegistration)
  return target;
}

size_t TeamRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.TeamRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string team_name = 1;
  if (has_team_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }
  // optional .ssl_protos.gc.Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.TeamRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.TeamRegistration)
    MergeFrom(*source);
  }
}

void TeamRegistration::MergeFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
    }
  }
}

void TeamRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRegistration::CopyFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamRegistration::Swap(TeamRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRegistration::InternalSwap(TeamRegistration* other) {
  using std::swap;
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamRegistration::GetMetadata() const {
  protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamToController::InitAsDefaultInstance() {
  ::ssl_protos::gc::_TeamToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
  ::ssl_protos::gc::_TeamToController_default_instance_.desired_keeper_ = 0;
  ::ssl_protos::gc::_TeamToController_default_instance_.substitute_bot_ = false;
  ::ssl_protos::gc::_TeamToController_default_instance_.ping_ = false;
}
void TeamToController::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamToController::kSignatureFieldNumber;
const int TeamToController::kDesiredKeeperFieldNumber;
const int TeamToController::kSubstituteBotFieldNumber;
const int TeamToController::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamToController::TeamToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fteam_2eproto::scc_info_TeamToController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.TeamToController)
}
TeamToController::TeamToController(const TeamToController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kSubstituteBot: {
      set_substitute_bot(from.substitute_bot());
      break;
    }
    case kPing: {
      set_ping(from.ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.TeamToController)
}

void TeamToController::SharedCtor() {
  signature_ = NULL;
  clear_has_msg();
}

TeamToController::~TeamToController() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.TeamToController)
  SharedDtor();
}

void TeamToController::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void TeamToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamToController::descriptor() {
  ::protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamToController& TeamToController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fteam_2eproto::scc_info_TeamToController.base);
  return *internal_default_instance();
}


void TeamToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ssl_protos.gc.TeamToController)
  switch (msg_case()) {
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void TeamToController::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.TeamToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != NULL);
    signature_->Clear();
  }
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.TeamToController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Signature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 desired_keeper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_.desired_keeper_)));
          set_has_desired_keeper();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool substitute_bot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.substitute_bot_)));
          set_has_substitute_bot();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ping = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.ping_)));
          set_has_ping();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.TeamToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.TeamToController)
  return false;
#undef DO_
}

void TeamToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.TeamToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_signature(), output);
  }

  switch (msg_case()) {
    case kDesiredKeeper:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desired_keeper(), output);
      break;
    case kSubstituteBot:
      ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->substitute_bot(), output);
      break;
    case kPing:
      ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ping(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.TeamToController)
}

::google::protobuf::uint8* TeamToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.TeamToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_signature(), deterministic, target);
  }

  switch (msg_case()) {
    case kDesiredKeeper:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desired_keeper(), target);
      break;
    case kSubstituteBot:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->substitute_bot(), target);
      break;
    case kPing:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ping(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.TeamToController)
  return target;
}

size_t TeamToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.TeamToController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Signature signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  switch (msg_case()) {
    // optional int32 desired_keeper = 2;
    case kDesiredKeeper: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desired_keeper());
      break;
    }
    // optional bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // optional bool ping = 5;
    case kPing: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamToController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.TeamToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.TeamToController)
    MergeFrom(*source);
  }
}

void TeamToController::MergeFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
  }
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kSubstituteBot: {
      set_substitute_bot(from.substitute_bot());
      break;
    }
    case kPing: {
      set_ping(from.ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void TeamToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamToController::CopyFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamToController::IsInitialized() const {
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamToController::Swap(TeamToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamToController::InternalSwap(TeamToController* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamToController::GetMetadata() const {
  protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerToTeam::InitAsDefaultInstance() {
  ::ssl_protos::gc::_ControllerToTeam_default_instance_.controller_reply_ = const_cast< ::ssl_protos::gc::ControllerReply*>(
      ::ssl_protos::gc::ControllerReply::internal_default_instance());
}
void ControllerToTeam::set_allocated_controller_reply(::ssl_protos::gc::ControllerReply* controller_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (controller_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.ControllerToTeam.controller_reply)
}
void ControllerToTeam::clear_controller_reply() {
  if (has_controller_reply()) {
    delete msg_.controller_reply_;
    clear_has_msg();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToTeam::kControllerReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToTeam::ControllerToTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fteam_2eproto::scc_info_ControllerToTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.ControllerToTeam)
}
ControllerToTeam::ControllerToTeam(const ControllerToTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ssl_protos::gc::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.ControllerToTeam)
}

void ControllerToTeam::SharedCtor() {
  clear_has_msg();
}

ControllerToTeam::~ControllerToTeam() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.ControllerToTeam)
  SharedDtor();
}

void ControllerToTeam::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerToTeam::descriptor() {
  ::protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerToTeam& ControllerToTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fteam_2eproto::scc_info_ControllerToTeam.base);
  return *internal_default_instance();
}


void ControllerToTeam::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ssl_protos.gc.ControllerToTeam)
  switch (msg_case()) {
    case kControllerReply: {
      delete msg_.controller_reply_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.ControllerToTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerToTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.ControllerToTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.ControllerToTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.ControllerToTeam)
  return false;
#undef DO_
}

void ControllerToTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.ControllerToTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.ControllerToTeam)
}

::google::protobuf::uint8* ControllerToTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.ControllerToTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_reply(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.ControllerToTeam)
  return target;
}

size_t ControllerToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.ControllerToTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (msg_case()) {
    // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.ControllerToTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.ControllerToTeam)
    MergeFrom(*source);
  }
}

void ControllerToTeam::MergeFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ssl_protos::gc::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToTeam::CopyFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToTeam::IsInitialized() const {
  return true;
}

void ControllerToTeam::Swap(ControllerToTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToTeam::InternalSwap(ControllerToTeam* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerToTeam::GetMetadata() const {
  protobuf_gc_5frcon_5fteam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fteam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::TeamRegistration* Arena::CreateMaybeMessage< ::ssl_protos::gc::TeamRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::TeamRegistration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::TeamToController* Arena::CreateMaybeMessage< ::ssl_protos::gc::TeamToController >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::TeamToController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::ControllerToTeam* Arena::CreateMaybeMessage< ::ssl_protos::gc::ControllerToTeam >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::ControllerToTeam >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
