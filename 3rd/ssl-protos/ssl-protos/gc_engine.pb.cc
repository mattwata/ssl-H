// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_engine.proto

#include "gc_engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotId;
}  // namespace protobuf_gc_5fcommon_2eproto
namespace protobuf_gc_5fengine_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GcStateAutoRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GcStateTeam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Ball;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TrackerStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GcStateTracker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Robot;
}  // namespace protobuf_gc_5fengine_2eproto
namespace protobuf_gc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_gc_5fgeometry_2eproto
namespace ssl_protos {
namespace gc {
class GcState_TeamStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_TeamStateEntry_DoNotUse>
      _instance;
} _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_AutoRefStateEntry_DoNotUse>
      _instance;
} _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TrackerStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_TrackerStateEntry_DoNotUse>
      _instance;
} _GcState_TrackerStateEntry_DoNotUse_default_instance_;
class GcStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState>
      _instance;
} _GcState_default_instance_;
class GcStateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateTeam>
      _instance;
} _GcStateTeam_default_instance_;
class GcStateAutoRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateAutoRef>
      _instance;
} _GcStateAutoRef_default_instance_;
class GcStateTrackerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateTracker>
      _instance;
} _GcStateTracker_default_instance_;
class BallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ball>
      _instance;
} _Ball_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5fengine_2eproto {
static void InitDefaultsGcState_TeamStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcState_TeamStateEntry_DoNotUse_default_instance_;
    new (ptr) ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse();
  }
  ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcState_TeamStateEntry_DoNotUse}, {
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateTeam.base,}};

static void InitDefaultsGcState_AutoRefStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcState_AutoRefStateEntry_DoNotUse_default_instance_;
    new (ptr) ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse();
  }
  ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcState_AutoRefStateEntry_DoNotUse}, {
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateAutoRef.base,}};

static void InitDefaultsGcState_TrackerStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcState_TrackerStateEntry_DoNotUse_default_instance_;
    new (ptr) ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse();
  }
  ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TrackerStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcState_TrackerStateEntry_DoNotUse}, {
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateTracker.base,}};

static void InitDefaultsGcState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcState_default_instance_;
    new (ptr) ::ssl_protos::gc::GcState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::GcState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_GcState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGcState}, {
      &protobuf_gc_5fengine_2eproto::scc_info_GcState_TeamStateEntry_DoNotUse.base,
      &protobuf_gc_5fengine_2eproto::scc_info_GcState_AutoRefStateEntry_DoNotUse.base,
      &protobuf_gc_5fengine_2eproto::scc_info_GcState_TrackerStateEntry_DoNotUse.base,
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateTracker.base,}};

static void InitDefaultsGcStateTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcStateTeam_default_instance_;
    new (ptr) ::ssl_protos::gc::GcStateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::GcStateTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GcStateTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGcStateTeam}, {}};

static void InitDefaultsGcStateAutoRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcStateAutoRef_default_instance_;
    new (ptr) ::ssl_protos::gc::GcStateAutoRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::GcStateAutoRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GcStateAutoRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGcStateAutoRef}, {}};

static void InitDefaultsGcStateTracker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_GcStateTracker_default_instance_;
    new (ptr) ::ssl_protos::gc::GcStateTracker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::GcStateTracker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GcStateTracker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGcStateTracker}, {
      &protobuf_gc_5fengine_2eproto::scc_info_Ball.base,
      &protobuf_gc_5fengine_2eproto::scc_info_Robot.base,}};

static void InitDefaultsBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_Ball_default_instance_;
    new (ptr) ::ssl_protos::gc::Ball();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::Ball::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ball =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBall}, {
      &protobuf_gc_5fgeometry_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_Robot_default_instance_;
    new (ptr) ::ssl_protos::gc::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobot}, {
      &protobuf_gc_5fcommon_2eproto::scc_info_RobotId.base,
      &protobuf_gc_5fgeometry_2eproto::scc_info_Vector2.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_TeamStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_AutoRefStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_TrackerStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateAutoRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateTracker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ball.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, team_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, auto_ref_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, tracker_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, tracker_state_gc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcState, ready_to_continue_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, connection_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, remote_control_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTeam, remote_control_connection_verified_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateAutoRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateAutoRef, connection_verified_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::GcStateTracker, robots_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Ball, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Ball, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Ball, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Ball, vel_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Robot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Robot, pos_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse)},
  { 9, 16, sizeof(::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse)},
  { 18, 25, sizeof(::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse)},
  { 27, 37, sizeof(::ssl_protos::gc::GcState)},
  { 42, 51, sizeof(::ssl_protos::gc::GcStateTeam)},
  { 55, 61, sizeof(::ssl_protos::gc::GcStateAutoRef)},
  { 62, 71, sizeof(::ssl_protos::gc::GcStateTracker)},
  { 75, 82, sizeof(::ssl_protos::gc::Ball)},
  { 84, 91, sizeof(::ssl_protos::gc::Robot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcState_TeamStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcState_AutoRefStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcState_TrackerStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcStateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcStateAutoRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_GcStateTracker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_Ball_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_Robot_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_engine.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017gc_engine.proto\022\rssl_protos.gc\032\021gc_geo"
      "metry.proto\032\017gc_common.proto\"\221\004\n\007GcState"
      "\0229\n\nteam_state\030\001 \003(\0132%.ssl_protos.gc.GcS"
      "tate.TeamStateEntry\022@\n\016auto_ref_state\030\002 "
      "\003(\0132(.ssl_protos.gc.GcState.AutoRefState"
      "Entry\022\?\n\rtracker_state\030\003 \003(\0132(.ssl_proto"
      "s.gc.GcState.TrackerStateEntry\0227\n\020tracke"
      "r_state_gc\030\004 \001(\0132\035.ssl_protos.gc.GcState"
      "Tracker\022\031\n\021ready_to_continue\030\005 \001(\010\032L\n\016Te"
      "amStateEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\013"
      "2\032.ssl_protos.gc.GcStateTeam:\0028\001\032R\n\021Auto"
      "RefStateEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001("
      "\0132\035.ssl_protos.gc.GcStateAutoRef:\0028\001\032R\n\021"
      "TrackerStateEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030"
      "\002 \001(\0132\035.ssl_protos.gc.GcStateTracker:\0028\001"
      "\"\213\001\n\013GcStateTeam\022\021\n\tconnected\030\001 \001(\010\022\033\n\023c"
      "onnection_verified\030\002 \001(\010\022 \n\030remote_contr"
      "ol_connected\030\003 \001(\010\022*\n\"remote_control_con"
      "nection_verified\030\004 \001(\010\"-\n\016GcStateAutoRef"
      "\022\033\n\023connection_verified\030\001 \001(\010\"|\n\016GcState"
      "Tracker\022\023\n\013source_name\030\001 \001(\t\022\014\n\004uuid\030\004 \001"
      "(\t\022!\n\004ball\030\002 \001(\0132\023.ssl_protos.gc.Ball\022$\n"
      "\006robots\030\003 \003(\0132\024.ssl_protos.gc.Robot\"P\n\004B"
      "all\022#\n\003pos\030\001 \001(\0132\026.ssl_protos.gc.Vector3"
      "\022#\n\003vel\030\002 \001(\0132\026.ssl_protos.gc.Vector3\"P\n"
      "\005Robot\022\"\n\002id\030\001 \001(\0132\026.ssl_protos.gc.Robot"
      "Id\022#\n\003pos\030\002 \001(\0132\026.ssl_protos.gc.Vector2B"
      "@Z>github.com/RoboCup-SSL/ssl-game-contr"
      "oller/internal/app/engine"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_engine.proto", &protobuf_RegisterTypes);
  ::protobuf_gc_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_gc_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5fengine_2eproto
namespace ssl_protos {
namespace gc {

// ===================================================================

GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse() {}
GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(const GcState_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_TeamStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[0];
}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse() {}
GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_AutoRefStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[1];
}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GcState_TrackerStateEntry_DoNotUse::GcState_TrackerStateEntry_DoNotUse() {}
GcState_TrackerStateEntry_DoNotUse::GcState_TrackerStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_TrackerStateEntry_DoNotUse::MergeFrom(const GcState_TrackerStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_TrackerStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[2];
}
void GcState_TrackerStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GcState::InitAsDefaultInstance() {
  ::ssl_protos::gc::_GcState_default_instance_._instance.get_mutable()->tracker_state_gc_ = const_cast< ::ssl_protos::gc::GcStateTracker*>(
      ::ssl_protos::gc::GcStateTracker::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcState::kTeamStateFieldNumber;
const int GcState::kAutoRefStateFieldNumber;
const int GcState::kTrackerStateFieldNumber;
const int GcState::kTrackerStateGcFieldNumber;
const int GcState::kReadyToContinueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcState::GcState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_GcState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.GcState)
}
GcState::GcState(const GcState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  tracker_state_.MergeFrom(from.tracker_state_);
  if (from.has_tracker_state_gc()) {
    tracker_state_gc_ = new ::ssl_protos::gc::GcStateTracker(*from.tracker_state_gc_);
  } else {
    tracker_state_gc_ = NULL;
  }
  ready_to_continue_ = from.ready_to_continue_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.GcState)
}

void GcState::SharedCtor() {
  ::memset(&tracker_state_gc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_to_continue_) -
      reinterpret_cast<char*>(&tracker_state_gc_)) + sizeof(ready_to_continue_));
}

GcState::~GcState() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.GcState)
  SharedDtor();
}

void GcState::SharedDtor() {
  if (this != internal_default_instance()) delete tracker_state_gc_;
}

void GcState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcState::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcState& GcState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_GcState.base);
  return *internal_default_instance();
}


void GcState::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_state_.Clear();
  auto_ref_state_.Clear();
  tracker_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tracker_state_gc_ != NULL);
    tracker_state_gc_->Clear();
  }
  ready_to_continue_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.GcState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          GcState_TeamStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_TeamStateEntry_DoNotUse,
              ::std::string, ::ssl_protos::gc::GcStateTeam,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam > > parser(&team_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.GcState.TeamStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          GcState_AutoRefStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_AutoRefStateEntry_DoNotUse,
              ::std::string, ::ssl_protos::gc::GcStateAutoRef,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef > > parser(&auto_ref_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.GcState.AutoRefStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          GcState_TrackerStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_TrackerStateEntry_DoNotUse,
              ::std::string, ::ssl_protos::gc::GcStateTracker,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker > > parser(&tracker_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.GcState.TrackerStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tracker_state_gc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ready_to_continue = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ready_to_continue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_to_continue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.GcState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.GcState)
  return false;
#undef DO_
}

void GcState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.TeamStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
  if (!this->auto_ref_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.AutoRefStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->auto_ref_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->auto_ref_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
  if (!this->tracker_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.TrackerStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tracker_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tracker_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_iterator
          it = this->tracker_state().begin();
          it != this->tracker_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TrackerStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tracker_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TrackerStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_iterator
          it = this->tracker_state().begin();
          it != this->tracker_state().end(); ++it) {
        entry.reset(tracker_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_tracker_state_gc(), output);
  }

  // optional bool ready_to_continue = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready_to_continue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.GcState)
}

::google::protobuf::uint8* GcState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.TeamStateEntry.key");
      }
    };

    if (deterministic &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
  if (!this->auto_ref_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.AutoRefStateEntry.key");
      }
    };

    if (deterministic &&
        this->auto_ref_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->auto_ref_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
  if (!this->tracker_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ssl_protos.gc.GcState.TrackerStateEntry.key");
      }
    };

    if (deterministic &&
        this->tracker_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tracker_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_iterator
          it = this->tracker_state().begin();
          it != this->tracker_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TrackerStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tracker_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TrackerStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_iterator
          it = this->tracker_state().begin();
          it != this->tracker_state().end(); ++it) {
        entry.reset(tracker_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_tracker_state_gc(), deterministic, target);
  }

  // optional bool ready_to_continue = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready_to_continue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.GcState)
  return target;
}

size_t GcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.GcState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->team_state_size());
  {
    ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >::const_iterator
        it = this->team_state().begin();
        it != this->team_state().end(); ++it) {
      entry.reset(team_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->auto_ref_state_size());
  {
    ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >::const_iterator
        it = this->auto_ref_state().begin();
        it != this->auto_ref_state().end(); ++it) {
      entry.reset(auto_ref_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tracker_state_size());
  {
    ::std::unique_ptr<GcState_TrackerStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >::const_iterator
        it = this->tracker_state().begin();
        it != this->tracker_state().end(); ++it) {
      entry.reset(tracker_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
    if (has_tracker_state_gc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tracker_state_gc_);
    }

    // optional bool ready_to_continue = 5;
    if (has_ready_to_continue()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.GcState)
  GOOGLE_DCHECK_NE(&from, this);
  const GcState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.GcState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.GcState)
    MergeFrom(*source);
  }
}

void GcState::MergeFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.GcState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  tracker_state_.MergeFrom(from.tracker_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tracker_state_gc()->::ssl_protos::gc::GcStateTracker::MergeFrom(from.tracker_state_gc());
    }
    if (cached_has_bits & 0x00000002u) {
      ready_to_continue_ = from.ready_to_continue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GcState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcState::CopyFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcState::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tracker_state())) return false;
  if (has_tracker_state_gc()) {
    if (!this->tracker_state_gc_->IsInitialized()) return false;
  }
  return true;
}

void GcState::Swap(GcState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcState::InternalSwap(GcState* other) {
  using std::swap;
  team_state_.Swap(&other->team_state_);
  auto_ref_state_.Swap(&other->auto_ref_state_);
  tracker_state_.Swap(&other->tracker_state_);
  swap(tracker_state_gc_, other->tracker_state_gc_);
  swap(ready_to_continue_, other->ready_to_continue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcState::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateTeam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateTeam::kConnectedFieldNumber;
const int GcStateTeam::kConnectionVerifiedFieldNumber;
const int GcStateTeam::kRemoteControlConnectedFieldNumber;
const int GcStateTeam::kRemoteControlConnectionVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateTeam::GcStateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.GcStateTeam)
}
GcStateTeam::GcStateTeam(const GcStateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_control_connection_verified_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.GcStateTeam)
}

void GcStateTeam::SharedCtor() {
  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
}

GcStateTeam::~GcStateTeam() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.GcStateTeam)
  SharedDtor();
}

void GcStateTeam::SharedDtor() {
}

void GcStateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateTeam::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateTeam& GcStateTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_GcStateTeam.base);
  return *internal_default_instance();
}


void GcStateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.GcStateTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connection_verified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remote_control_connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_remote_control_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_control_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remote_control_connection_verified = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_remote_control_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_control_connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.GcStateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.GcStateTeam)
  return false;
#undef DO_
}

void GcStateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connected(), output);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->connection_verified(), output);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->remote_control_connected(), output);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remote_control_connection_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.GcStateTeam)
}

::google::protobuf::uint8* GcStateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connected(), target);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->connection_verified(), target);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->remote_control_connected(), target);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->remote_control_connection_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.GcStateTeam)
  return target;
}

size_t GcStateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.GcStateTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool connected = 1;
    if (has_connected()) {
      total_size += 1 + 1;
    }

    // optional bool connection_verified = 2;
    if (has_connection_verified()) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connected = 3;
    if (has_remote_control_connected()) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connection_verified = 4;
    if (has_remote_control_connection_verified()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.GcStateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.GcStateTeam)
    MergeFrom(*source);
  }
}

void GcStateTeam::MergeFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000002u) {
      connection_verified_ = from.connection_verified_;
    }
    if (cached_has_bits & 0x00000004u) {
      remote_control_connected_ = from.remote_control_connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      remote_control_connection_verified_ = from.remote_control_connection_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GcStateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTeam::CopyFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTeam::IsInitialized() const {
  return true;
}

void GcStateTeam::Swap(GcStateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateTeam::InternalSwap(GcStateTeam* other) {
  using std::swap;
  swap(connected_, other->connected_);
  swap(connection_verified_, other->connection_verified_);
  swap(remote_control_connected_, other->remote_control_connected_);
  swap(remote_control_connection_verified_, other->remote_control_connection_verified_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateTeam::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateAutoRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateAutoRef::kConnectionVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateAutoRef::GcStateAutoRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateAutoRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.GcStateAutoRef)
}
GcStateAutoRef::GcStateAutoRef(const GcStateAutoRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_verified_ = from.connection_verified_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.GcStateAutoRef)
}

void GcStateAutoRef::SharedCtor() {
  connection_verified_ = false;
}

GcStateAutoRef::~GcStateAutoRef() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.GcStateAutoRef)
  SharedDtor();
}

void GcStateAutoRef::SharedDtor() {
}

void GcStateAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateAutoRef::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateAutoRef& GcStateAutoRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_GcStateAutoRef.base);
  return *internal_default_instance();
}


void GcStateAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_verified_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateAutoRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.GcStateAutoRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connection_verified = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.GcStateAutoRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.GcStateAutoRef)
  return false;
#undef DO_
}

void GcStateAutoRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connection_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.GcStateAutoRef)
}

::google::protobuf::uint8* GcStateAutoRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connection_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.GcStateAutoRef)
  return target;
}

size_t GcStateAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.GcStateAutoRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool connection_verified = 1;
  if (has_connection_verified()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateAutoRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateAutoRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateAutoRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.GcStateAutoRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.GcStateAutoRef)
    MergeFrom(*source);
  }
}

void GcStateAutoRef::MergeFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_verified()) {
    set_connection_verified(from.connection_verified());
  }
}

void GcStateAutoRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateAutoRef::CopyFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateAutoRef::IsInitialized() const {
  return true;
}

void GcStateAutoRef::Swap(GcStateAutoRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateAutoRef::InternalSwap(GcStateAutoRef* other) {
  using std::swap;
  swap(connection_verified_, other->connection_verified_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateAutoRef::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateTracker::InitAsDefaultInstance() {
  ::ssl_protos::gc::_GcStateTracker_default_instance_._instance.get_mutable()->ball_ = const_cast< ::ssl_protos::gc::Ball*>(
      ::ssl_protos::gc::Ball::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateTracker::kSourceNameFieldNumber;
const int GcStateTracker::kUuidFieldNumber;
const int GcStateTracker::kBallFieldNumber;
const int GcStateTracker::kRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateTracker::GcStateTracker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_GcStateTracker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.GcStateTracker)
}
GcStateTracker::GcStateTracker(const GcStateTracker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robots_(from.robots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_name()) {
    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_ball()) {
    ball_ = new ::ssl_protos::gc::Ball(*from.ball_);
  } else {
    ball_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.GcStateTracker)
}

void GcStateTracker::SharedCtor() {
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ball_ = NULL;
}

GcStateTracker::~GcStateTracker() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.GcStateTracker)
  SharedDtor();
}

void GcStateTracker::SharedDtor() {
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ball_;
}

void GcStateTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateTracker::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateTracker& GcStateTracker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_GcStateTracker.base);
  return *internal_default_instance();
}


void GcStateTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      source_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ball_ != NULL);
      ball_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.GcStateTracker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_name().data(), static_cast<int>(this->source_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.GcStateTracker.source_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Ball ball = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssl_protos.gc.Robot robots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.GcStateTracker.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.GcStateTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.GcStateTracker)
  return false;
#undef DO_
}

void GcStateTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.GcStateTracker.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_name(), output);
  }

  // optional .ssl_protos.gc.Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ball(), output);
  }

  // repeated .ssl_protos.gc.Robot robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->robots(static_cast<int>(i)),
      output);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.GcStateTracker.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.GcStateTracker)
}

::google::protobuf::uint8* GcStateTracker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.GcStateTracker.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_name(), target);
  }

  // optional .ssl_protos.gc.Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ball(), deterministic, target);
  }

  // repeated .ssl_protos.gc.Robot robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->robots(static_cast<int>(i)), deterministic, target);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.GcStateTracker.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.GcStateTracker)
  return target;
}

size_t GcStateTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.GcStateTracker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ssl_protos.gc.Robot robots = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string source_name = 1;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .ssl_protos.gc.Ball ball = 2;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ball_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTracker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTracker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateTracker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.GcStateTracker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.GcStateTracker)
    MergeFrom(*source);
  }
}

void GcStateTracker::MergeFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_.MergeFrom(from.robots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_name();
      source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ball()->::ssl_protos::gc::Ball::MergeFrom(from.ball());
    }
  }
}

void GcStateTracker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTracker::CopyFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTracker::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->robots())) return false;
  if (has_ball()) {
    if (!this->ball_->IsInitialized()) return false;
  }
  return true;
}

void GcStateTracker::Swap(GcStateTracker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateTracker::InternalSwap(GcStateTracker* other) {
  using std::swap;
  CastToBase(&robots_)->InternalSwap(CastToBase(&other->robots_));
  source_name_.Swap(&other->source_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ball_, other->ball_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateTracker::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ball::InitAsDefaultInstance() {
  ::ssl_protos::gc::_Ball_default_instance_._instance.get_mutable()->pos_ = const_cast< ::ssl_protos::gc::Vector3*>(
      ::ssl_protos::gc::Vector3::internal_default_instance());
  ::ssl_protos::gc::_Ball_default_instance_._instance.get_mutable()->vel_ = const_cast< ::ssl_protos::gc::Vector3*>(
      ::ssl_protos::gc::Vector3::internal_default_instance());
}
void Ball::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
void Ball::clear_vel() {
  if (vel_ != NULL) vel_->Clear();
  clear_has_vel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ball::kPosFieldNumber;
const int Ball::kVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ball::Ball()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_Ball.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.Ball)
}
Ball::Ball(const Ball& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::ssl_protos::gc::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::ssl_protos::gc::Vector3(*from.vel_);
  } else {
    vel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.Ball)
}

void Ball::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(vel_));
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.Ball)
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void Ball::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ball& Ball::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_Ball.base);
  return *internal_default_instance();
}


void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != NULL);
      vel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.Ball)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Vector3 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Vector3 vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.Ball)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.Ball)
  return false;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // optional .ssl_protos.gc.Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.Ball)
}

::google::protobuf::uint8* Ball::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // optional .ssl_protos.gc.Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.Ball)
  return target;
}

size_t Ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.Ball)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.Vector3 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .ssl_protos.gc.Vector3 vel = 2;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vel_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.Ball)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ball>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.Ball)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.Ball)
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.Ball)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::ssl_protos::gc::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vel()->::ssl_protos::gc::Vector3::MergeFrom(from.vel());
    }
  }
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel_->IsInitialized()) return false;
  }
  return true;
}

void Ball::Swap(Ball* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ball::InternalSwap(Ball* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::ssl_protos::gc::_Robot_default_instance_._instance.get_mutable()->id_ = const_cast< ::ssl_protos::gc::RobotId*>(
      ::ssl_protos::gc::RobotId::internal_default_instance());
  ::ssl_protos::gc::_Robot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::ssl_protos::gc::Vector2*>(
      ::ssl_protos::gc::Vector2::internal_default_instance());
}
void Robot::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Robot::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kIdFieldNumber;
const int Robot::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fengine_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::ssl_protos::gc::RobotId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::ssl_protos::gc::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.Robot)
}

void Robot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pos_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete pos_;
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fengine_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.RobotId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Vector2 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .ssl_protos.gc.Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .ssl_protos.gc.Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pos(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.RobotId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .ssl_protos.gc.Vector2 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::ssl_protos::gc::RobotId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pos()->::ssl_protos::gc::Vector2::MergeFrom(from.pos());
    }
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_gc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcState* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcState >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcStateTeam* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcStateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcStateTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcStateAutoRef* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcStateAutoRef >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcStateAutoRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::GcStateTracker* Arena::CreateMaybeMessage< ::ssl_protos::gc::GcStateTracker >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::GcStateTracker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::Ball* Arena::CreateMaybeMessage< ::ssl_protos::gc::Ball >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::Ball >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::Robot* Arena::CreateMaybeMessage< ::ssl_protos::gc::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::Robot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
