// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_geometry.proto

#include "vision_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vision_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BallModelChipFixedLoss;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BallModelStraightTwoPhase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraCalibration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2f;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FieldCircularArc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FieldLineSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FieldSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GeometryModels;
}  // namespace protobuf_vision_5fgeometry_2eproto
namespace ssl_protos {
namespace vision {
class Vector2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector2f>
      _instance;
} _Vector2f_default_instance_;
class FieldLineSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldLineSegment>
      _instance;
} _FieldLineSegment_default_instance_;
class FieldCircularArcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldCircularArc>
      _instance;
} _FieldCircularArc_default_instance_;
class FieldSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldSize>
      _instance;
} _FieldSize_default_instance_;
class CameraCalibrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraCalibration>
      _instance;
} _CameraCalibration_default_instance_;
class BallModelStraightTwoPhaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallModelStraightTwoPhase>
      _instance;
} _BallModelStraightTwoPhase_default_instance_;
class BallModelChipFixedLossDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallModelChipFixedLoss>
      _instance;
} _BallModelChipFixedLoss_default_instance_;
class GeometryModelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeometryModels>
      _instance;
} _GeometryModels_default_instance_;
class GeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geometry>
      _instance;
} _Geometry_default_instance_;
}  // namespace vision
}  // namespace ssl_protos
namespace protobuf_vision_5fgeometry_2eproto {
static void InitDefaultsVector2f() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_Vector2f_default_instance_;
    new (ptr) ::ssl_protos::vision::Vector2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::Vector2f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vector2f =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVector2f}, {}};

static void InitDefaultsFieldLineSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_FieldLineSegment_default_instance_;
    new (ptr) ::ssl_protos::vision::FieldLineSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::FieldLineSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FieldLineSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFieldLineSegment}, {
      &protobuf_vision_5fgeometry_2eproto::scc_info_Vector2f.base,}};

static void InitDefaultsFieldCircularArc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_FieldCircularArc_default_instance_;
    new (ptr) ::ssl_protos::vision::FieldCircularArc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::FieldCircularArc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FieldCircularArc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFieldCircularArc}, {
      &protobuf_vision_5fgeometry_2eproto::scc_info_Vector2f.base,}};

static void InitDefaultsFieldSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_FieldSize_default_instance_;
    new (ptr) ::ssl_protos::vision::FieldSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::FieldSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FieldSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFieldSize}, {
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldLineSegment.base,
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldCircularArc.base,}};

static void InitDefaultsCameraCalibration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_CameraCalibration_default_instance_;
    new (ptr) ::ssl_protos::vision::CameraCalibration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::CameraCalibration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraCalibration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraCalibration}, {}};

static void InitDefaultsBallModelStraightTwoPhase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_BallModelStraightTwoPhase_default_instance_;
    new (ptr) ::ssl_protos::vision::BallModelStraightTwoPhase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::BallModelStraightTwoPhase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BallModelStraightTwoPhase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBallModelStraightTwoPhase}, {}};

static void InitDefaultsBallModelChipFixedLoss() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_BallModelChipFixedLoss_default_instance_;
    new (ptr) ::ssl_protos::vision::BallModelChipFixedLoss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::BallModelChipFixedLoss::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BallModelChipFixedLoss =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBallModelChipFixedLoss}, {}};

static void InitDefaultsGeometryModels() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_GeometryModels_default_instance_;
    new (ptr) ::ssl_protos::vision::GeometryModels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::GeometryModels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GeometryModels =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGeometryModels}, {
      &protobuf_vision_5fgeometry_2eproto::scc_info_BallModelStraightTwoPhase.base,
      &protobuf_vision_5fgeometry_2eproto::scc_info_BallModelChipFixedLoss.base,}};

static void InitDefaultsGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::vision::_Geometry_default_instance_;
    new (ptr) ::ssl_protos::vision::Geometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::vision::Geometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Geometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGeometry}, {
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldSize.base,
      &protobuf_vision_5fgeometry_2eproto::scc_info_CameraCalibration.base,
      &protobuf_vision_5fgeometry_2eproto::scc_info_GeometryModels.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vector2f.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldLineSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldCircularArc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraCalibration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BallModelStraightTwoPhase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BallModelChipFixedLoss.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeometryModels.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Geometry.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Vector2f, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Vector2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Vector2f, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, p1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, p2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldLineSegment, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, thickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldCircularArc, type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, field_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, field_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, goal_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, goal_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, boundary_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, field_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, field_arcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, penalty_area_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::FieldSize, penalty_area_width_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, focal_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, principal_point_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, principal_point_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, q0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, q1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, q2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, q3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, derived_camera_world_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, derived_camera_world_ty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, derived_camera_world_tz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, pixel_image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::CameraCalibration, pixel_image_height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelStraightTwoPhase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelStraightTwoPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelStraightTwoPhase, acc_slide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelStraightTwoPhase, acc_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelStraightTwoPhase, k_switch_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelChipFixedLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelChipFixedLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelChipFixedLoss, damping_xy_first_hop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelChipFixedLoss, damping_xy_other_hops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::BallModelChipFixedLoss, damping_z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::GeometryModels, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::GeometryModels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::GeometryModels, straight_two_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::GeometryModels, chip_fixed_loss_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Geometry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Geometry, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Geometry, calib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::vision::Geometry, models_),
  0,
  ~0u,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssl_protos::vision::Vector2f)},
  { 9, 19, sizeof(::ssl_protos::vision::FieldLineSegment)},
  { 24, 36, sizeof(::ssl_protos::vision::FieldCircularArc)},
  { 43, 57, sizeof(::ssl_protos::vision::FieldSize)},
  { 66, 88, sizeof(::ssl_protos::vision::CameraCalibration)},
  { 105, 113, sizeof(::ssl_protos::vision::BallModelStraightTwoPhase)},
  { 116, 124, sizeof(::ssl_protos::vision::BallModelChipFixedLoss)},
  { 127, 134, sizeof(::ssl_protos::vision::GeometryModels)},
  { 136, 144, sizeof(::ssl_protos::vision::Geometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_Vector2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_FieldLineSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_FieldCircularArc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_FieldSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_CameraCalibration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_BallModelStraightTwoPhase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_BallModelChipFixedLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_GeometryModels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::vision::_Geometry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vision_geometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025vision_geometry.proto\022\021ssl_protos.visi"
      "on\" \n\010Vector2f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\266\001\n"
      "\020FieldLineSegment\022\014\n\004name\030\001 \002(\t\022\'\n\002p1\030\002 "
      "\002(\0132\033.ssl_protos.vision.Vector2f\022\'\n\002p2\030\003"
      " \002(\0132\033.ssl_protos.vision.Vector2f\022\021\n\tthi"
      "ckness\030\004 \002(\002\022/\n\004type\030\005 \001(\0162!.ssl_protos."
      "vision.FieldShapeType\"\271\001\n\020FieldCircularA"
      "rc\022\014\n\004name\030\001 \002(\t\022+\n\006center\030\002 \002(\0132\033.ssl_p"
      "rotos.vision.Vector2f\022\016\n\006radius\030\003 \002(\002\022\n\n"
      "\002a1\030\004 \002(\002\022\n\n\002a2\030\005 \002(\002\022\021\n\tthickness\030\006 \002(\002"
      "\022/\n\004type\030\007 \001(\0162!.ssl_protos.vision.Field"
      "ShapeType\"\241\002\n\tFieldSize\022\024\n\014field_length\030"
      "\001 \002(\005\022\023\n\013field_width\030\002 \002(\005\022\022\n\ngoal_width"
      "\030\003 \002(\005\022\022\n\ngoal_depth\030\004 \002(\005\022\026\n\016boundary_w"
      "idth\030\005 \002(\005\0228\n\013field_lines\030\006 \003(\0132#.ssl_pr"
      "otos.vision.FieldLineSegment\0227\n\nfield_ar"
      "cs\030\007 \003(\0132#.ssl_protos.vision.FieldCircul"
      "arArc\022\032\n\022penalty_area_depth\030\010 \001(\005\022\032\n\022pen"
      "alty_area_width\030\t \001(\005\"\364\002\n\021CameraCalibrat"
      "ion\022\021\n\tcamera_id\030\001 \002(\r\022\024\n\014focal_length\030\002"
      " \002(\002\022\031\n\021principal_point_x\030\003 \002(\002\022\031\n\021princ"
      "ipal_point_y\030\004 \002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n"
      "\n\002q0\030\006 \002(\002\022\n\n\002q1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3"
      "\030\t \002(\002\022\n\n\002tx\030\n \002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002"
      "(\002\022\037\n\027derived_camera_world_tx\030\r \001(\002\022\037\n\027d"
      "erived_camera_world_ty\030\016 \001(\002\022\037\n\027derived_"
      "camera_world_tz\030\017 \001(\002\022\031\n\021pixel_image_wid"
      "th\030\020 \001(\r\022\032\n\022pixel_image_height\030\021 \001(\r\"R\n\031"
      "BallModelStraightTwoPhase\022\021\n\tacc_slide\030\001"
      " \002(\001\022\020\n\010acc_roll\030\002 \002(\001\022\020\n\010k_switch\030\003 \002(\001"
      "\"h\n\026BallModelChipFixedLoss\022\034\n\024damping_xy"
      "_first_hop\030\001 \002(\001\022\035\n\025damping_xy_other_hop"
      "s\030\002 \002(\001\022\021\n\tdamping_z\030\003 \002(\001\"\236\001\n\016GeometryM"
      "odels\022H\n\022straight_two_phase\030\001 \001(\0132,.ssl_"
      "protos.vision.BallModelStraightTwoPhase\022"
      "B\n\017chip_fixed_loss\030\002 \001(\0132).ssl_protos.vi"
      "sion.BallModelChipFixedLoss\"\237\001\n\010Geometry"
      "\022+\n\005field\030\001 \002(\0132\034.ssl_protos.vision.Fiel"
      "dSize\0223\n\005calib\030\002 \003(\0132$.ssl_protos.vision"
      ".CameraCalibration\0221\n\006models\030\003 \001(\0132!.ssl"
      "_protos.vision.GeometryModels*\327\002\n\016FieldS"
      "hapeType\022\r\n\tUndefined\020\000\022\020\n\014CenterCircle\020"
      "\001\022\020\n\014TopTouchLine\020\002\022\023\n\017BottomTouchLine\020\003"
      "\022\020\n\014LeftGoalLine\020\004\022\021\n\rRightGoalLine\020\005\022\017\n"
      "\013HalfwayLine\020\006\022\016\n\nCenterLine\020\007\022\026\n\022LeftPe"
      "naltyStretch\020\010\022\027\n\023RightPenaltyStretch\020\t\022"
      "\037\n\033LeftFieldLeftPenaltyStretch\020\n\022 \n\034Left"
      "FieldRightPenaltyStretch\020\013\022 \n\034RightField"
      "LeftPenaltyStretch\020\014\022!\n\035RightFieldRightP"
      "enaltyStretch\020\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_geometry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vision_5fgeometry_2eproto
namespace ssl_protos {
namespace vision {
const ::google::protobuf::EnumDescriptor* FieldShapeType_descriptor() {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fgeometry_2eproto::file_level_enum_descriptors[0];
}
bool FieldShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_Vector2f.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2f& Vector2f::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_Vector2f.base);
  return *internal_default_instance();
}


void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.Vector2f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.Vector2f)
  return target;
}

size_t Vector2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.Vector2f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.Vector2f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldLineSegment::InitAsDefaultInstance() {
  ::ssl_protos::vision::_FieldLineSegment_default_instance_._instance.get_mutable()->p1_ = const_cast< ::ssl_protos::vision::Vector2f*>(
      ::ssl_protos::vision::Vector2f::internal_default_instance());
  ::ssl_protos::vision::_FieldLineSegment_default_instance_._instance.get_mutable()->p2_ = const_cast< ::ssl_protos::vision::Vector2f*>(
      ::ssl_protos::vision::Vector2f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLineSegment::kNameFieldNumber;
const int FieldLineSegment::kP1FieldNumber;
const int FieldLineSegment::kP2FieldNumber;
const int FieldLineSegment::kThicknessFieldNumber;
const int FieldLineSegment::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLineSegment::FieldLineSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldLineSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.FieldLineSegment)
}
FieldLineSegment::FieldLineSegment(const FieldLineSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_p1()) {
    p1_ = new ::ssl_protos::vision::Vector2f(*from.p1_);
  } else {
    p1_ = NULL;
  }
  if (from.has_p2()) {
    p2_ = new ::ssl_protos::vision::Vector2f(*from.p2_);
  } else {
    p2_ = NULL;
  }
  ::memcpy(&thickness_, &from.thickness_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&thickness_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.FieldLineSegment)
}

void FieldLineSegment::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&p1_)) + sizeof(type_));
}

FieldLineSegment::~FieldLineSegment() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.FieldLineSegment)
  SharedDtor();
}

void FieldLineSegment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete p1_;
  if (this != internal_default_instance()) delete p2_;
}

void FieldLineSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FieldLineSegment::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldLineSegment& FieldLineSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_FieldLineSegment.base);
  return *internal_default_instance();
}


void FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p1_ != NULL);
      p1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(p2_ != NULL);
      p2_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&thickness_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldLineSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.FieldLineSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.vision.FieldLineSegment.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ssl_protos.vision.Vector2f p1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ssl_protos.vision.Vector2f p2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.FieldShapeType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::vision::FieldShapeType_IsValid(value)) {
            set_type(static_cast< ::ssl_protos::vision::FieldShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.FieldLineSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.FieldLineSegment)
  return false;
#undef DO_
}

void FieldLineSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.FieldLineSegment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .ssl_protos.vision.Vector2f p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_p1(), output);
  }

  // required .ssl_protos.vision.Vector2f p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_p2(), output);
  }

  // required float thickness = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thickness(), output);
  }

  // optional .ssl_protos.vision.FieldShapeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.FieldLineSegment)
}

::google::protobuf::uint8* FieldLineSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.FieldLineSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.FieldLineSegment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .ssl_protos.vision.Vector2f p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_p1(), deterministic, target);
  }

  // required .ssl_protos.vision.Vector2f p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_p2(), deterministic, target);
  }

  // required float thickness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thickness(), target);
  }

  // optional .ssl_protos.vision.FieldShapeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.FieldLineSegment)
  return target;
}

size_t FieldLineSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.FieldLineSegment)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_p1()) {
    // required .ssl_protos.vision.Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  if (has_p2()) {
    // required .ssl_protos.vision.Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p2_);
  }

  if (has_thickness()) {
    // required float thickness = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.FieldLineSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .ssl_protos.vision.Vector2f p1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p1_);

    // required .ssl_protos.vision.Vector2f p2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p2_);

    // required float thickness = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ssl_protos.vision.FieldShapeType type = 5;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldLineSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldLineSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLineSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.FieldLineSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.FieldLineSegment)
    MergeFrom(*source);
  }
}

void FieldLineSegment::MergeFrom(const FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_p1()->::ssl_protos::vision::Vector2f::MergeFrom(from.p1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_p2()->::ssl_protos::vision::Vector2f::MergeFrom(from.p2());
    }
    if (cached_has_bits & 0x00000008u) {
      thickness_ = from.thickness_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldLineSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLineSegment::CopyFrom(const FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLineSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_p1()) {
    if (!this->p1_->IsInitialized()) return false;
  }
  if (has_p2()) {
    if (!this->p2_->IsInitialized()) return false;
  }
  return true;
}

void FieldLineSegment::Swap(FieldLineSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLineSegment::InternalSwap(FieldLineSegment* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
  swap(thickness_, other->thickness_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FieldLineSegment::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldCircularArc::InitAsDefaultInstance() {
  ::ssl_protos::vision::_FieldCircularArc_default_instance_._instance.get_mutable()->center_ = const_cast< ::ssl_protos::vision::Vector2f*>(
      ::ssl_protos::vision::Vector2f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldCircularArc::kNameFieldNumber;
const int FieldCircularArc::kCenterFieldNumber;
const int FieldCircularArc::kRadiusFieldNumber;
const int FieldCircularArc::kA1FieldNumber;
const int FieldCircularArc::kA2FieldNumber;
const int FieldCircularArc::kThicknessFieldNumber;
const int FieldCircularArc::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldCircularArc::FieldCircularArc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldCircularArc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.FieldCircularArc)
}
FieldCircularArc::FieldCircularArc(const FieldCircularArc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_center()) {
    center_ = new ::ssl_protos::vision::Vector2f(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.FieldCircularArc)
}

void FieldCircularArc::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&center_)) + sizeof(type_));
}

FieldCircularArc::~FieldCircularArc() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.FieldCircularArc)
  SharedDtor();
}

void FieldCircularArc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void FieldCircularArc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FieldCircularArc::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldCircularArc& FieldCircularArc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_FieldCircularArc.base);
  return *internal_default_instance();
}


void FieldCircularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldCircularArc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.FieldCircularArc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.vision.FieldCircularArc.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ssl_protos.vision.Vector2f center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_a1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float a2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_a2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float thickness = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.FieldShapeType type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::vision::FieldShapeType_IsValid(value)) {
            set_type(static_cast< ::ssl_protos::vision::FieldShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.FieldCircularArc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.FieldCircularArc)
  return false;
#undef DO_
}

void FieldCircularArc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.FieldCircularArc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .ssl_protos.vision.Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_center(), output);
  }

  // required float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // required float a1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a1(), output);
  }

  // required float a2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->a2(), output);
  }

  // required float thickness = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thickness(), output);
  }

  // optional .ssl_protos.vision.FieldShapeType type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.FieldCircularArc)
}

::google::protobuf::uint8* FieldCircularArc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.FieldCircularArc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.vision.FieldCircularArc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .ssl_protos.vision.Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_center(), deterministic, target);
  }

  // required float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // required float a1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a1(), target);
  }

  // required float a2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->a2(), target);
  }

  // required float thickness = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thickness(), target);
  }

  // optional .ssl_protos.vision.FieldShapeType type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.FieldCircularArc)
  return target;
}

size_t FieldCircularArc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.FieldCircularArc)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_center()) {
    // required .ssl_protos.vision.Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (has_radius()) {
    // required float radius = 3;
    total_size += 1 + 4;
  }

  if (has_a1()) {
    // required float a1 = 4;
    total_size += 1 + 4;
  }

  if (has_a2()) {
    // required float a2 = 5;
    total_size += 1 + 4;
  }

  if (has_thickness()) {
    // required float thickness = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FieldCircularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.FieldCircularArc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .ssl_protos.vision.Vector2f center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);

    // required float radius = 3;
    total_size += 1 + 4;

    // required float a1 = 4;
    total_size += 1 + 4;

    // required float a2 = 5;
    total_size += 1 + 4;

    // required float thickness = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .ssl_protos.vision.FieldShapeType type = 7;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldCircularArc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.FieldCircularArc)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldCircularArc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldCircularArc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.FieldCircularArc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.FieldCircularArc)
    MergeFrom(*source);
  }
}

void FieldCircularArc::MergeFrom(const FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.FieldCircularArc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_center()->::ssl_protos::vision::Vector2f::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      a1_ = from.a1_;
    }
    if (cached_has_bits & 0x00000010u) {
      a2_ = from.a2_;
    }
    if (cached_has_bits & 0x00000020u) {
      thickness_ = from.thickness_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldCircularArc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldCircularArc::CopyFrom(const FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldCircularArc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void FieldCircularArc::Swap(FieldCircularArc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldCircularArc::InternalSwap(FieldCircularArc* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(a1_, other->a1_);
  swap(a2_, other->a2_);
  swap(thickness_, other->thickness_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FieldCircularArc::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldSize::kFieldLengthFieldNumber;
const int FieldSize::kFieldWidthFieldNumber;
const int FieldSize::kGoalWidthFieldNumber;
const int FieldSize::kGoalDepthFieldNumber;
const int FieldSize::kBoundaryWidthFieldNumber;
const int FieldSize::kFieldLinesFieldNumber;
const int FieldSize::kFieldArcsFieldNumber;
const int FieldSize::kPenaltyAreaDepthFieldNumber;
const int FieldSize::kPenaltyAreaWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldSize::FieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_FieldSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.FieldSize)
}
FieldSize::FieldSize(const FieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      field_lines_(from.field_lines_),
      field_arcs_(from.field_arcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_length_, &from.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_area_width_) -
    reinterpret_cast<char*>(&field_length_)) + sizeof(penalty_area_width_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.FieldSize)
}

void FieldSize::SharedCtor() {
  ::memset(&field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_area_width_) -
      reinterpret_cast<char*>(&field_length_)) + sizeof(penalty_area_width_));
}

FieldSize::~FieldSize() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.FieldSize)
  SharedDtor();
}

void FieldSize::SharedDtor() {
}

void FieldSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FieldSize::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldSize& FieldSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_FieldSize.base);
  return *internal_default_instance();
}


void FieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.FieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_lines_.Clear();
  field_arcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&field_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_area_width_) -
        reinterpret_cast<char*>(&field_length_)) + sizeof(penalty_area_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.FieldSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 field_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_field_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_goal_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_goal_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_boundary_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_arcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 penalty_area_depth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_penalty_area_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_area_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 penalty_area_width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_penalty_area_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_area_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.FieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.FieldSize)
  return false;
#undef DO_
}

void FieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.FieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_length(), output);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_width(), output);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_width(), output);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goal_depth(), output);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->boundary_width(), output);
  }

  // repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->field_lines(static_cast<int>(i)),
      output);
  }

  // repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_arcs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->field_arcs(static_cast<int>(i)),
      output);
  }

  // optional int32 penalty_area_depth = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->penalty_area_depth(), output);
  }

  // optional int32 penalty_area_width = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->penalty_area_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.FieldSize)
}

::google::protobuf::uint8* FieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.FieldSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_length(), target);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_width(), target);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_width(), target);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goal_depth(), target);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->boundary_width(), target);
  }

  // repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->field_lines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_arcs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->field_arcs(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 penalty_area_depth = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->penalty_area_depth(), target);
  }

  // optional int32 penalty_area_width = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->penalty_area_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.FieldSize)
  return target;
}

size_t FieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.FieldSize)
  size_t total_size = 0;

  if (has_field_length()) {
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  return total_size;
}
size_t FieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.FieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 field_length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 goal_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 boundary_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->field_lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_lines(static_cast<int>(i)));
    }
  }

  // repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->field_arcs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_arcs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional int32 penalty_area_depth = 8;
    if (has_penalty_area_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_area_depth());
    }

    // optional int32 penalty_area_width = 9;
    if (has_penalty_area_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_area_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.FieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.FieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.FieldSize)
    MergeFrom(*source);
  }
}

void FieldSize::MergeFrom(const FieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.FieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_lines_.MergeFrom(from.field_lines_);
  field_arcs_.MergeFrom(from.field_arcs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      field_length_ = from.field_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      penalty_area_depth_ = from.penalty_area_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      penalty_area_width_ = from.penalty_area_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.FieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldSize::CopyFrom(const FieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.FieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->field_arcs())) return false;
  return true;
}

void FieldSize::Swap(FieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldSize::InternalSwap(FieldSize* other) {
  using std::swap;
  CastToBase(&field_lines_)->InternalSwap(CastToBase(&other->field_lines_));
  CastToBase(&field_arcs_)->InternalSwap(CastToBase(&other->field_arcs_));
  swap(field_length_, other->field_length_);
  swap(field_width_, other->field_width_);
  swap(goal_width_, other->goal_width_);
  swap(goal_depth_, other->goal_depth_);
  swap(boundary_width_, other->boundary_width_);
  swap(penalty_area_depth_, other->penalty_area_depth_);
  swap(penalty_area_width_, other->penalty_area_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FieldSize::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraCalibration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraCalibration::kCameraIdFieldNumber;
const int CameraCalibration::kFocalLengthFieldNumber;
const int CameraCalibration::kPrincipalPointXFieldNumber;
const int CameraCalibration::kPrincipalPointYFieldNumber;
const int CameraCalibration::kDistortionFieldNumber;
const int CameraCalibration::kQ0FieldNumber;
const int CameraCalibration::kQ1FieldNumber;
const int CameraCalibration::kQ2FieldNumber;
const int CameraCalibration::kQ3FieldNumber;
const int CameraCalibration::kTxFieldNumber;
const int CameraCalibration::kTyFieldNumber;
const int CameraCalibration::kTzFieldNumber;
const int CameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int CameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int CameraCalibration::kDerivedCameraWorldTzFieldNumber;
const int CameraCalibration::kPixelImageWidthFieldNumber;
const int CameraCalibration::kPixelImageHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalibration::CameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_CameraCalibration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.CameraCalibration)
}
CameraCalibration::CameraCalibration(const CameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_image_height_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(pixel_image_height_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.CameraCalibration)
}

void CameraCalibration::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_image_height_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(pixel_image_height_));
}

CameraCalibration::~CameraCalibration() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.CameraCalibration)
  SharedDtor();
}

void CameraCalibration::SharedDtor() {
}

void CameraCalibration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraCalibration::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraCalibration& CameraCalibration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_CameraCalibration.base);
  return *internal_default_instance();
}


void CameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&camera_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&q2_) -
        reinterpret_cast<char*>(&camera_id_)) + sizeof(q2_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&q3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_image_width_) -
        reinterpret_cast<char*>(&q3_)) + sizeof(pixel_image_width_));
  }
  pixel_image_height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.CameraCalibration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float focal_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_focal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_principal_point_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_principal_point_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distortion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_distortion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_q0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_q1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_q2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_q3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tz = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tx = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_derived_camera_world_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_ty = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_derived_camera_world_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tz = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_derived_camera_world_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pixel_image_width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_pixel_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pixel_image_height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_pixel_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.CameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.CameraCalibration)
  return false;
#undef DO_
}

void CameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // required float focal_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }

  // required float principal_point_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }

  // required float principal_point_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }

  // required float distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }

  // required float q0 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }

  // required float q1 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }

  // required float q2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }

  // required float q3 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }

  // required float tx = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }

  // required float ty = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }

  // required float tz = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }

  // optional float derived_camera_world_tx = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }

  // optional float derived_camera_world_ty = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }

  // optional float derived_camera_world_tz = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }

  // optional uint32 pixel_image_width = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pixel_image_width(), output);
  }

  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pixel_image_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.CameraCalibration)
}

::google::protobuf::uint8* CameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // required float focal_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }

  // required float principal_point_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }

  // required float principal_point_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }

  // required float distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }

  // required float q0 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }

  // required float q1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }

  // required float q2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }

  // required float q3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }

  // required float tx = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }

  // required float ty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }

  // required float tz = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }

  // optional uint32 pixel_image_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pixel_image_width(), target);
  }

  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pixel_image_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.CameraCalibration)
  return target;
}

size_t CameraCalibration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.CameraCalibration)
  size_t total_size = 0;

  if (has_camera_id()) {
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  if (has_focal_length()) {
    // required float focal_length = 2;
    total_size += 1 + 4;
  }

  if (has_principal_point_x()) {
    // required float principal_point_x = 3;
    total_size += 1 + 4;
  }

  if (has_principal_point_y()) {
    // required float principal_point_y = 4;
    total_size += 1 + 4;
  }

  if (has_distortion()) {
    // required float distortion = 5;
    total_size += 1 + 4;
  }

  if (has_q0()) {
    // required float q0 = 6;
    total_size += 1 + 4;
  }

  if (has_q1()) {
    // required float q1 = 7;
    total_size += 1 + 4;
  }

  if (has_q2()) {
    // required float q2 = 8;
    total_size += 1 + 4;
  }

  if (has_q3()) {
    // required float q3 = 9;
    total_size += 1 + 4;
  }

  if (has_tx()) {
    // required float tx = 10;
    total_size += 1 + 4;
  }

  if (has_ty()) {
    // required float ty = 11;
    total_size += 1 + 4;
  }

  if (has_tz()) {
    // required float tz = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.CameraCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

    // required float focal_length = 2;
    total_size += 1 + 4;

    // required float principal_point_x = 3;
    total_size += 1 + 4;

    // required float principal_point_y = 4;
    total_size += 1 + 4;

    // required float distortion = 5;
    total_size += 1 + 4;

    // required float q0 = 6;
    total_size += 1 + 4;

    // required float q1 = 7;
    total_size += 1 + 4;

    // required float q2 = 8;
    total_size += 1 + 4;

    // required float q3 = 9;
    total_size += 1 + 4;

    // required float tx = 10;
    total_size += 1 + 4;

    // required float ty = 11;
    total_size += 1 + 4;

    // required float tz = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 61440u) {
    // optional float derived_camera_world_tx = 13;
    if (has_derived_camera_world_tx()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (has_derived_camera_world_ty()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (has_derived_camera_world_tz()) {
      total_size += 1 + 4;
    }

    // optional uint32 pixel_image_width = 16;
    if (has_pixel_image_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixel_image_width());
    }

  }
  // optional uint32 pixel_image_height = 17;
  if (has_pixel_image_height()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pixel_image_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.CameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.CameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.CameraCalibration)
    MergeFrom(*source);
  }
}

void CameraCalibration::MergeFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.CameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      focal_length_ = from.focal_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      principal_point_x_ = from.principal_point_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      principal_point_y_ = from.principal_point_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      distortion_ = from.distortion_;
    }
    if (cached_has_bits & 0x00000020u) {
      q0_ = from.q0_;
    }
    if (cached_has_bits & 0x00000040u) {
      q1_ = from.q1_;
    }
    if (cached_has_bits & 0x00000080u) {
      q2_ = from.q2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      q3_ = from.q3_;
    }
    if (cached_has_bits & 0x00000200u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000400u) {
      ty_ = from.ty_;
    }
    if (cached_has_bits & 0x00000800u) {
      tz_ = from.tz_;
    }
    if (cached_has_bits & 0x00001000u) {
      derived_camera_world_tx_ = from.derived_camera_world_tx_;
    }
    if (cached_has_bits & 0x00002000u) {
      derived_camera_world_ty_ = from.derived_camera_world_ty_;
    }
    if (cached_has_bits & 0x00004000u) {
      derived_camera_world_tz_ = from.derived_camera_world_tz_;
    }
    if (cached_has_bits & 0x00008000u) {
      pixel_image_width_ = from.pixel_image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_pixel_image_height(from.pixel_image_height());
  }
}

void CameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void CameraCalibration::Swap(CameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalibration::InternalSwap(CameraCalibration* other) {
  using std::swap;
  swap(camera_id_, other->camera_id_);
  swap(focal_length_, other->focal_length_);
  swap(principal_point_x_, other->principal_point_x_);
  swap(principal_point_y_, other->principal_point_y_);
  swap(distortion_, other->distortion_);
  swap(q0_, other->q0_);
  swap(q1_, other->q1_);
  swap(q2_, other->q2_);
  swap(q3_, other->q3_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(tz_, other->tz_);
  swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
  swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
  swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
  swap(pixel_image_width_, other->pixel_image_width_);
  swap(pixel_image_height_, other->pixel_image_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BallModelStraightTwoPhase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallModelStraightTwoPhase::kAccSlideFieldNumber;
const int BallModelStraightTwoPhase::kAccRollFieldNumber;
const int BallModelStraightTwoPhase::kKSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallModelStraightTwoPhase::BallModelStraightTwoPhase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_BallModelStraightTwoPhase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.BallModelStraightTwoPhase)
}
BallModelStraightTwoPhase::BallModelStraightTwoPhase(const BallModelStraightTwoPhase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_slide_, &from.acc_slide_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_switch_) -
    reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.BallModelStraightTwoPhase)
}

void BallModelStraightTwoPhase::SharedCtor() {
  ::memset(&acc_slide_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_switch_) -
      reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
}

BallModelStraightTwoPhase::~BallModelStraightTwoPhase() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.BallModelStraightTwoPhase)
  SharedDtor();
}

void BallModelStraightTwoPhase::SharedDtor() {
}

void BallModelStraightTwoPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BallModelStraightTwoPhase::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallModelStraightTwoPhase& BallModelStraightTwoPhase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_BallModelStraightTwoPhase.base);
  return *internal_default_instance();
}


void BallModelStraightTwoPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&acc_slide_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&k_switch_) -
        reinterpret_cast<char*>(&acc_slide_)) + sizeof(k_switch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallModelStraightTwoPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.BallModelStraightTwoPhase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double acc_slide = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_acc_slide();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_slide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double acc_roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_acc_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double k_switch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_k_switch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.BallModelStraightTwoPhase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.BallModelStraightTwoPhase)
  return false;
#undef DO_
}

void BallModelStraightTwoPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_slide = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_slide(), output);
  }

  // required double acc_roll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_roll(), output);
  }

  // required double k_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k_switch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.BallModelStraightTwoPhase)
}

::google::protobuf::uint8* BallModelStraightTwoPhase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.BallModelStraightTwoPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_slide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_slide(), target);
  }

  // required double acc_roll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_roll(), target);
  }

  // required double k_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k_switch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.BallModelStraightTwoPhase)
  return target;
}

size_t BallModelStraightTwoPhase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (has_acc_slide()) {
    // required double acc_slide = 1;
    total_size += 1 + 8;
  }

  if (has_acc_roll()) {
    // required double acc_roll = 2;
    total_size += 1 + 8;
  }

  if (has_k_switch()) {
    // required double k_switch = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BallModelStraightTwoPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double acc_slide = 1;
    total_size += 1 + 8;

    // required double acc_roll = 2;
    total_size += 1 + 8;

    // required double k_switch = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallModelStraightTwoPhase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.BallModelStraightTwoPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const BallModelStraightTwoPhase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallModelStraightTwoPhase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.BallModelStraightTwoPhase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.BallModelStraightTwoPhase)
    MergeFrom(*source);
  }
}

void BallModelStraightTwoPhase::MergeFrom(const BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.BallModelStraightTwoPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      acc_slide_ = from.acc_slide_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_roll_ = from.acc_roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      k_switch_ = from.k_switch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallModelStraightTwoPhase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallModelStraightTwoPhase::CopyFrom(const BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallModelStraightTwoPhase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void BallModelStraightTwoPhase::Swap(BallModelStraightTwoPhase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallModelStraightTwoPhase::InternalSwap(BallModelStraightTwoPhase* other) {
  using std::swap;
  swap(acc_slide_, other->acc_slide_);
  swap(acc_roll_, other->acc_roll_);
  swap(k_switch_, other->k_switch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BallModelStraightTwoPhase::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BallModelChipFixedLoss::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallModelChipFixedLoss::kDampingXyFirstHopFieldNumber;
const int BallModelChipFixedLoss::kDampingXyOtherHopsFieldNumber;
const int BallModelChipFixedLoss::kDampingZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallModelChipFixedLoss::BallModelChipFixedLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_BallModelChipFixedLoss.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.BallModelChipFixedLoss)
}
BallModelChipFixedLoss::BallModelChipFixedLoss(const BallModelChipFixedLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&damping_xy_first_hop_, &from.damping_xy_first_hop_,
    static_cast<size_t>(reinterpret_cast<char*>(&damping_z_) -
    reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.BallModelChipFixedLoss)
}

void BallModelChipFixedLoss::SharedCtor() {
  ::memset(&damping_xy_first_hop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damping_z_) -
      reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
}

BallModelChipFixedLoss::~BallModelChipFixedLoss() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.BallModelChipFixedLoss)
  SharedDtor();
}

void BallModelChipFixedLoss::SharedDtor() {
}

void BallModelChipFixedLoss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BallModelChipFixedLoss::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BallModelChipFixedLoss& BallModelChipFixedLoss::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_BallModelChipFixedLoss.base);
  return *internal_default_instance();
}


void BallModelChipFixedLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&damping_xy_first_hop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damping_z_) -
        reinterpret_cast<char*>(&damping_xy_first_hop_)) + sizeof(damping_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BallModelChipFixedLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.BallModelChipFixedLoss)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double damping_xy_first_hop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_damping_xy_first_hop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_xy_first_hop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double damping_xy_other_hops = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_damping_xy_other_hops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_xy_other_hops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double damping_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_damping_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.BallModelChipFixedLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.BallModelChipFixedLoss)
  return false;
#undef DO_
}

void BallModelChipFixedLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double damping_xy_first_hop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->damping_xy_first_hop(), output);
  }

  // required double damping_xy_other_hops = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->damping_xy_other_hops(), output);
  }

  // required double damping_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->damping_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.BallModelChipFixedLoss)
}

::google::protobuf::uint8* BallModelChipFixedLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.BallModelChipFixedLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double damping_xy_first_hop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->damping_xy_first_hop(), target);
  }

  // required double damping_xy_other_hops = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->damping_xy_other_hops(), target);
  }

  // required double damping_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->damping_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.BallModelChipFixedLoss)
  return target;
}

size_t BallModelChipFixedLoss::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ssl_protos.vision.BallModelChipFixedLoss)
  size_t total_size = 0;

  if (has_damping_xy_first_hop()) {
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;
  }

  if (has_damping_xy_other_hops()) {
    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;
  }

  if (has_damping_z()) {
    // required double damping_z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BallModelChipFixedLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.BallModelChipFixedLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;

    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;

    // required double damping_z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallModelChipFixedLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.BallModelChipFixedLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const BallModelChipFixedLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallModelChipFixedLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.BallModelChipFixedLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.BallModelChipFixedLoss)
    MergeFrom(*source);
  }
}

void BallModelChipFixedLoss::MergeFrom(const BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.BallModelChipFixedLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      damping_xy_first_hop_ = from.damping_xy_first_hop_;
    }
    if (cached_has_bits & 0x00000002u) {
      damping_xy_other_hops_ = from.damping_xy_other_hops_;
    }
    if (cached_has_bits & 0x00000004u) {
      damping_z_ = from.damping_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BallModelChipFixedLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallModelChipFixedLoss::CopyFrom(const BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallModelChipFixedLoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void BallModelChipFixedLoss::Swap(BallModelChipFixedLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallModelChipFixedLoss::InternalSwap(BallModelChipFixedLoss* other) {
  using std::swap;
  swap(damping_xy_first_hop_, other->damping_xy_first_hop_);
  swap(damping_xy_other_hops_, other->damping_xy_other_hops_);
  swap(damping_z_, other->damping_z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BallModelChipFixedLoss::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeometryModels::InitAsDefaultInstance() {
  ::ssl_protos::vision::_GeometryModels_default_instance_._instance.get_mutable()->straight_two_phase_ = const_cast< ::ssl_protos::vision::BallModelStraightTwoPhase*>(
      ::ssl_protos::vision::BallModelStraightTwoPhase::internal_default_instance());
  ::ssl_protos::vision::_GeometryModels_default_instance_._instance.get_mutable()->chip_fixed_loss_ = const_cast< ::ssl_protos::vision::BallModelChipFixedLoss*>(
      ::ssl_protos::vision::BallModelChipFixedLoss::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeometryModels::kStraightTwoPhaseFieldNumber;
const int GeometryModels::kChipFixedLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeometryModels::GeometryModels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_GeometryModels.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.GeometryModels)
}
GeometryModels::GeometryModels(const GeometryModels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_straight_two_phase()) {
    straight_two_phase_ = new ::ssl_protos::vision::BallModelStraightTwoPhase(*from.straight_two_phase_);
  } else {
    straight_two_phase_ = NULL;
  }
  if (from.has_chip_fixed_loss()) {
    chip_fixed_loss_ = new ::ssl_protos::vision::BallModelChipFixedLoss(*from.chip_fixed_loss_);
  } else {
    chip_fixed_loss_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.GeometryModels)
}

void GeometryModels::SharedCtor() {
  ::memset(&straight_two_phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_fixed_loss_) -
      reinterpret_cast<char*>(&straight_two_phase_)) + sizeof(chip_fixed_loss_));
}

GeometryModels::~GeometryModels() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.GeometryModels)
  SharedDtor();
}

void GeometryModels::SharedDtor() {
  if (this != internal_default_instance()) delete straight_two_phase_;
  if (this != internal_default_instance()) delete chip_fixed_loss_;
}

void GeometryModels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeometryModels::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeometryModels& GeometryModels::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_GeometryModels.base);
  return *internal_default_instance();
}


void GeometryModels::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(straight_two_phase_ != NULL);
      straight_two_phase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chip_fixed_loss_ != NULL);
      chip_fixed_loss_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeometryModels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.GeometryModels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_straight_two_phase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chip_fixed_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.GeometryModels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.GeometryModels)
  return false;
#undef DO_
}

void GeometryModels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_straight_two_phase(), output);
  }

  // optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_chip_fixed_loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.GeometryModels)
}

::google::protobuf::uint8* GeometryModels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.GeometryModels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_straight_two_phase(), deterministic, target);
  }

  // optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_chip_fixed_loss(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.GeometryModels)
  return target;
}

size_t GeometryModels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.GeometryModels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
    if (has_straight_two_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *straight_two_phase_);
    }

    // optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
    if (has_chip_fixed_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chip_fixed_loss_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryModels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.GeometryModels)
  GOOGLE_DCHECK_NE(&from, this);
  const GeometryModels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeometryModels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.GeometryModels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.GeometryModels)
    MergeFrom(*source);
  }
}

void GeometryModels::MergeFrom(const GeometryModels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.GeometryModels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_straight_two_phase()->::ssl_protos::vision::BallModelStraightTwoPhase::MergeFrom(from.straight_two_phase());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chip_fixed_loss()->::ssl_protos::vision::BallModelChipFixedLoss::MergeFrom(from.chip_fixed_loss());
    }
  }
}

void GeometryModels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryModels::CopyFrom(const GeometryModels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryModels::IsInitialized() const {
  if (has_straight_two_phase()) {
    if (!this->straight_two_phase_->IsInitialized()) return false;
  }
  if (has_chip_fixed_loss()) {
    if (!this->chip_fixed_loss_->IsInitialized()) return false;
  }
  return true;
}

void GeometryModels::Swap(GeometryModels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeometryModels::InternalSwap(GeometryModels* other) {
  using std::swap;
  swap(straight_two_phase_, other->straight_two_phase_);
  swap(chip_fixed_loss_, other->chip_fixed_loss_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeometryModels::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::ssl_protos::vision::_Geometry_default_instance_._instance.get_mutable()->field_ = const_cast< ::ssl_protos::vision::FieldSize*>(
      ::ssl_protos::vision::FieldSize::internal_default_instance());
  ::ssl_protos::vision::_Geometry_default_instance_._instance.get_mutable()->models_ = const_cast< ::ssl_protos::vision::GeometryModels*>(
      ::ssl_protos::vision::GeometryModels::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry::kFieldFieldNumber;
const int Geometry::kCalibFieldNumber;
const int Geometry::kModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry::Geometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vision_5fgeometry_2eproto::scc_info_Geometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.vision.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::ssl_protos::vision::FieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  if (from.has_models()) {
    models_ = new ::ssl_protos::vision::GeometryModels(*from.models_);
  } else {
    models_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.vision.Geometry)
}

void Geometry::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&models_) -
      reinterpret_cast<char*>(&field_)) + sizeof(models_));
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:ssl_protos.vision.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete models_;
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  ::protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry& Geometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vision_5fgeometry_2eproto::scc_info_Geometry.base);
  return *internal_default_instance();
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.vision.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calib_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(field_ != NULL);
      field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(models_ != NULL);
      models_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.vision.Geometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ssl_protos.vision.FieldSize field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssl_protos.vision.CameraCalibration calib = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.GeometryModels models = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_models()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.vision.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.vision.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.vision.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ssl_protos.vision.FieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_field(), output);
  }

  // repeated .ssl_protos.vision.CameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->calib(static_cast<int>(i)),
      output);
  }

  // optional .ssl_protos.vision.GeometryModels models = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_models(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.vision.Geometry)
}

::google::protobuf::uint8* Geometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.vision.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ssl_protos.vision.FieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_field(), deterministic, target);
  }

  // repeated .ssl_protos.vision.CameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calib_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->calib(static_cast<int>(i)), deterministic, target);
  }

  // optional .ssl_protos.vision.GeometryModels models = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_models(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.vision.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.vision.Geometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ssl_protos.vision.FieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }
  // repeated .ssl_protos.vision.CameraCalibration calib = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->calib_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calib(static_cast<int>(i)));
    }
  }

  // optional .ssl_protos.vision.GeometryModels models = 3;
  if (has_models()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *models_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.vision.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.vision.Geometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.vision.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.vision.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_field()->::ssl_protos::vision::FieldSize::MergeFrom(from.field());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_models()->::ssl_protos::vision::GeometryModels::MergeFrom(from.models());
    }
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.vision.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.vision.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  if (has_models()) {
    if (!this->models_->IsInitialized()) return false;
  }
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  CastToBase(&calib_)->InternalSwap(CastToBase(&other->calib_));
  swap(field_, other->field_);
  swap(models_, other->models_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_vision_5fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::Vector2f* Arena::CreateMaybeMessage< ::ssl_protos::vision::Vector2f >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::Vector2f >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::FieldLineSegment* Arena::CreateMaybeMessage< ::ssl_protos::vision::FieldLineSegment >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::FieldLineSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::FieldCircularArc* Arena::CreateMaybeMessage< ::ssl_protos::vision::FieldCircularArc >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::FieldCircularArc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::FieldSize* Arena::CreateMaybeMessage< ::ssl_protos::vision::FieldSize >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::FieldSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::CameraCalibration* Arena::CreateMaybeMessage< ::ssl_protos::vision::CameraCalibration >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::CameraCalibration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::BallModelStraightTwoPhase* Arena::CreateMaybeMessage< ::ssl_protos::vision::BallModelStraightTwoPhase >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::BallModelStraightTwoPhase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::BallModelChipFixedLoss* Arena::CreateMaybeMessage< ::ssl_protos::vision::BallModelChipFixedLoss >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::BallModelChipFixedLoss >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::GeometryModels* Arena::CreateMaybeMessage< ::ssl_protos::vision::GeometryModels >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::GeometryModels >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::vision::Geometry* Arena::CreateMaybeMessage< ::ssl_protos::vision::Geometry >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::vision::Geometry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
