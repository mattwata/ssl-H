// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_game_event.proto

#ifndef PROTOBUF_INCLUDED_gc_5fgame_5fevent_2eproto
#define PROTOBUF_INCLUDED_gc_5fgame_5fevent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gc_common.pb.h"
#include "gc_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgame_5fevent_2eproto 

namespace protobuf_gc_5fgame_5fevent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[39];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gc_5fgame_5fevent_2eproto
namespace ssl_protos {
namespace gc {
class GameEvent;
class GameEventDefaultTypeInternal;
extern GameEventDefaultTypeInternal _GameEvent_default_instance_;
class GameEvent_AimlessKick;
class GameEvent_AimlessKickDefaultTypeInternal;
extern GameEvent_AimlessKickDefaultTypeInternal _GameEvent_AimlessKick_default_instance_;
class GameEvent_AttackerDoubleTouchedBall;
class GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal;
extern GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal _GameEvent_AttackerDoubleTouchedBall_default_instance_;
class GameEvent_AttackerTooCloseToDefenseArea;
class GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
class GameEvent_AttackerTouchedBallInDefenseArea;
class GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
class GameEvent_AttackerTouchedOpponentInDefenseArea;
class GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
class GameEvent_BallLeftField;
class GameEvent_BallLeftFieldDefaultTypeInternal;
extern GameEvent_BallLeftFieldDefaultTypeInternal _GameEvent_BallLeftField_default_instance_;
class GameEvent_BotCrashDrawn;
class GameEvent_BotCrashDrawnDefaultTypeInternal;
extern GameEvent_BotCrashDrawnDefaultTypeInternal _GameEvent_BotCrashDrawn_default_instance_;
class GameEvent_BotCrashUnique;
class GameEvent_BotCrashUniqueDefaultTypeInternal;
extern GameEvent_BotCrashUniqueDefaultTypeInternal _GameEvent_BotCrashUnique_default_instance_;
class GameEvent_BotDribbledBallTooFar;
class GameEvent_BotDribbledBallTooFarDefaultTypeInternal;
extern GameEvent_BotDribbledBallTooFarDefaultTypeInternal _GameEvent_BotDribbledBallTooFar_default_instance_;
class GameEvent_BotHeldBallDeliberately;
class GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal;
extern GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal _GameEvent_BotHeldBallDeliberately_default_instance_;
class GameEvent_BotInterferedPlacement;
class GameEvent_BotInterferedPlacementDefaultTypeInternal;
extern GameEvent_BotInterferedPlacementDefaultTypeInternal _GameEvent_BotInterferedPlacement_default_instance_;
class GameEvent_BotKickedBallTooFast;
class GameEvent_BotKickedBallTooFastDefaultTypeInternal;
extern GameEvent_BotKickedBallTooFastDefaultTypeInternal _GameEvent_BotKickedBallTooFast_default_instance_;
class GameEvent_BotPushedBot;
class GameEvent_BotPushedBotDefaultTypeInternal;
extern GameEvent_BotPushedBotDefaultTypeInternal _GameEvent_BotPushedBot_default_instance_;
class GameEvent_BotSubstitution;
class GameEvent_BotSubstitutionDefaultTypeInternal;
extern GameEvent_BotSubstitutionDefaultTypeInternal _GameEvent_BotSubstitution_default_instance_;
class GameEvent_BotTippedOver;
class GameEvent_BotTippedOverDefaultTypeInternal;
extern GameEvent_BotTippedOverDefaultTypeInternal _GameEvent_BotTippedOver_default_instance_;
class GameEvent_BotTooFastInStop;
class GameEvent_BotTooFastInStopDefaultTypeInternal;
extern GameEvent_BotTooFastInStopDefaultTypeInternal _GameEvent_BotTooFastInStop_default_instance_;
class GameEvent_BoundaryCrossing;
class GameEvent_BoundaryCrossingDefaultTypeInternal;
extern GameEvent_BoundaryCrossingDefaultTypeInternal _GameEvent_BoundaryCrossing_default_instance_;
class GameEvent_ChallengeFlag;
class GameEvent_ChallengeFlagDefaultTypeInternal;
extern GameEvent_ChallengeFlagDefaultTypeInternal _GameEvent_ChallengeFlag_default_instance_;
class GameEvent_ChippedGoal;
class GameEvent_ChippedGoalDefaultTypeInternal;
extern GameEvent_ChippedGoalDefaultTypeInternal _GameEvent_ChippedGoal_default_instance_;
class GameEvent_DefenderInDefenseArea;
class GameEvent_DefenderInDefenseAreaDefaultTypeInternal;
extern GameEvent_DefenderInDefenseAreaDefaultTypeInternal _GameEvent_DefenderInDefenseArea_default_instance_;
class GameEvent_DefenderInDefenseAreaPartially;
class GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal;
extern GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
class GameEvent_DefenderTooCloseToKickPoint;
class GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal;
extern GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
class GameEvent_EmergencyStop;
class GameEvent_EmergencyStopDefaultTypeInternal;
extern GameEvent_EmergencyStopDefaultTypeInternal _GameEvent_EmergencyStop_default_instance_;
class GameEvent_Goal;
class GameEvent_GoalDefaultTypeInternal;
extern GameEvent_GoalDefaultTypeInternal _GameEvent_Goal_default_instance_;
class GameEvent_IndirectGoal;
class GameEvent_IndirectGoalDefaultTypeInternal;
extern GameEvent_IndirectGoalDefaultTypeInternal _GameEvent_IndirectGoal_default_instance_;
class GameEvent_KeeperHeldBall;
class GameEvent_KeeperHeldBallDefaultTypeInternal;
extern GameEvent_KeeperHeldBallDefaultTypeInternal _GameEvent_KeeperHeldBall_default_instance_;
class GameEvent_KickTimeout;
class GameEvent_KickTimeoutDefaultTypeInternal;
extern GameEvent_KickTimeoutDefaultTypeInternal _GameEvent_KickTimeout_default_instance_;
class GameEvent_MultipleCards;
class GameEvent_MultipleCardsDefaultTypeInternal;
extern GameEvent_MultipleCardsDefaultTypeInternal _GameEvent_MultipleCards_default_instance_;
class GameEvent_MultipleFouls;
class GameEvent_MultipleFoulsDefaultTypeInternal;
extern GameEvent_MultipleFoulsDefaultTypeInternal _GameEvent_MultipleFouls_default_instance_;
class GameEvent_MultiplePlacementFailures;
class GameEvent_MultiplePlacementFailuresDefaultTypeInternal;
extern GameEvent_MultiplePlacementFailuresDefaultTypeInternal _GameEvent_MultiplePlacementFailures_default_instance_;
class GameEvent_NoProgressInGame;
class GameEvent_NoProgressInGameDefaultTypeInternal;
extern GameEvent_NoProgressInGameDefaultTypeInternal _GameEvent_NoProgressInGame_default_instance_;
class GameEvent_PenaltyKickFailed;
class GameEvent_PenaltyKickFailedDefaultTypeInternal;
extern GameEvent_PenaltyKickFailedDefaultTypeInternal _GameEvent_PenaltyKickFailed_default_instance_;
class GameEvent_PlacementFailed;
class GameEvent_PlacementFailedDefaultTypeInternal;
extern GameEvent_PlacementFailedDefaultTypeInternal _GameEvent_PlacementFailed_default_instance_;
class GameEvent_PlacementSucceeded;
class GameEvent_PlacementSucceededDefaultTypeInternal;
extern GameEvent_PlacementSucceededDefaultTypeInternal _GameEvent_PlacementSucceeded_default_instance_;
class GameEvent_Prepared;
class GameEvent_PreparedDefaultTypeInternal;
extern GameEvent_PreparedDefaultTypeInternal _GameEvent_Prepared_default_instance_;
class GameEvent_TooManyRobots;
class GameEvent_TooManyRobotsDefaultTypeInternal;
extern GameEvent_TooManyRobotsDefaultTypeInternal _GameEvent_TooManyRobots_default_instance_;
class GameEvent_UnsportingBehaviorMajor;
class GameEvent_UnsportingBehaviorMajorDefaultTypeInternal;
extern GameEvent_UnsportingBehaviorMajorDefaultTypeInternal _GameEvent_UnsportingBehaviorMajor_default_instance_;
class GameEvent_UnsportingBehaviorMinor;
class GameEvent_UnsportingBehaviorMinorDefaultTypeInternal;
extern GameEvent_UnsportingBehaviorMinorDefaultTypeInternal _GameEvent_UnsportingBehaviorMinor_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::gc::GameEvent* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent>(Arena*);
template<> ::ssl_protos::gc::GameEvent_AimlessKick* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_AimlessKick>(Arena*);
template<> ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall>(Arena*);
template<> ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea>(Arena*);
template<> ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea>(Arena*);
template<> ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BallLeftField* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BallLeftField>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotCrashDrawn* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotCrashDrawn>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotCrashUnique* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotCrashUnique>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotDribbledBallTooFar>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotHeldBallDeliberately>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotInterferedPlacement* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotInterferedPlacement>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotKickedBallTooFast>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotPushedBot* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotPushedBot>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotSubstitution* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotSubstitution>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotTippedOver* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotTippedOver>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BotTooFastInStop* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BotTooFastInStop>(Arena*);
template<> ::ssl_protos::gc::GameEvent_BoundaryCrossing* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_BoundaryCrossing>(Arena*);
template<> ::ssl_protos::gc::GameEvent_ChallengeFlag* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_ChallengeFlag>(Arena*);
template<> ::ssl_protos::gc::GameEvent_ChippedGoal* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_ChippedGoal>(Arena*);
template<> ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_DefenderInDefenseArea>(Arena*);
template<> ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially>(Arena*);
template<> ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint>(Arena*);
template<> ::ssl_protos::gc::GameEvent_EmergencyStop* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_EmergencyStop>(Arena*);
template<> ::ssl_protos::gc::GameEvent_Goal* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_Goal>(Arena*);
template<> ::ssl_protos::gc::GameEvent_IndirectGoal* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_IndirectGoal>(Arena*);
template<> ::ssl_protos::gc::GameEvent_KeeperHeldBall* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_KeeperHeldBall>(Arena*);
template<> ::ssl_protos::gc::GameEvent_KickTimeout* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_KickTimeout>(Arena*);
template<> ::ssl_protos::gc::GameEvent_MultipleCards* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_MultipleCards>(Arena*);
template<> ::ssl_protos::gc::GameEvent_MultipleFouls* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_MultipleFouls>(Arena*);
template<> ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_MultiplePlacementFailures>(Arena*);
template<> ::ssl_protos::gc::GameEvent_NoProgressInGame* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_NoProgressInGame>(Arena*);
template<> ::ssl_protos::gc::GameEvent_PenaltyKickFailed* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_PenaltyKickFailed>(Arena*);
template<> ::ssl_protos::gc::GameEvent_PlacementFailed* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_PlacementFailed>(Arena*);
template<> ::ssl_protos::gc::GameEvent_PlacementSucceeded* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_PlacementSucceeded>(Arena*);
template<> ::ssl_protos::gc::GameEvent_Prepared* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_Prepared>(Arena*);
template<> ::ssl_protos::gc::GameEvent_TooManyRobots* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_TooManyRobots>(Arena*);
template<> ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor>(Arena*);
template<> ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* Arena::CreateMaybeMessage<::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace gc {

enum GameEvent_Type {
  GameEvent_Type_UNKNOWN_GAME_EVENT_TYPE = 0,
  GameEvent_Type_BALL_LEFT_FIELD_TOUCH_LINE = 6,
  GameEvent_Type_BALL_LEFT_FIELD_GOAL_LINE = 7,
  GameEvent_Type_AIMLESS_KICK = 11,
  GameEvent_Type_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19,
  GameEvent_Type_DEFENDER_IN_DEFENSE_AREA = 31,
  GameEvent_Type_BOUNDARY_CROSSING = 41,
  GameEvent_Type_KEEPER_HELD_BALL = 13,
  GameEvent_Type_BOT_DRIBBLED_BALL_TOO_FAR = 17,
  GameEvent_Type_BOT_PUSHED_BOT = 24,
  GameEvent_Type_BOT_HELD_BALL_DELIBERATELY = 26,
  GameEvent_Type_BOT_TIPPED_OVER = 27,
  GameEvent_Type_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15,
  GameEvent_Type_BOT_KICKED_BALL_TOO_FAST = 18,
  GameEvent_Type_BOT_CRASH_UNIQUE = 22,
  GameEvent_Type_BOT_CRASH_DRAWN = 21,
  GameEvent_Type_DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29,
  GameEvent_Type_BOT_TOO_FAST_IN_STOP = 28,
  GameEvent_Type_BOT_INTERFERED_PLACEMENT = 20,
  GameEvent_Type_POSSIBLE_GOAL = 39,
  GameEvent_Type_GOAL = 8,
  GameEvent_Type_INVALID_GOAL = 42,
  GameEvent_Type_ATTACKER_DOUBLE_TOUCHED_BALL = 14,
  GameEvent_Type_PLACEMENT_SUCCEEDED = 5,
  GameEvent_Type_PENALTY_KICK_FAILED = 43,
  GameEvent_Type_NO_PROGRESS_IN_GAME = 2,
  GameEvent_Type_PLACEMENT_FAILED = 3,
  GameEvent_Type_MULTIPLE_CARDS = 32,
  GameEvent_Type_MULTIPLE_FOULS = 34,
  GameEvent_Type_BOT_SUBSTITUTION = 37,
  GameEvent_Type_TOO_MANY_ROBOTS = 38,
  GameEvent_Type_CHALLENGE_FLAG = 44,
  GameEvent_Type_EMERGENCY_STOP = 45,
  GameEvent_Type_UNSPORTING_BEHAVIOR_MINOR = 35,
  GameEvent_Type_UNSPORTING_BEHAVIOR_MAJOR = 36,
  GameEvent_Type_PREPARED PROTOBUF_DEPRECATED = 1,
  GameEvent_Type_INDIRECT_GOAL PROTOBUF_DEPRECATED = 9,
  GameEvent_Type_CHIPPED_GOAL PROTOBUF_DEPRECATED = 10,
  GameEvent_Type_KICK_TIMEOUT PROTOBUF_DEPRECATED = 12,
  GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA PROTOBUF_DEPRECATED = 16,
  GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED PROTOBUF_DEPRECATED = 40,
  GameEvent_Type_BOT_CRASH_UNIQUE_SKIPPED PROTOBUF_DEPRECATED = 23,
  GameEvent_Type_BOT_PUSHED_BOT_SKIPPED PROTOBUF_DEPRECATED = 25,
  GameEvent_Type_DEFENDER_IN_DEFENSE_AREA_PARTIALLY PROTOBUF_DEPRECATED = 30,
  GameEvent_Type_MULTIPLE_PLACEMENT_FAILURES PROTOBUF_DEPRECATED = 33
};
bool GameEvent_Type_IsValid(int value);
const GameEvent_Type GameEvent_Type_Type_MIN = GameEvent_Type_UNKNOWN_GAME_EVENT_TYPE;
const GameEvent_Type GameEvent_Type_Type_MAX = GameEvent_Type_EMERGENCY_STOP;
const int GameEvent_Type_Type_ARRAYSIZE = GameEvent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameEvent_Type_descriptor();
inline const ::std::string& GameEvent_Type_Name(GameEvent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameEvent_Type_descriptor(), value);
}
inline bool GameEvent_Type_Parse(
    const ::std::string& name, GameEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEvent_Type>(
    GameEvent_Type_descriptor(), name, value);
}
// ===================================================================

class GameEvent_BallLeftField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BallLeftField) */ {
 public:
  GameEvent_BallLeftField();
  virtual ~GameEvent_BallLeftField();

  GameEvent_BallLeftField(const GameEvent_BallLeftField& from);

  inline GameEvent_BallLeftField& operator=(const GameEvent_BallLeftField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BallLeftField(GameEvent_BallLeftField&& from) noexcept
    : GameEvent_BallLeftField() {
    *this = ::std::move(from);
  }

  inline GameEvent_BallLeftField& operator=(GameEvent_BallLeftField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BallLeftField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BallLeftField* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BallLeftField*>(
               &_GameEvent_BallLeftField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameEvent_BallLeftField* other);
  friend void swap(GameEvent_BallLeftField& a, GameEvent_BallLeftField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BallLeftField* New() const final {
    return CreateMaybeMessage<GameEvent_BallLeftField>(NULL);
  }

  GameEvent_BallLeftField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BallLeftField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BallLeftField& from);
  void MergeFrom(const GameEvent_BallLeftField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BallLeftField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BallLeftField)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_AimlessKick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.AimlessKick) */ {
 public:
  GameEvent_AimlessKick();
  virtual ~GameEvent_AimlessKick();

  GameEvent_AimlessKick(const GameEvent_AimlessKick& from);

  inline GameEvent_AimlessKick& operator=(const GameEvent_AimlessKick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_AimlessKick(GameEvent_AimlessKick&& from) noexcept
    : GameEvent_AimlessKick() {
    *this = ::std::move(from);
  }

  inline GameEvent_AimlessKick& operator=(GameEvent_AimlessKick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_AimlessKick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_AimlessKick* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AimlessKick*>(
               &_GameEvent_AimlessKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameEvent_AimlessKick* other);
  friend void swap(GameEvent_AimlessKick& a, GameEvent_AimlessKick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_AimlessKick* New() const final {
    return CreateMaybeMessage<GameEvent_AimlessKick>(NULL);
  }

  GameEvent_AimlessKick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_AimlessKick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_AimlessKick& from);
  void MergeFrom(const GameEvent_AimlessKick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_AimlessKick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location();
  static const int kKickLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_kick_location() const;
  public:
  const ::ssl_protos::gc::Vector2& kick_location() const;
  ::ssl_protos::gc::Vector2* release_kick_location();
  ::ssl_protos::gc::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.AimlessKick)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_kick_location();
  void clear_has_kick_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* kick_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_Goal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.Goal) */ {
 public:
  GameEvent_Goal();
  virtual ~GameEvent_Goal();

  GameEvent_Goal(const GameEvent_Goal& from);

  inline GameEvent_Goal& operator=(const GameEvent_Goal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_Goal(GameEvent_Goal&& from) noexcept
    : GameEvent_Goal() {
    *this = ::std::move(from);
  }

  inline GameEvent_Goal& operator=(GameEvent_Goal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_Goal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_Goal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_Goal*>(
               &_GameEvent_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameEvent_Goal* other);
  friend void swap(GameEvent_Goal& a, GameEvent_Goal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_Goal* New() const final {
    return CreateMaybeMessage<GameEvent_Goal>(NULL);
  }

  GameEvent_Goal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_Goal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_Goal& from);
  void MergeFrom(const GameEvent_Goal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_Goal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 9;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 9;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location();
  static const int kKickLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_kick_location() const;
  public:
  const ::ssl_protos::gc::Vector2& kick_location() const;
  ::ssl_protos::gc::Vector2* release_kick_location();
  ::ssl_protos::gc::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 kicking_bot = 2;
  bool has_kicking_bot() const;
  void clear_kicking_bot();
  static const int kKickingBotFieldNumber = 2;
  ::google::protobuf::uint32 kicking_bot() const;
  void set_kicking_bot(::google::protobuf::uint32 value);

  // optional float max_ball_height = 5;
  bool has_max_ball_height() const;
  void clear_max_ball_height();
  static const int kMaxBallHeightFieldNumber = 5;
  float max_ball_height() const;
  void set_max_ball_height(float value);

  // optional .ssl_protos.gc.Team kicking_team = 6;
  bool has_kicking_team() const;
  void clear_kicking_team();
  static const int kKickingTeamFieldNumber = 6;
  ::ssl_protos::gc::Team kicking_team() const;
  void set_kicking_team(::ssl_protos::gc::Team value);

  // optional uint64 last_touch_by_team = 8;
  bool has_last_touch_by_team() const;
  void clear_last_touch_by_team();
  static const int kLastTouchByTeamFieldNumber = 8;
  ::google::protobuf::uint64 last_touch_by_team() const;
  void set_last_touch_by_team(::google::protobuf::uint64 value);

  // optional uint32 num_robots_by_team = 7;
  bool has_num_robots_by_team() const;
  void clear_num_robots_by_team();
  static const int kNumRobotsByTeamFieldNumber = 7;
  ::google::protobuf::uint32 num_robots_by_team() const;
  void set_num_robots_by_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.Goal)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_kicking_team();
  void clear_has_kicking_team();
  void set_has_kicking_bot();
  void clear_has_kicking_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_kick_location();
  void clear_has_kick_location();
  void set_has_max_ball_height();
  void clear_has_max_ball_height();
  void set_has_num_robots_by_team();
  void clear_has_num_robots_by_team();
  void set_has_last_touch_by_team();
  void clear_has_last_touch_by_team();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* kick_location_;
  int by_team_;
  ::google::protobuf::uint32 kicking_bot_;
  float max_ball_height_;
  int kicking_team_;
  ::google::protobuf::uint64 last_touch_by_team_;
  ::google::protobuf::uint32 num_robots_by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_IndirectGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.IndirectGoal) */ {
 public:
  GameEvent_IndirectGoal();
  virtual ~GameEvent_IndirectGoal();

  GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from);

  inline GameEvent_IndirectGoal& operator=(const GameEvent_IndirectGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_IndirectGoal(GameEvent_IndirectGoal&& from) noexcept
    : GameEvent_IndirectGoal() {
    *this = ::std::move(from);
  }

  inline GameEvent_IndirectGoal& operator=(GameEvent_IndirectGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_IndirectGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_IndirectGoal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_IndirectGoal*>(
               &_GameEvent_IndirectGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GameEvent_IndirectGoal* other);
  friend void swap(GameEvent_IndirectGoal& a, GameEvent_IndirectGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_IndirectGoal* New() const final {
    return CreateMaybeMessage<GameEvent_IndirectGoal>(NULL);
  }

  GameEvent_IndirectGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_IndirectGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_IndirectGoal& from);
  void MergeFrom(const GameEvent_IndirectGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_IndirectGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location();
  static const int kKickLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_kick_location() const;
  public:
  const ::ssl_protos::gc::Vector2& kick_location() const;
  ::ssl_protos::gc::Vector2* release_kick_location();
  ::ssl_protos::gc::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.IndirectGoal)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_kick_location();
  void clear_has_kick_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* kick_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_ChippedGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.ChippedGoal) */ {
 public:
  GameEvent_ChippedGoal();
  virtual ~GameEvent_ChippedGoal();

  GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from);

  inline GameEvent_ChippedGoal& operator=(const GameEvent_ChippedGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_ChippedGoal(GameEvent_ChippedGoal&& from) noexcept
    : GameEvent_ChippedGoal() {
    *this = ::std::move(from);
  }

  inline GameEvent_ChippedGoal& operator=(GameEvent_ChippedGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_ChippedGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_ChippedGoal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ChippedGoal*>(
               &_GameEvent_ChippedGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameEvent_ChippedGoal* other);
  friend void swap(GameEvent_ChippedGoal& a, GameEvent_ChippedGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_ChippedGoal* New() const final {
    return CreateMaybeMessage<GameEvent_ChippedGoal>(NULL);
  }

  GameEvent_ChippedGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_ChippedGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_ChippedGoal& from);
  void MergeFrom(const GameEvent_ChippedGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_ChippedGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location();
  static const int kKickLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_kick_location() const;
  public:
  const ::ssl_protos::gc::Vector2& kick_location() const;
  ::ssl_protos::gc::Vector2* release_kick_location();
  ::ssl_protos::gc::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float max_ball_height = 5;
  bool has_max_ball_height() const;
  void clear_max_ball_height();
  static const int kMaxBallHeightFieldNumber = 5;
  float max_ball_height() const;
  void set_max_ball_height(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.ChippedGoal)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_kick_location();
  void clear_has_kick_location();
  void set_has_max_ball_height();
  void clear_has_max_ball_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* kick_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float max_ball_height_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotTooFastInStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotTooFastInStop) */ {
 public:
  GameEvent_BotTooFastInStop();
  virtual ~GameEvent_BotTooFastInStop();

  GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from);

  inline GameEvent_BotTooFastInStop& operator=(const GameEvent_BotTooFastInStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotTooFastInStop(GameEvent_BotTooFastInStop&& from) noexcept
    : GameEvent_BotTooFastInStop() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotTooFastInStop& operator=(GameEvent_BotTooFastInStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotTooFastInStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotTooFastInStop* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotTooFastInStop*>(
               &_GameEvent_BotTooFastInStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameEvent_BotTooFastInStop* other);
  friend void swap(GameEvent_BotTooFastInStop& a, GameEvent_BotTooFastInStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotTooFastInStop* New() const final {
    return CreateMaybeMessage<GameEvent_BotTooFastInStop>(NULL);
  }

  GameEvent_BotTooFastInStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotTooFastInStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotTooFastInStop& from);
  void MergeFrom(const GameEvent_BotTooFastInStop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotTooFastInStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotTooFastInStop)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_speed();
  void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float speed_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_DefenderTooCloseToKickPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint) */ {
 public:
  GameEvent_DefenderTooCloseToKickPoint();
  virtual ~GameEvent_DefenderTooCloseToKickPoint();

  GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from);

  inline GameEvent_DefenderTooCloseToKickPoint& operator=(const GameEvent_DefenderTooCloseToKickPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_DefenderTooCloseToKickPoint(GameEvent_DefenderTooCloseToKickPoint&& from) noexcept
    : GameEvent_DefenderTooCloseToKickPoint() {
    *this = ::std::move(from);
  }

  inline GameEvent_DefenderTooCloseToKickPoint& operator=(GameEvent_DefenderTooCloseToKickPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_DefenderTooCloseToKickPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_DefenderTooCloseToKickPoint* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderTooCloseToKickPoint*>(
               &_GameEvent_DefenderTooCloseToKickPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GameEvent_DefenderTooCloseToKickPoint* other);
  friend void swap(GameEvent_DefenderTooCloseToKickPoint& a, GameEvent_DefenderTooCloseToKickPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_DefenderTooCloseToKickPoint* New() const final {
    return CreateMaybeMessage<GameEvent_DefenderTooCloseToKickPoint>(NULL);
  }

  GameEvent_DefenderTooCloseToKickPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_DefenderTooCloseToKickPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from);
  void MergeFrom(const GameEvent_DefenderTooCloseToKickPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotCrashDrawn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotCrashDrawn) */ {
 public:
  GameEvent_BotCrashDrawn();
  virtual ~GameEvent_BotCrashDrawn();

  GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from);

  inline GameEvent_BotCrashDrawn& operator=(const GameEvent_BotCrashDrawn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotCrashDrawn(GameEvent_BotCrashDrawn&& from) noexcept
    : GameEvent_BotCrashDrawn() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotCrashDrawn& operator=(GameEvent_BotCrashDrawn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotCrashDrawn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotCrashDrawn* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotCrashDrawn*>(
               &_GameEvent_BotCrashDrawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GameEvent_BotCrashDrawn* other);
  friend void swap(GameEvent_BotCrashDrawn& a, GameEvent_BotCrashDrawn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotCrashDrawn* New() const final {
    return CreateMaybeMessage<GameEvent_BotCrashDrawn>(NULL);
  }

  GameEvent_BotCrashDrawn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotCrashDrawn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotCrashDrawn& from);
  void MergeFrom(const GameEvent_BotCrashDrawn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotCrashDrawn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional uint32 bot_yellow = 1;
  bool has_bot_yellow() const;
  void clear_bot_yellow();
  static const int kBotYellowFieldNumber = 1;
  ::google::protobuf::uint32 bot_yellow() const;
  void set_bot_yellow(::google::protobuf::uint32 value);

  // optional uint32 bot_blue = 2;
  bool has_bot_blue() const;
  void clear_bot_blue();
  static const int kBotBlueFieldNumber = 2;
  ::google::protobuf::uint32 bot_blue() const;
  void set_bot_blue(::google::protobuf::uint32 value);

  // optional float crash_speed = 4;
  bool has_crash_speed() const;
  void clear_crash_speed();
  static const int kCrashSpeedFieldNumber = 4;
  float crash_speed() const;
  void set_crash_speed(float value);

  // optional float speed_diff = 5;
  bool has_speed_diff() const;
  void clear_speed_diff();
  static const int kSpeedDiffFieldNumber = 5;
  float speed_diff() const;
  void set_speed_diff(float value);

  // optional float crash_angle = 6;
  bool has_crash_angle() const;
  void clear_crash_angle();
  static const int kCrashAngleFieldNumber = 6;
  float crash_angle() const;
  void set_crash_angle(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotCrashDrawn)
 private:
  void set_has_bot_yellow();
  void clear_has_bot_yellow();
  void set_has_bot_blue();
  void clear_has_bot_blue();
  void set_has_location();
  void clear_has_location();
  void set_has_crash_speed();
  void clear_has_crash_speed();
  void set_has_speed_diff();
  void clear_has_speed_diff();
  void set_has_crash_angle();
  void clear_has_crash_angle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::google::protobuf::uint32 bot_yellow_;
  ::google::protobuf::uint32 bot_blue_;
  float crash_speed_;
  float speed_diff_;
  float crash_angle_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotCrashUnique : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotCrashUnique) */ {
 public:
  GameEvent_BotCrashUnique();
  virtual ~GameEvent_BotCrashUnique();

  GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from);

  inline GameEvent_BotCrashUnique& operator=(const GameEvent_BotCrashUnique& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotCrashUnique(GameEvent_BotCrashUnique&& from) noexcept
    : GameEvent_BotCrashUnique() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotCrashUnique& operator=(GameEvent_BotCrashUnique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotCrashUnique& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotCrashUnique* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotCrashUnique*>(
               &_GameEvent_BotCrashUnique_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GameEvent_BotCrashUnique* other);
  friend void swap(GameEvent_BotCrashUnique& a, GameEvent_BotCrashUnique& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotCrashUnique* New() const final {
    return CreateMaybeMessage<GameEvent_BotCrashUnique>(NULL);
  }

  GameEvent_BotCrashUnique* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotCrashUnique>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotCrashUnique& from);
  void MergeFrom(const GameEvent_BotCrashUnique& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotCrashUnique* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 violator = 2;
  bool has_violator() const;
  void clear_violator();
  static const int kViolatorFieldNumber = 2;
  ::google::protobuf::uint32 violator() const;
  void set_violator(::google::protobuf::uint32 value);

  // optional uint32 victim = 3;
  bool has_victim() const;
  void clear_victim();
  static const int kVictimFieldNumber = 3;
  ::google::protobuf::uint32 victim() const;
  void set_victim(::google::protobuf::uint32 value);

  // optional float crash_speed = 5;
  bool has_crash_speed() const;
  void clear_crash_speed();
  static const int kCrashSpeedFieldNumber = 5;
  float crash_speed() const;
  void set_crash_speed(float value);

  // optional float speed_diff = 6;
  bool has_speed_diff() const;
  void clear_speed_diff();
  static const int kSpeedDiffFieldNumber = 6;
  float speed_diff() const;
  void set_speed_diff(float value);

  // optional float crash_angle = 7;
  bool has_crash_angle() const;
  void clear_crash_angle();
  static const int kCrashAngleFieldNumber = 7;
  float crash_angle() const;
  void set_crash_angle(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotCrashUnique)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_violator();
  void clear_has_violator();
  void set_has_victim();
  void clear_has_victim();
  void set_has_location();
  void clear_has_location();
  void set_has_crash_speed();
  void clear_has_crash_speed();
  void set_has_speed_diff();
  void clear_has_speed_diff();
  void set_has_crash_angle();
  void clear_has_crash_angle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 violator_;
  ::google::protobuf::uint32 victim_;
  float crash_speed_;
  float speed_diff_;
  float crash_angle_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotPushedBot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotPushedBot) */ {
 public:
  GameEvent_BotPushedBot();
  virtual ~GameEvent_BotPushedBot();

  GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from);

  inline GameEvent_BotPushedBot& operator=(const GameEvent_BotPushedBot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotPushedBot(GameEvent_BotPushedBot&& from) noexcept
    : GameEvent_BotPushedBot() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotPushedBot& operator=(GameEvent_BotPushedBot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotPushedBot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotPushedBot* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotPushedBot*>(
               &_GameEvent_BotPushedBot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GameEvent_BotPushedBot* other);
  friend void swap(GameEvent_BotPushedBot& a, GameEvent_BotPushedBot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotPushedBot* New() const final {
    return CreateMaybeMessage<GameEvent_BotPushedBot>(NULL);
  }

  GameEvent_BotPushedBot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotPushedBot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotPushedBot& from);
  void MergeFrom(const GameEvent_BotPushedBot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotPushedBot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 violator = 2;
  bool has_violator() const;
  void clear_violator();
  static const int kViolatorFieldNumber = 2;
  ::google::protobuf::uint32 violator() const;
  void set_violator(::google::protobuf::uint32 value);

  // optional uint32 victim = 3;
  bool has_victim() const;
  void clear_victim();
  static const int kVictimFieldNumber = 3;
  ::google::protobuf::uint32 victim() const;
  void set_victim(::google::protobuf::uint32 value);

  // optional float pushed_distance = 5;
  bool has_pushed_distance() const;
  void clear_pushed_distance();
  static const int kPushedDistanceFieldNumber = 5;
  float pushed_distance() const;
  void set_pushed_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotPushedBot)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_violator();
  void clear_has_violator();
  void set_has_victim();
  void clear_has_victim();
  void set_has_location();
  void clear_has_location();
  void set_has_pushed_distance();
  void clear_has_pushed_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 violator_;
  ::google::protobuf::uint32 victim_;
  float pushed_distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotTippedOver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotTippedOver) */ {
 public:
  GameEvent_BotTippedOver();
  virtual ~GameEvent_BotTippedOver();

  GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from);

  inline GameEvent_BotTippedOver& operator=(const GameEvent_BotTippedOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotTippedOver(GameEvent_BotTippedOver&& from) noexcept
    : GameEvent_BotTippedOver() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotTippedOver& operator=(GameEvent_BotTippedOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotTippedOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotTippedOver* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotTippedOver*>(
               &_GameEvent_BotTippedOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GameEvent_BotTippedOver* other);
  friend void swap(GameEvent_BotTippedOver& a, GameEvent_BotTippedOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotTippedOver* New() const final {
    return CreateMaybeMessage<GameEvent_BotTippedOver>(NULL);
  }

  GameEvent_BotTippedOver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotTippedOver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotTippedOver& from);
  void MergeFrom(const GameEvent_BotTippedOver& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotTippedOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 ball_location = 4;
  bool has_ball_location() const;
  void clear_ball_location();
  static const int kBallLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_ball_location() const;
  public:
  const ::ssl_protos::gc::Vector2& ball_location() const;
  ::ssl_protos::gc::Vector2* release_ball_location();
  ::ssl_protos::gc::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotTippedOver)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_ball_location();
  void clear_has_ball_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* ball_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_DefenderInDefenseArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.DefenderInDefenseArea) */ {
 public:
  GameEvent_DefenderInDefenseArea();
  virtual ~GameEvent_DefenderInDefenseArea();

  GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from);

  inline GameEvent_DefenderInDefenseArea& operator=(const GameEvent_DefenderInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_DefenderInDefenseArea(GameEvent_DefenderInDefenseArea&& from) noexcept
    : GameEvent_DefenderInDefenseArea() {
    *this = ::std::move(from);
  }

  inline GameEvent_DefenderInDefenseArea& operator=(GameEvent_DefenderInDefenseArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_DefenderInDefenseArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_DefenderInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderInDefenseArea*>(
               &_GameEvent_DefenderInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GameEvent_DefenderInDefenseArea* other);
  friend void swap(GameEvent_DefenderInDefenseArea& a, GameEvent_DefenderInDefenseArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_DefenderInDefenseArea* New() const final {
    return CreateMaybeMessage<GameEvent_DefenderInDefenseArea>(NULL);
  }

  GameEvent_DefenderInDefenseArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_DefenderInDefenseArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_DefenderInDefenseArea& from);
  void MergeFrom(const GameEvent_DefenderInDefenseArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_DefenderInDefenseArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.DefenderInDefenseArea)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_DefenderInDefenseAreaPartially : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially) */ {
 public:
  GameEvent_DefenderInDefenseAreaPartially();
  virtual ~GameEvent_DefenderInDefenseAreaPartially();

  GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from);

  inline GameEvent_DefenderInDefenseAreaPartially& operator=(const GameEvent_DefenderInDefenseAreaPartially& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_DefenderInDefenseAreaPartially(GameEvent_DefenderInDefenseAreaPartially&& from) noexcept
    : GameEvent_DefenderInDefenseAreaPartially() {
    *this = ::std::move(from);
  }

  inline GameEvent_DefenderInDefenseAreaPartially& operator=(GameEvent_DefenderInDefenseAreaPartially&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_DefenderInDefenseAreaPartially& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_DefenderInDefenseAreaPartially* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderInDefenseAreaPartially*>(
               &_GameEvent_DefenderInDefenseAreaPartially_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GameEvent_DefenderInDefenseAreaPartially* other);
  friend void swap(GameEvent_DefenderInDefenseAreaPartially& a, GameEvent_DefenderInDefenseAreaPartially& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_DefenderInDefenseAreaPartially* New() const final {
    return CreateMaybeMessage<GameEvent_DefenderInDefenseAreaPartially>(NULL);
  }

  GameEvent_DefenderInDefenseAreaPartially* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_DefenderInDefenseAreaPartially>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from);
  void MergeFrom(const GameEvent_DefenderInDefenseAreaPartially& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 ball_location = 5;
  bool has_ball_location() const;
  void clear_ball_location();
  static const int kBallLocationFieldNumber = 5;
  private:
  const ::ssl_protos::gc::Vector2& _internal_ball_location() const;
  public:
  const ::ssl_protos::gc::Vector2& ball_location() const;
  ::ssl_protos::gc::Vector2* release_ball_location();
  ::ssl_protos::gc::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_distance();
  void clear_has_distance();
  void set_has_ball_location();
  void clear_has_ball_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* ball_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTouchedBallInDefenseArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea) */ {
 public:
  GameEvent_AttackerTouchedBallInDefenseArea();
  virtual ~GameEvent_AttackerTouchedBallInDefenseArea();

  GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from);

  inline GameEvent_AttackerTouchedBallInDefenseArea& operator=(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_AttackerTouchedBallInDefenseArea(GameEvent_AttackerTouchedBallInDefenseArea&& from) noexcept
    : GameEvent_AttackerTouchedBallInDefenseArea() {
    *this = ::std::move(from);
  }

  inline GameEvent_AttackerTouchedBallInDefenseArea& operator=(GameEvent_AttackerTouchedBallInDefenseArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_AttackerTouchedBallInDefenseArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_AttackerTouchedBallInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTouchedBallInDefenseArea*>(
               &_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GameEvent_AttackerTouchedBallInDefenseArea* other);
  friend void swap(GameEvent_AttackerTouchedBallInDefenseArea& a, GameEvent_AttackerTouchedBallInDefenseArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_AttackerTouchedBallInDefenseArea* New() const final {
    return CreateMaybeMessage<GameEvent_AttackerTouchedBallInDefenseArea>(NULL);
  }

  GameEvent_AttackerTouchedBallInDefenseArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_AttackerTouchedBallInDefenseArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from);
  void MergeFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotKickedBallTooFast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotKickedBallTooFast) */ {
 public:
  GameEvent_BotKickedBallTooFast();
  virtual ~GameEvent_BotKickedBallTooFast();

  GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from);

  inline GameEvent_BotKickedBallTooFast& operator=(const GameEvent_BotKickedBallTooFast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotKickedBallTooFast(GameEvent_BotKickedBallTooFast&& from) noexcept
    : GameEvent_BotKickedBallTooFast() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotKickedBallTooFast& operator=(GameEvent_BotKickedBallTooFast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotKickedBallTooFast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotKickedBallTooFast* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotKickedBallTooFast*>(
               &_GameEvent_BotKickedBallTooFast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GameEvent_BotKickedBallTooFast* other);
  friend void swap(GameEvent_BotKickedBallTooFast& a, GameEvent_BotKickedBallTooFast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotKickedBallTooFast* New() const final {
    return CreateMaybeMessage<GameEvent_BotKickedBallTooFast>(NULL);
  }

  GameEvent_BotKickedBallTooFast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotKickedBallTooFast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotKickedBallTooFast& from);
  void MergeFrom(const GameEvent_BotKickedBallTooFast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotKickedBallTooFast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float initial_ball_speed = 4;
  bool has_initial_ball_speed() const;
  void clear_initial_ball_speed();
  static const int kInitialBallSpeedFieldNumber = 4;
  float initial_ball_speed() const;
  void set_initial_ball_speed(float value);

  // optional bool chipped = 5;
  bool has_chipped() const;
  void clear_chipped();
  static const int kChippedFieldNumber = 5;
  bool chipped() const;
  void set_chipped(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotKickedBallTooFast)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_initial_ball_speed();
  void clear_has_initial_ball_speed();
  void set_has_chipped();
  void clear_has_chipped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float initial_ball_speed_;
  bool chipped_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotDribbledBallTooFar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotDribbledBallTooFar) */ {
 public:
  GameEvent_BotDribbledBallTooFar();
  virtual ~GameEvent_BotDribbledBallTooFar();

  GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from);

  inline GameEvent_BotDribbledBallTooFar& operator=(const GameEvent_BotDribbledBallTooFar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotDribbledBallTooFar(GameEvent_BotDribbledBallTooFar&& from) noexcept
    : GameEvent_BotDribbledBallTooFar() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotDribbledBallTooFar& operator=(GameEvent_BotDribbledBallTooFar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotDribbledBallTooFar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotDribbledBallTooFar* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotDribbledBallTooFar*>(
               &_GameEvent_BotDribbledBallTooFar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GameEvent_BotDribbledBallTooFar* other);
  friend void swap(GameEvent_BotDribbledBallTooFar& a, GameEvent_BotDribbledBallTooFar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotDribbledBallTooFar* New() const final {
    return CreateMaybeMessage<GameEvent_BotDribbledBallTooFar>(NULL);
  }

  GameEvent_BotDribbledBallTooFar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotDribbledBallTooFar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotDribbledBallTooFar& from);
  void MergeFrom(const GameEvent_BotDribbledBallTooFar& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotDribbledBallTooFar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 start = 3;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_start() const;
  public:
  const ::ssl_protos::gc::Vector2& start() const;
  ::ssl_protos::gc::Vector2* release_start();
  ::ssl_protos::gc::Vector2* mutable_start();
  void set_allocated_start(::ssl_protos::gc::Vector2* start);

  // optional .ssl_protos.gc.Vector2 end = 4;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_end() const;
  public:
  const ::ssl_protos::gc::Vector2& end() const;
  ::ssl_protos::gc::Vector2* release_end();
  ::ssl_protos::gc::Vector2* mutable_end();
  void set_allocated_end(::ssl_protos::gc::Vector2* end);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotDribbledBallTooFar)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_start();
  void clear_has_start();
  void set_has_end();
  void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* start_;
  ::ssl_protos::gc::Vector2* end_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTouchedOpponentInDefenseArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea) */ {
 public:
  GameEvent_AttackerTouchedOpponentInDefenseArea();
  virtual ~GameEvent_AttackerTouchedOpponentInDefenseArea();

  GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from);

  inline GameEvent_AttackerTouchedOpponentInDefenseArea& operator=(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_AttackerTouchedOpponentInDefenseArea(GameEvent_AttackerTouchedOpponentInDefenseArea&& from) noexcept
    : GameEvent_AttackerTouchedOpponentInDefenseArea() {
    *this = ::std::move(from);
  }

  inline GameEvent_AttackerTouchedOpponentInDefenseArea& operator=(GameEvent_AttackerTouchedOpponentInDefenseArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_AttackerTouchedOpponentInDefenseArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_AttackerTouchedOpponentInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea*>(
               &_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GameEvent_AttackerTouchedOpponentInDefenseArea* other);
  friend void swap(GameEvent_AttackerTouchedOpponentInDefenseArea& a, GameEvent_AttackerTouchedOpponentInDefenseArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_AttackerTouchedOpponentInDefenseArea* New() const final {
    return CreateMaybeMessage<GameEvent_AttackerTouchedOpponentInDefenseArea>(NULL);
  }

  GameEvent_AttackerTouchedOpponentInDefenseArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_AttackerTouchedOpponentInDefenseArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from);
  void MergeFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional uint32 victim = 4;
  bool has_victim() const;
  void clear_victim();
  static const int kVictimFieldNumber = 4;
  ::google::protobuf::uint32 victim() const;
  void set_victim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_victim();
  void clear_has_victim();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  ::google::protobuf::uint32 victim_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_AttackerDoubleTouchedBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall) */ {
 public:
  GameEvent_AttackerDoubleTouchedBall();
  virtual ~GameEvent_AttackerDoubleTouchedBall();

  GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from);

  inline GameEvent_AttackerDoubleTouchedBall& operator=(const GameEvent_AttackerDoubleTouchedBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_AttackerDoubleTouchedBall(GameEvent_AttackerDoubleTouchedBall&& from) noexcept
    : GameEvent_AttackerDoubleTouchedBall() {
    *this = ::std::move(from);
  }

  inline GameEvent_AttackerDoubleTouchedBall& operator=(GameEvent_AttackerDoubleTouchedBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_AttackerDoubleTouchedBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_AttackerDoubleTouchedBall* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerDoubleTouchedBall*>(
               &_GameEvent_AttackerDoubleTouchedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GameEvent_AttackerDoubleTouchedBall* other);
  friend void swap(GameEvent_AttackerDoubleTouchedBall& a, GameEvent_AttackerDoubleTouchedBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_AttackerDoubleTouchedBall* New() const final {
    return CreateMaybeMessage<GameEvent_AttackerDoubleTouchedBall>(NULL);
  }

  GameEvent_AttackerDoubleTouchedBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_AttackerDoubleTouchedBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from);
  void MergeFrom(const GameEvent_AttackerDoubleTouchedBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_AttackerDoubleTouchedBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTooCloseToDefenseArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea) */ {
 public:
  GameEvent_AttackerTooCloseToDefenseArea();
  virtual ~GameEvent_AttackerTooCloseToDefenseArea();

  GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from);

  inline GameEvent_AttackerTooCloseToDefenseArea& operator=(const GameEvent_AttackerTooCloseToDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_AttackerTooCloseToDefenseArea(GameEvent_AttackerTooCloseToDefenseArea&& from) noexcept
    : GameEvent_AttackerTooCloseToDefenseArea() {
    *this = ::std::move(from);
  }

  inline GameEvent_AttackerTooCloseToDefenseArea& operator=(GameEvent_AttackerTooCloseToDefenseArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_AttackerTooCloseToDefenseArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_AttackerTooCloseToDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTooCloseToDefenseArea*>(
               &_GameEvent_AttackerTooCloseToDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GameEvent_AttackerTooCloseToDefenseArea* other);
  friend void swap(GameEvent_AttackerTooCloseToDefenseArea& a, GameEvent_AttackerTooCloseToDefenseArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_AttackerTooCloseToDefenseArea* New() const final {
    return CreateMaybeMessage<GameEvent_AttackerTooCloseToDefenseArea>(NULL);
  }

  GameEvent_AttackerTooCloseToDefenseArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_AttackerTooCloseToDefenseArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from);
  void MergeFrom(const GameEvent_AttackerTooCloseToDefenseArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional .ssl_protos.gc.Vector2 ball_location = 5;
  bool has_ball_location() const;
  void clear_ball_location();
  static const int kBallLocationFieldNumber = 5;
  private:
  const ::ssl_protos::gc::Vector2& _internal_ball_location() const;
  public:
  const ::ssl_protos::gc::Vector2& ball_location() const;
  ::ssl_protos::gc::Vector2* release_ball_location();
  ::ssl_protos::gc::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_distance();
  void clear_has_distance();
  void set_has_ball_location();
  void clear_has_ball_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  ::ssl_protos::gc::Vector2* ball_location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotHeldBallDeliberately : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotHeldBallDeliberately) */ {
 public:
  GameEvent_BotHeldBallDeliberately();
  virtual ~GameEvent_BotHeldBallDeliberately();

  GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from);

  inline GameEvent_BotHeldBallDeliberately& operator=(const GameEvent_BotHeldBallDeliberately& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotHeldBallDeliberately(GameEvent_BotHeldBallDeliberately&& from) noexcept
    : GameEvent_BotHeldBallDeliberately() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotHeldBallDeliberately& operator=(GameEvent_BotHeldBallDeliberately&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotHeldBallDeliberately& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotHeldBallDeliberately* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotHeldBallDeliberately*>(
               &_GameEvent_BotHeldBallDeliberately_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GameEvent_BotHeldBallDeliberately* other);
  friend void swap(GameEvent_BotHeldBallDeliberately& a, GameEvent_BotHeldBallDeliberately& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotHeldBallDeliberately* New() const final {
    return CreateMaybeMessage<GameEvent_BotHeldBallDeliberately>(NULL);
  }

  GameEvent_BotHeldBallDeliberately* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotHeldBallDeliberately>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotHeldBallDeliberately& from);
  void MergeFrom(const GameEvent_BotHeldBallDeliberately& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotHeldBallDeliberately* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // optional float duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  float duration() const;
  void set_duration(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotHeldBallDeliberately)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();
  void set_has_duration();
  void clear_has_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  float duration_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotInterferedPlacement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotInterferedPlacement) */ {
 public:
  GameEvent_BotInterferedPlacement();
  virtual ~GameEvent_BotInterferedPlacement();

  GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from);

  inline GameEvent_BotInterferedPlacement& operator=(const GameEvent_BotInterferedPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotInterferedPlacement(GameEvent_BotInterferedPlacement&& from) noexcept
    : GameEvent_BotInterferedPlacement() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotInterferedPlacement& operator=(GameEvent_BotInterferedPlacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotInterferedPlacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotInterferedPlacement* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotInterferedPlacement*>(
               &_GameEvent_BotInterferedPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GameEvent_BotInterferedPlacement* other);
  friend void swap(GameEvent_BotInterferedPlacement& a, GameEvent_BotInterferedPlacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotInterferedPlacement* New() const final {
    return CreateMaybeMessage<GameEvent_BotInterferedPlacement>(NULL);
  }

  GameEvent_BotInterferedPlacement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotInterferedPlacement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotInterferedPlacement& from);
  void MergeFrom(const GameEvent_BotInterferedPlacement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotInterferedPlacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot();
  static const int kByBotFieldNumber = 2;
  ::google::protobuf::uint32 by_bot() const;
  void set_by_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotInterferedPlacement)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_by_bot();
  void clear_has_by_bot();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  ::google::protobuf::uint32 by_bot_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_MultipleCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.MultipleCards) */ {
 public:
  GameEvent_MultipleCards();
  virtual ~GameEvent_MultipleCards();

  GameEvent_MultipleCards(const GameEvent_MultipleCards& from);

  inline GameEvent_MultipleCards& operator=(const GameEvent_MultipleCards& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_MultipleCards(GameEvent_MultipleCards&& from) noexcept
    : GameEvent_MultipleCards() {
    *this = ::std::move(from);
  }

  inline GameEvent_MultipleCards& operator=(GameEvent_MultipleCards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_MultipleCards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_MultipleCards* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultipleCards*>(
               &_GameEvent_MultipleCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GameEvent_MultipleCards* other);
  friend void swap(GameEvent_MultipleCards& a, GameEvent_MultipleCards& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_MultipleCards* New() const final {
    return CreateMaybeMessage<GameEvent_MultipleCards>(NULL);
  }

  GameEvent_MultipleCards* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_MultipleCards>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_MultipleCards& from);
  void MergeFrom(const GameEvent_MultipleCards& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_MultipleCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.MultipleCards)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_MultipleFouls : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.MultipleFouls) */ {
 public:
  GameEvent_MultipleFouls();
  virtual ~GameEvent_MultipleFouls();

  GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from);

  inline GameEvent_MultipleFouls& operator=(const GameEvent_MultipleFouls& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_MultipleFouls(GameEvent_MultipleFouls&& from) noexcept
    : GameEvent_MultipleFouls() {
    *this = ::std::move(from);
  }

  inline GameEvent_MultipleFouls& operator=(GameEvent_MultipleFouls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_MultipleFouls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_MultipleFouls* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultipleFouls*>(
               &_GameEvent_MultipleFouls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GameEvent_MultipleFouls* other);
  friend void swap(GameEvent_MultipleFouls& a, GameEvent_MultipleFouls& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_MultipleFouls* New() const final {
    return CreateMaybeMessage<GameEvent_MultipleFouls>(NULL);
  }

  GameEvent_MultipleFouls* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_MultipleFouls>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_MultipleFouls& from);
  void MergeFrom(const GameEvent_MultipleFouls& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_MultipleFouls* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.MultipleFouls)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_MultiplePlacementFailures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.MultiplePlacementFailures) */ {
 public:
  GameEvent_MultiplePlacementFailures();
  virtual ~GameEvent_MultiplePlacementFailures();

  GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from);

  inline GameEvent_MultiplePlacementFailures& operator=(const GameEvent_MultiplePlacementFailures& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_MultiplePlacementFailures(GameEvent_MultiplePlacementFailures&& from) noexcept
    : GameEvent_MultiplePlacementFailures() {
    *this = ::std::move(from);
  }

  inline GameEvent_MultiplePlacementFailures& operator=(GameEvent_MultiplePlacementFailures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_MultiplePlacementFailures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_MultiplePlacementFailures* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultiplePlacementFailures*>(
               &_GameEvent_MultiplePlacementFailures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GameEvent_MultiplePlacementFailures* other);
  friend void swap(GameEvent_MultiplePlacementFailures& a, GameEvent_MultiplePlacementFailures& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_MultiplePlacementFailures* New() const final {
    return CreateMaybeMessage<GameEvent_MultiplePlacementFailures>(NULL);
  }

  GameEvent_MultiplePlacementFailures* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_MultiplePlacementFailures>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_MultiplePlacementFailures& from);
  void MergeFrom(const GameEvent_MultiplePlacementFailures& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_MultiplePlacementFailures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.MultiplePlacementFailures)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_KickTimeout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.KickTimeout) */ {
 public:
  GameEvent_KickTimeout();
  virtual ~GameEvent_KickTimeout();

  GameEvent_KickTimeout(const GameEvent_KickTimeout& from);

  inline GameEvent_KickTimeout& operator=(const GameEvent_KickTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_KickTimeout(GameEvent_KickTimeout&& from) noexcept
    : GameEvent_KickTimeout() {
    *this = ::std::move(from);
  }

  inline GameEvent_KickTimeout& operator=(GameEvent_KickTimeout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_KickTimeout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_KickTimeout* internal_default_instance() {
    return reinterpret_cast<const GameEvent_KickTimeout*>(
               &_GameEvent_KickTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GameEvent_KickTimeout* other);
  friend void swap(GameEvent_KickTimeout& a, GameEvent_KickTimeout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_KickTimeout* New() const final {
    return CreateMaybeMessage<GameEvent_KickTimeout>(NULL);
  }

  GameEvent_KickTimeout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_KickTimeout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_KickTimeout& from);
  void MergeFrom(const GameEvent_KickTimeout& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_KickTimeout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional float time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.KickTimeout)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_location();
  void clear_has_location();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  float time_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_NoProgressInGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.NoProgressInGame) */ {
 public:
  GameEvent_NoProgressInGame();
  virtual ~GameEvent_NoProgressInGame();

  GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from);

  inline GameEvent_NoProgressInGame& operator=(const GameEvent_NoProgressInGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_NoProgressInGame(GameEvent_NoProgressInGame&& from) noexcept
    : GameEvent_NoProgressInGame() {
    *this = ::std::move(from);
  }

  inline GameEvent_NoProgressInGame& operator=(GameEvent_NoProgressInGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_NoProgressInGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_NoProgressInGame* internal_default_instance() {
    return reinterpret_cast<const GameEvent_NoProgressInGame*>(
               &_GameEvent_NoProgressInGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(GameEvent_NoProgressInGame* other);
  friend void swap(GameEvent_NoProgressInGame& a, GameEvent_NoProgressInGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_NoProgressInGame* New() const final {
    return CreateMaybeMessage<GameEvent_NoProgressInGame>(NULL);
  }

  GameEvent_NoProgressInGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_NoProgressInGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_NoProgressInGame& from);
  void MergeFrom(const GameEvent_NoProgressInGame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_NoProgressInGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // optional float time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.NoProgressInGame)
 private:
  void set_has_location();
  void clear_has_location();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  float time_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_PlacementFailed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.PlacementFailed) */ {
 public:
  GameEvent_PlacementFailed();
  virtual ~GameEvent_PlacementFailed();

  GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from);

  inline GameEvent_PlacementFailed& operator=(const GameEvent_PlacementFailed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_PlacementFailed(GameEvent_PlacementFailed&& from) noexcept
    : GameEvent_PlacementFailed() {
    *this = ::std::move(from);
  }

  inline GameEvent_PlacementFailed& operator=(GameEvent_PlacementFailed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_PlacementFailed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_PlacementFailed* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PlacementFailed*>(
               &_GameEvent_PlacementFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(GameEvent_PlacementFailed* other);
  friend void swap(GameEvent_PlacementFailed& a, GameEvent_PlacementFailed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_PlacementFailed* New() const final {
    return CreateMaybeMessage<GameEvent_PlacementFailed>(NULL);
  }

  GameEvent_PlacementFailed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_PlacementFailed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_PlacementFailed& from);
  void MergeFrom(const GameEvent_PlacementFailed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_PlacementFailed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional float remaining_distance = 2;
  bool has_remaining_distance() const;
  void clear_remaining_distance();
  static const int kRemainingDistanceFieldNumber = 2;
  float remaining_distance() const;
  void set_remaining_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.PlacementFailed)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_remaining_distance();
  void clear_has_remaining_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  float remaining_distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_UnsportingBehaviorMinor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor) */ {
 public:
  GameEvent_UnsportingBehaviorMinor();
  virtual ~GameEvent_UnsportingBehaviorMinor();

  GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from);

  inline GameEvent_UnsportingBehaviorMinor& operator=(const GameEvent_UnsportingBehaviorMinor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_UnsportingBehaviorMinor(GameEvent_UnsportingBehaviorMinor&& from) noexcept
    : GameEvent_UnsportingBehaviorMinor() {
    *this = ::std::move(from);
  }

  inline GameEvent_UnsportingBehaviorMinor& operator=(GameEvent_UnsportingBehaviorMinor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_UnsportingBehaviorMinor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_UnsportingBehaviorMinor* internal_default_instance() {
    return reinterpret_cast<const GameEvent_UnsportingBehaviorMinor*>(
               &_GameEvent_UnsportingBehaviorMinor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GameEvent_UnsportingBehaviorMinor* other);
  friend void swap(GameEvent_UnsportingBehaviorMinor& a, GameEvent_UnsportingBehaviorMinor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_UnsportingBehaviorMinor* New() const final {
    return CreateMaybeMessage<GameEvent_UnsportingBehaviorMinor>(NULL);
  }

  GameEvent_UnsportingBehaviorMinor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_UnsportingBehaviorMinor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_UnsportingBehaviorMinor& from);
  void MergeFrom(const GameEvent_UnsportingBehaviorMinor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_UnsportingBehaviorMinor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_reason();
  void clear_has_reason();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_UnsportingBehaviorMajor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor) */ {
 public:
  GameEvent_UnsportingBehaviorMajor();
  virtual ~GameEvent_UnsportingBehaviorMajor();

  GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from);

  inline GameEvent_UnsportingBehaviorMajor& operator=(const GameEvent_UnsportingBehaviorMajor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_UnsportingBehaviorMajor(GameEvent_UnsportingBehaviorMajor&& from) noexcept
    : GameEvent_UnsportingBehaviorMajor() {
    *this = ::std::move(from);
  }

  inline GameEvent_UnsportingBehaviorMajor& operator=(GameEvent_UnsportingBehaviorMajor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_UnsportingBehaviorMajor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_UnsportingBehaviorMajor* internal_default_instance() {
    return reinterpret_cast<const GameEvent_UnsportingBehaviorMajor*>(
               &_GameEvent_UnsportingBehaviorMajor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(GameEvent_UnsportingBehaviorMajor* other);
  friend void swap(GameEvent_UnsportingBehaviorMajor& a, GameEvent_UnsportingBehaviorMajor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_UnsportingBehaviorMajor* New() const final {
    return CreateMaybeMessage<GameEvent_UnsportingBehaviorMajor>(NULL);
  }

  GameEvent_UnsportingBehaviorMajor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_UnsportingBehaviorMajor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_UnsportingBehaviorMajor& from);
  void MergeFrom(const GameEvent_UnsportingBehaviorMajor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_UnsportingBehaviorMajor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_reason();
  void clear_has_reason();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_KeeperHeldBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.KeeperHeldBall) */ {
 public:
  GameEvent_KeeperHeldBall();
  virtual ~GameEvent_KeeperHeldBall();

  GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from);

  inline GameEvent_KeeperHeldBall& operator=(const GameEvent_KeeperHeldBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_KeeperHeldBall(GameEvent_KeeperHeldBall&& from) noexcept
    : GameEvent_KeeperHeldBall() {
    *this = ::std::move(from);
  }

  inline GameEvent_KeeperHeldBall& operator=(GameEvent_KeeperHeldBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_KeeperHeldBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_KeeperHeldBall* internal_default_instance() {
    return reinterpret_cast<const GameEvent_KeeperHeldBall*>(
               &_GameEvent_KeeperHeldBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(GameEvent_KeeperHeldBall* other);
  friend void swap(GameEvent_KeeperHeldBall& a, GameEvent_KeeperHeldBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_KeeperHeldBall* New() const final {
    return CreateMaybeMessage<GameEvent_KeeperHeldBall>(NULL);
  }

  GameEvent_KeeperHeldBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_KeeperHeldBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_KeeperHeldBall& from);
  void MergeFrom(const GameEvent_KeeperHeldBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_KeeperHeldBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional float duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  float duration() const;
  void set_duration(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.KeeperHeldBall)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_location();
  void clear_has_location();
  void set_has_duration();
  void clear_has_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  float duration_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_PlacementSucceeded : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.PlacementSucceeded) */ {
 public:
  GameEvent_PlacementSucceeded();
  virtual ~GameEvent_PlacementSucceeded();

  GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from);

  inline GameEvent_PlacementSucceeded& operator=(const GameEvent_PlacementSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_PlacementSucceeded(GameEvent_PlacementSucceeded&& from) noexcept
    : GameEvent_PlacementSucceeded() {
    *this = ::std::move(from);
  }

  inline GameEvent_PlacementSucceeded& operator=(GameEvent_PlacementSucceeded&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_PlacementSucceeded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_PlacementSucceeded* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PlacementSucceeded*>(
               &_GameEvent_PlacementSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(GameEvent_PlacementSucceeded* other);
  friend void swap(GameEvent_PlacementSucceeded& a, GameEvent_PlacementSucceeded& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_PlacementSucceeded* New() const final {
    return CreateMaybeMessage<GameEvent_PlacementSucceeded>(NULL);
  }

  GameEvent_PlacementSucceeded* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_PlacementSucceeded>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_PlacementSucceeded& from);
  void MergeFrom(const GameEvent_PlacementSucceeded& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_PlacementSucceeded* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional float time_taken = 2;
  bool has_time_taken() const;
  void clear_time_taken();
  static const int kTimeTakenFieldNumber = 2;
  float time_taken() const;
  void set_time_taken(float value);

  // optional float precision = 3;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  float precision() const;
  void set_precision(float value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.PlacementSucceeded)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_time_taken();
  void clear_has_time_taken();
  void set_has_precision();
  void clear_has_precision();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  float time_taken_;
  float precision_;
  float distance_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_Prepared : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.Prepared) */ {
 public:
  GameEvent_Prepared();
  virtual ~GameEvent_Prepared();

  GameEvent_Prepared(const GameEvent_Prepared& from);

  inline GameEvent_Prepared& operator=(const GameEvent_Prepared& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_Prepared(GameEvent_Prepared&& from) noexcept
    : GameEvent_Prepared() {
    *this = ::std::move(from);
  }

  inline GameEvent_Prepared& operator=(GameEvent_Prepared&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_Prepared& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_Prepared* internal_default_instance() {
    return reinterpret_cast<const GameEvent_Prepared*>(
               &_GameEvent_Prepared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(GameEvent_Prepared* other);
  friend void swap(GameEvent_Prepared& a, GameEvent_Prepared& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_Prepared* New() const final {
    return CreateMaybeMessage<GameEvent_Prepared>(NULL);
  }

  GameEvent_Prepared* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_Prepared>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_Prepared& from);
  void MergeFrom(const GameEvent_Prepared& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_Prepared* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float time_taken = 1;
  bool has_time_taken() const;
  void clear_time_taken();
  static const int kTimeTakenFieldNumber = 1;
  float time_taken() const;
  void set_time_taken(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.Prepared)
 private:
  void set_has_time_taken();
  void clear_has_time_taken();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float time_taken_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BotSubstitution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BotSubstitution) */ {
 public:
  GameEvent_BotSubstitution();
  virtual ~GameEvent_BotSubstitution();

  GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from);

  inline GameEvent_BotSubstitution& operator=(const GameEvent_BotSubstitution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BotSubstitution(GameEvent_BotSubstitution&& from) noexcept
    : GameEvent_BotSubstitution() {
    *this = ::std::move(from);
  }

  inline GameEvent_BotSubstitution& operator=(GameEvent_BotSubstitution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BotSubstitution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BotSubstitution* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotSubstitution*>(
               &_GameEvent_BotSubstitution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(GameEvent_BotSubstitution* other);
  friend void swap(GameEvent_BotSubstitution& a, GameEvent_BotSubstitution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BotSubstitution* New() const final {
    return CreateMaybeMessage<GameEvent_BotSubstitution>(NULL);
  }

  GameEvent_BotSubstitution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BotSubstitution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BotSubstitution& from);
  void MergeFrom(const GameEvent_BotSubstitution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BotSubstitution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BotSubstitution)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_ChallengeFlag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.ChallengeFlag) */ {
 public:
  GameEvent_ChallengeFlag();
  virtual ~GameEvent_ChallengeFlag();

  GameEvent_ChallengeFlag(const GameEvent_ChallengeFlag& from);

  inline GameEvent_ChallengeFlag& operator=(const GameEvent_ChallengeFlag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_ChallengeFlag(GameEvent_ChallengeFlag&& from) noexcept
    : GameEvent_ChallengeFlag() {
    *this = ::std::move(from);
  }

  inline GameEvent_ChallengeFlag& operator=(GameEvent_ChallengeFlag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_ChallengeFlag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_ChallengeFlag* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ChallengeFlag*>(
               &_GameEvent_ChallengeFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(GameEvent_ChallengeFlag* other);
  friend void swap(GameEvent_ChallengeFlag& a, GameEvent_ChallengeFlag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_ChallengeFlag* New() const final {
    return CreateMaybeMessage<GameEvent_ChallengeFlag>(NULL);
  }

  GameEvent_ChallengeFlag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_ChallengeFlag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_ChallengeFlag& from);
  void MergeFrom(const GameEvent_ChallengeFlag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_ChallengeFlag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.ChallengeFlag)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_EmergencyStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.EmergencyStop) */ {
 public:
  GameEvent_EmergencyStop();
  virtual ~GameEvent_EmergencyStop();

  GameEvent_EmergencyStop(const GameEvent_EmergencyStop& from);

  inline GameEvent_EmergencyStop& operator=(const GameEvent_EmergencyStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_EmergencyStop(GameEvent_EmergencyStop&& from) noexcept
    : GameEvent_EmergencyStop() {
    *this = ::std::move(from);
  }

  inline GameEvent_EmergencyStop& operator=(GameEvent_EmergencyStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_EmergencyStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_EmergencyStop* internal_default_instance() {
    return reinterpret_cast<const GameEvent_EmergencyStop*>(
               &_GameEvent_EmergencyStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(GameEvent_EmergencyStop* other);
  friend void swap(GameEvent_EmergencyStop& a, GameEvent_EmergencyStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_EmergencyStop* New() const final {
    return CreateMaybeMessage<GameEvent_EmergencyStop>(NULL);
  }

  GameEvent_EmergencyStop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_EmergencyStop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_EmergencyStop& from);
  void MergeFrom(const GameEvent_EmergencyStop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_EmergencyStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.EmergencyStop)
 private:
  void set_has_by_team();
  void clear_has_by_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_TooManyRobots : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.TooManyRobots) */ {
 public:
  GameEvent_TooManyRobots();
  virtual ~GameEvent_TooManyRobots();

  GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from);

  inline GameEvent_TooManyRobots& operator=(const GameEvent_TooManyRobots& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_TooManyRobots(GameEvent_TooManyRobots&& from) noexcept
    : GameEvent_TooManyRobots() {
    *this = ::std::move(from);
  }

  inline GameEvent_TooManyRobots& operator=(GameEvent_TooManyRobots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_TooManyRobots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_TooManyRobots* internal_default_instance() {
    return reinterpret_cast<const GameEvent_TooManyRobots*>(
               &_GameEvent_TooManyRobots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(GameEvent_TooManyRobots* other);
  friend void swap(GameEvent_TooManyRobots& a, GameEvent_TooManyRobots& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_TooManyRobots* New() const final {
    return CreateMaybeMessage<GameEvent_TooManyRobots>(NULL);
  }

  GameEvent_TooManyRobots* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_TooManyRobots>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_TooManyRobots& from);
  void MergeFrom(const GameEvent_TooManyRobots& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_TooManyRobots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 ball_location = 4;
  bool has_ball_location() const;
  void clear_ball_location();
  static const int kBallLocationFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_ball_location() const;
  public:
  const ::ssl_protos::gc::Vector2& ball_location() const;
  ::ssl_protos::gc::Vector2* release_ball_location();
  ::ssl_protos::gc::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // optional int32 num_robots_allowed = 2;
  bool has_num_robots_allowed() const;
  void clear_num_robots_allowed();
  static const int kNumRobotsAllowedFieldNumber = 2;
  ::google::protobuf::int32 num_robots_allowed() const;
  void set_num_robots_allowed(::google::protobuf::int32 value);

  // optional int32 num_robots_on_field = 3;
  bool has_num_robots_on_field() const;
  void clear_num_robots_on_field();
  static const int kNumRobotsOnFieldFieldNumber = 3;
  ::google::protobuf::int32 num_robots_on_field() const;
  void set_num_robots_on_field(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.TooManyRobots)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_num_robots_allowed();
  void clear_has_num_robots_allowed();
  void set_has_num_robots_on_field();
  void clear_has_num_robots_on_field();
  void set_has_ball_location();
  void clear_has_ball_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* ball_location_;
  int by_team_;
  ::google::protobuf::int32 num_robots_allowed_;
  ::google::protobuf::int32 num_robots_on_field_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_BoundaryCrossing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.BoundaryCrossing) */ {
 public:
  GameEvent_BoundaryCrossing();
  virtual ~GameEvent_BoundaryCrossing();

  GameEvent_BoundaryCrossing(const GameEvent_BoundaryCrossing& from);

  inline GameEvent_BoundaryCrossing& operator=(const GameEvent_BoundaryCrossing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_BoundaryCrossing(GameEvent_BoundaryCrossing&& from) noexcept
    : GameEvent_BoundaryCrossing() {
    *this = ::std::move(from);
  }

  inline GameEvent_BoundaryCrossing& operator=(GameEvent_BoundaryCrossing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_BoundaryCrossing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_BoundaryCrossing* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BoundaryCrossing*>(
               &_GameEvent_BoundaryCrossing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(GameEvent_BoundaryCrossing* other);
  friend void swap(GameEvent_BoundaryCrossing& a, GameEvent_BoundaryCrossing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_BoundaryCrossing* New() const final {
    return CreateMaybeMessage<GameEvent_BoundaryCrossing>(NULL);
  }

  GameEvent_BoundaryCrossing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_BoundaryCrossing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_BoundaryCrossing& from);
  void MergeFrom(const GameEvent_BoundaryCrossing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_BoundaryCrossing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.BoundaryCrossing)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent_PenaltyKickFailed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent.PenaltyKickFailed) */ {
 public:
  GameEvent_PenaltyKickFailed();
  virtual ~GameEvent_PenaltyKickFailed();

  GameEvent_PenaltyKickFailed(const GameEvent_PenaltyKickFailed& from);

  inline GameEvent_PenaltyKickFailed& operator=(const GameEvent_PenaltyKickFailed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent_PenaltyKickFailed(GameEvent_PenaltyKickFailed&& from) noexcept
    : GameEvent_PenaltyKickFailed() {
    *this = ::std::move(from);
  }

  inline GameEvent_PenaltyKickFailed& operator=(GameEvent_PenaltyKickFailed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent_PenaltyKickFailed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent_PenaltyKickFailed* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PenaltyKickFailed*>(
               &_GameEvent_PenaltyKickFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(GameEvent_PenaltyKickFailed* other);
  friend void swap(GameEvent_PenaltyKickFailed& a, GameEvent_PenaltyKickFailed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent_PenaltyKickFailed* New() const final {
    return CreateMaybeMessage<GameEvent_PenaltyKickFailed>(NULL);
  }

  GameEvent_PenaltyKickFailed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent_PenaltyKickFailed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent_PenaltyKickFailed& from);
  void MergeFrom(const GameEvent_PenaltyKickFailed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent_PenaltyKickFailed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector2 location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_location() const;
  public:
  const ::ssl_protos::gc::Vector2& location() const;
  ::ssl_protos::gc::Vector2* release_location();
  ::ssl_protos::gc::Vector2* mutable_location();
  void set_allocated_location(::ssl_protos::gc::Vector2* location);

  // required .ssl_protos.gc.Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team();
  static const int kByTeamFieldNumber = 1;
  ::ssl_protos::gc::Team by_team() const;
  void set_by_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent.PenaltyKickFailed)
 private:
  void set_has_by_team();
  void clear_has_by_team();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* location_;
  int by_team_;
  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameEvent) */ {
 public:
  GameEvent();
  virtual ~GameEvent();

  GameEvent(const GameEvent& from);

  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameEvent(GameEvent&& from) noexcept
    : GameEvent() {
    *this = ::std::move(from);
  }

  inline GameEvent& operator=(GameEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEvent& default_instance();

  enum EventCase {
    kBallLeftFieldTouchLine = 6,
    kBallLeftFieldGoalLine = 7,
    kAimlessKick = 11,
    kAttackerTooCloseToDefenseArea = 19,
    kDefenderInDefenseArea = 31,
    kBoundaryCrossing = 43,
    kKeeperHeldBall = 13,
    kBotDribbledBallTooFar = 17,
    kBotPushedBot = 24,
    kBotHeldBallDeliberately = 26,
    kBotTippedOver = 27,
    kAttackerTouchedBallInDefenseArea = 15,
    kBotKickedBallTooFast = 18,
    kBotCrashUnique = 22,
    kBotCrashDrawn = 21,
    kDefenderTooCloseToKickPoint = 29,
    kBotTooFastInStop = 28,
    kBotInterferedPlacement = 20,
    kPossibleGoal = 39,
    kGoal = 8,
    kInvalidGoal = 44,
    kAttackerDoubleTouchedBall = 14,
    kPlacementSucceeded = 5,
    kPenaltyKickFailed = 45,
    kNoProgressInGame = 2,
    kPlacementFailed = 3,
    kMultipleCards = 32,
    kMultipleFouls = 34,
    kBotSubstitution = 37,
    kTooManyRobots = 38,
    kChallengeFlag = 46,
    kEmergencyStop = 47,
    kUnsportingBehaviorMinor = 35,
    kUnsportingBehaviorMajor = 36,
    kPrepared = 1,
    kIndirectGoal = 9,
    kChippedGoal = 10,
    kKickTimeout = 12,
    kAttackerTouchedOpponentInDefenseArea = 16,
    kAttackerTouchedOpponentInDefenseAreaSkipped = 42,
    kBotCrashUniqueSkipped = 23,
    kBotPushedBotSkipped = 25,
    kDefenderInDefenseAreaPartially = 30,
    kMultiplePlacementFailures = 33,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEvent* internal_default_instance() {
    return reinterpret_cast<const GameEvent*>(
               &_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(GameEvent* other);
  friend void swap(GameEvent& a, GameEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameEvent* New() const final {
    return CreateMaybeMessage<GameEvent>(NULL);
  }

  GameEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameEvent& from);
  void MergeFrom(const GameEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameEvent_BallLeftField BallLeftField;
  typedef GameEvent_AimlessKick AimlessKick;
  typedef GameEvent_Goal Goal;
  typedef GameEvent_IndirectGoal IndirectGoal;
  typedef GameEvent_ChippedGoal ChippedGoal;
  typedef GameEvent_BotTooFastInStop BotTooFastInStop;
  typedef GameEvent_DefenderTooCloseToKickPoint DefenderTooCloseToKickPoint;
  typedef GameEvent_BotCrashDrawn BotCrashDrawn;
  typedef GameEvent_BotCrashUnique BotCrashUnique;
  typedef GameEvent_BotPushedBot BotPushedBot;
  typedef GameEvent_BotTippedOver BotTippedOver;
  typedef GameEvent_DefenderInDefenseArea DefenderInDefenseArea;
  typedef GameEvent_DefenderInDefenseAreaPartially DefenderInDefenseAreaPartially;
  typedef GameEvent_AttackerTouchedBallInDefenseArea AttackerTouchedBallInDefenseArea;
  typedef GameEvent_BotKickedBallTooFast BotKickedBallTooFast;
  typedef GameEvent_BotDribbledBallTooFar BotDribbledBallTooFar;
  typedef GameEvent_AttackerTouchedOpponentInDefenseArea AttackerTouchedOpponentInDefenseArea;
  typedef GameEvent_AttackerDoubleTouchedBall AttackerDoubleTouchedBall;
  typedef GameEvent_AttackerTooCloseToDefenseArea AttackerTooCloseToDefenseArea;
  typedef GameEvent_BotHeldBallDeliberately BotHeldBallDeliberately;
  typedef GameEvent_BotInterferedPlacement BotInterferedPlacement;
  typedef GameEvent_MultipleCards MultipleCards;
  typedef GameEvent_MultipleFouls MultipleFouls;
  typedef GameEvent_MultiplePlacementFailures MultiplePlacementFailures;
  typedef GameEvent_KickTimeout KickTimeout;
  typedef GameEvent_NoProgressInGame NoProgressInGame;
  typedef GameEvent_PlacementFailed PlacementFailed;
  typedef GameEvent_UnsportingBehaviorMinor UnsportingBehaviorMinor;
  typedef GameEvent_UnsportingBehaviorMajor UnsportingBehaviorMajor;
  typedef GameEvent_KeeperHeldBall KeeperHeldBall;
  typedef GameEvent_PlacementSucceeded PlacementSucceeded;
  typedef GameEvent_Prepared Prepared;
  typedef GameEvent_BotSubstitution BotSubstitution;
  typedef GameEvent_ChallengeFlag ChallengeFlag;
  typedef GameEvent_EmergencyStop EmergencyStop;
  typedef GameEvent_TooManyRobots TooManyRobots;
  typedef GameEvent_BoundaryCrossing BoundaryCrossing;
  typedef GameEvent_PenaltyKickFailed PenaltyKickFailed;

  typedef GameEvent_Type Type;
  static const Type UNKNOWN_GAME_EVENT_TYPE =
    GameEvent_Type_UNKNOWN_GAME_EVENT_TYPE;
  static const Type BALL_LEFT_FIELD_TOUCH_LINE =
    GameEvent_Type_BALL_LEFT_FIELD_TOUCH_LINE;
  static const Type BALL_LEFT_FIELD_GOAL_LINE =
    GameEvent_Type_BALL_LEFT_FIELD_GOAL_LINE;
  static const Type AIMLESS_KICK =
    GameEvent_Type_AIMLESS_KICK;
  static const Type ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA =
    GameEvent_Type_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA;
  static const Type DEFENDER_IN_DEFENSE_AREA =
    GameEvent_Type_DEFENDER_IN_DEFENSE_AREA;
  static const Type BOUNDARY_CROSSING =
    GameEvent_Type_BOUNDARY_CROSSING;
  static const Type KEEPER_HELD_BALL =
    GameEvent_Type_KEEPER_HELD_BALL;
  static const Type BOT_DRIBBLED_BALL_TOO_FAR =
    GameEvent_Type_BOT_DRIBBLED_BALL_TOO_FAR;
  static const Type BOT_PUSHED_BOT =
    GameEvent_Type_BOT_PUSHED_BOT;
  static const Type BOT_HELD_BALL_DELIBERATELY =
    GameEvent_Type_BOT_HELD_BALL_DELIBERATELY;
  static const Type BOT_TIPPED_OVER =
    GameEvent_Type_BOT_TIPPED_OVER;
  static const Type ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA =
    GameEvent_Type_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA;
  static const Type BOT_KICKED_BALL_TOO_FAST =
    GameEvent_Type_BOT_KICKED_BALL_TOO_FAST;
  static const Type BOT_CRASH_UNIQUE =
    GameEvent_Type_BOT_CRASH_UNIQUE;
  static const Type BOT_CRASH_DRAWN =
    GameEvent_Type_BOT_CRASH_DRAWN;
  static const Type DEFENDER_TOO_CLOSE_TO_KICK_POINT =
    GameEvent_Type_DEFENDER_TOO_CLOSE_TO_KICK_POINT;
  static const Type BOT_TOO_FAST_IN_STOP =
    GameEvent_Type_BOT_TOO_FAST_IN_STOP;
  static const Type BOT_INTERFERED_PLACEMENT =
    GameEvent_Type_BOT_INTERFERED_PLACEMENT;
  static const Type POSSIBLE_GOAL =
    GameEvent_Type_POSSIBLE_GOAL;
  static const Type GOAL =
    GameEvent_Type_GOAL;
  static const Type INVALID_GOAL =
    GameEvent_Type_INVALID_GOAL;
  static const Type ATTACKER_DOUBLE_TOUCHED_BALL =
    GameEvent_Type_ATTACKER_DOUBLE_TOUCHED_BALL;
  static const Type PLACEMENT_SUCCEEDED =
    GameEvent_Type_PLACEMENT_SUCCEEDED;
  static const Type PENALTY_KICK_FAILED =
    GameEvent_Type_PENALTY_KICK_FAILED;
  static const Type NO_PROGRESS_IN_GAME =
    GameEvent_Type_NO_PROGRESS_IN_GAME;
  static const Type PLACEMENT_FAILED =
    GameEvent_Type_PLACEMENT_FAILED;
  static const Type MULTIPLE_CARDS =
    GameEvent_Type_MULTIPLE_CARDS;
  static const Type MULTIPLE_FOULS =
    GameEvent_Type_MULTIPLE_FOULS;
  static const Type BOT_SUBSTITUTION =
    GameEvent_Type_BOT_SUBSTITUTION;
  static const Type TOO_MANY_ROBOTS =
    GameEvent_Type_TOO_MANY_ROBOTS;
  static const Type CHALLENGE_FLAG =
    GameEvent_Type_CHALLENGE_FLAG;
  static const Type EMERGENCY_STOP =
    GameEvent_Type_EMERGENCY_STOP;
  static const Type UNSPORTING_BEHAVIOR_MINOR =
    GameEvent_Type_UNSPORTING_BEHAVIOR_MINOR;
  static const Type UNSPORTING_BEHAVIOR_MAJOR =
    GameEvent_Type_UNSPORTING_BEHAVIOR_MAJOR;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type PREPARED =
    GameEvent_Type_PREPARED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type INDIRECT_GOAL =
    GameEvent_Type_INDIRECT_GOAL;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type CHIPPED_GOAL =
    GameEvent_Type_CHIPPED_GOAL;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type KICK_TIMEOUT =
    GameEvent_Type_KICK_TIMEOUT;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA =
    GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED =
    GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type BOT_CRASH_UNIQUE_SKIPPED =
    GameEvent_Type_BOT_CRASH_UNIQUE_SKIPPED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type BOT_PUSHED_BOT_SKIPPED =
    GameEvent_Type_BOT_PUSHED_BOT_SKIPPED;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type DEFENDER_IN_DEFENSE_AREA_PARTIALLY =
    GameEvent_Type_DEFENDER_IN_DEFENSE_AREA_PARTIALLY;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const Type MULTIPLE_PLACEMENT_FAILURES =
    GameEvent_Type_MULTIPLE_PLACEMENT_FAILURES;
  static inline bool Type_IsValid(int value) {
    return GameEvent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GameEvent_Type_Type_MIN;
  static const Type Type_MAX =
    GameEvent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GameEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GameEvent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GameEvent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GameEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string origin = 41;
  int origin_size() const;
  void clear_origin();
  static const int kOriginFieldNumber = 41;
  const ::std::string& origin(int index) const;
  ::std::string* mutable_origin(int index);
  void set_origin(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_origin(int index, ::std::string&& value);
  #endif
  void set_origin(int index, const char* value);
  void set_origin(int index, const char* value, size_t size);
  ::std::string* add_origin();
  void add_origin(const ::std::string& value);
  #if LANG_CXX11
  void add_origin(::std::string&& value);
  #endif
  void add_origin(const char* value);
  void add_origin(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& origin() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_origin();

  // optional .ssl_protos.gc.GameEvent.Type type = 40;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  ::ssl_protos::gc::GameEvent_Type type() const;
  void set_type(::ssl_protos::gc::GameEvent_Type value);

  // optional .ssl_protos.gc.GameEvent.BallLeftField ball_left_field_touch_line = 6;
  bool has_ball_left_field_touch_line() const;
  void clear_ball_left_field_touch_line();
  static const int kBallLeftFieldTouchLineFieldNumber = 6;
  private:
  const ::ssl_protos::gc::GameEvent_BallLeftField& _internal_ball_left_field_touch_line() const;
  public:
  const ::ssl_protos::gc::GameEvent_BallLeftField& ball_left_field_touch_line() const;
  ::ssl_protos::gc::GameEvent_BallLeftField* release_ball_left_field_touch_line();
  ::ssl_protos::gc::GameEvent_BallLeftField* mutable_ball_left_field_touch_line();
  void set_allocated_ball_left_field_touch_line(::ssl_protos::gc::GameEvent_BallLeftField* ball_left_field_touch_line);

  // optional .ssl_protos.gc.GameEvent.BallLeftField ball_left_field_goal_line = 7;
  bool has_ball_left_field_goal_line() const;
  void clear_ball_left_field_goal_line();
  static const int kBallLeftFieldGoalLineFieldNumber = 7;
  private:
  const ::ssl_protos::gc::GameEvent_BallLeftField& _internal_ball_left_field_goal_line() const;
  public:
  const ::ssl_protos::gc::GameEvent_BallLeftField& ball_left_field_goal_line() const;
  ::ssl_protos::gc::GameEvent_BallLeftField* release_ball_left_field_goal_line();
  ::ssl_protos::gc::GameEvent_BallLeftField* mutable_ball_left_field_goal_line();
  void set_allocated_ball_left_field_goal_line(::ssl_protos::gc::GameEvent_BallLeftField* ball_left_field_goal_line);

  // optional .ssl_protos.gc.GameEvent.AimlessKick aimless_kick = 11;
  bool has_aimless_kick() const;
  void clear_aimless_kick();
  static const int kAimlessKickFieldNumber = 11;
  private:
  const ::ssl_protos::gc::GameEvent_AimlessKick& _internal_aimless_kick() const;
  public:
  const ::ssl_protos::gc::GameEvent_AimlessKick& aimless_kick() const;
  ::ssl_protos::gc::GameEvent_AimlessKick* release_aimless_kick();
  ::ssl_protos::gc::GameEvent_AimlessKick* mutable_aimless_kick();
  void set_allocated_aimless_kick(::ssl_protos::gc::GameEvent_AimlessKick* aimless_kick);

  // optional .ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
  bool has_attacker_too_close_to_defense_area() const;
  void clear_attacker_too_close_to_defense_area();
  static const int kAttackerTooCloseToDefenseAreaFieldNumber = 19;
  private:
  const ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea& _internal_attacker_too_close_to_defense_area() const;
  public:
  const ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea& attacker_too_close_to_defense_area() const;
  ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* release_attacker_too_close_to_defense_area();
  ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* mutable_attacker_too_close_to_defense_area();
  void set_allocated_attacker_too_close_to_defense_area(::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area);

  // optional .ssl_protos.gc.GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
  bool has_defender_in_defense_area() const;
  void clear_defender_in_defense_area();
  static const int kDefenderInDefenseAreaFieldNumber = 31;
  private:
  const ::ssl_protos::gc::GameEvent_DefenderInDefenseArea& _internal_defender_in_defense_area() const;
  public:
  const ::ssl_protos::gc::GameEvent_DefenderInDefenseArea& defender_in_defense_area() const;
  ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* release_defender_in_defense_area();
  ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* mutable_defender_in_defense_area();
  void set_allocated_defender_in_defense_area(::ssl_protos::gc::GameEvent_DefenderInDefenseArea* defender_in_defense_area);

  // optional .ssl_protos.gc.GameEvent.BoundaryCrossing boundary_crossing = 43;
  bool has_boundary_crossing() const;
  void clear_boundary_crossing();
  static const int kBoundaryCrossingFieldNumber = 43;
  private:
  const ::ssl_protos::gc::GameEvent_BoundaryCrossing& _internal_boundary_crossing() const;
  public:
  const ::ssl_protos::gc::GameEvent_BoundaryCrossing& boundary_crossing() const;
  ::ssl_protos::gc::GameEvent_BoundaryCrossing* release_boundary_crossing();
  ::ssl_protos::gc::GameEvent_BoundaryCrossing* mutable_boundary_crossing();
  void set_allocated_boundary_crossing(::ssl_protos::gc::GameEvent_BoundaryCrossing* boundary_crossing);

  // optional .ssl_protos.gc.GameEvent.KeeperHeldBall keeper_held_ball = 13;
  bool has_keeper_held_ball() const;
  void clear_keeper_held_ball();
  static const int kKeeperHeldBallFieldNumber = 13;
  private:
  const ::ssl_protos::gc::GameEvent_KeeperHeldBall& _internal_keeper_held_ball() const;
  public:
  const ::ssl_protos::gc::GameEvent_KeeperHeldBall& keeper_held_ball() const;
  ::ssl_protos::gc::GameEvent_KeeperHeldBall* release_keeper_held_ball();
  ::ssl_protos::gc::GameEvent_KeeperHeldBall* mutable_keeper_held_ball();
  void set_allocated_keeper_held_ball(::ssl_protos::gc::GameEvent_KeeperHeldBall* keeper_held_ball);

  // optional .ssl_protos.gc.GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
  bool has_bot_dribbled_ball_too_far() const;
  void clear_bot_dribbled_ball_too_far();
  static const int kBotDribbledBallTooFarFieldNumber = 17;
  private:
  const ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar& _internal_bot_dribbled_ball_too_far() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar& bot_dribbled_ball_too_far() const;
  ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* release_bot_dribbled_ball_too_far();
  ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* mutable_bot_dribbled_ball_too_far();
  void set_allocated_bot_dribbled_ball_too_far(::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far);

  // optional .ssl_protos.gc.GameEvent.BotPushedBot bot_pushed_bot = 24;
  bool has_bot_pushed_bot() const;
  void clear_bot_pushed_bot();
  static const int kBotPushedBotFieldNumber = 24;
  private:
  const ::ssl_protos::gc::GameEvent_BotPushedBot& _internal_bot_pushed_bot() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotPushedBot& bot_pushed_bot() const;
  ::ssl_protos::gc::GameEvent_BotPushedBot* release_bot_pushed_bot();
  ::ssl_protos::gc::GameEvent_BotPushedBot* mutable_bot_pushed_bot();
  void set_allocated_bot_pushed_bot(::ssl_protos::gc::GameEvent_BotPushedBot* bot_pushed_bot);

  // optional .ssl_protos.gc.GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
  bool has_bot_held_ball_deliberately() const;
  void clear_bot_held_ball_deliberately();
  static const int kBotHeldBallDeliberatelyFieldNumber = 26;
  private:
  const ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately& _internal_bot_held_ball_deliberately() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately& bot_held_ball_deliberately() const;
  ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* release_bot_held_ball_deliberately();
  ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* mutable_bot_held_ball_deliberately();
  void set_allocated_bot_held_ball_deliberately(::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately);

  // optional .ssl_protos.gc.GameEvent.BotTippedOver bot_tipped_over = 27;
  bool has_bot_tipped_over() const;
  void clear_bot_tipped_over();
  static const int kBotTippedOverFieldNumber = 27;
  private:
  const ::ssl_protos::gc::GameEvent_BotTippedOver& _internal_bot_tipped_over() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotTippedOver& bot_tipped_over() const;
  ::ssl_protos::gc::GameEvent_BotTippedOver* release_bot_tipped_over();
  ::ssl_protos::gc::GameEvent_BotTippedOver* mutable_bot_tipped_over();
  void set_allocated_bot_tipped_over(::ssl_protos::gc::GameEvent_BotTippedOver* bot_tipped_over);

  // optional .ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
  bool has_attacker_touched_ball_in_defense_area() const;
  void clear_attacker_touched_ball_in_defense_area();
  static const int kAttackerTouchedBallInDefenseAreaFieldNumber = 15;
  private:
  const ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea& _internal_attacker_touched_ball_in_defense_area() const;
  public:
  const ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea& attacker_touched_ball_in_defense_area() const;
  ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* release_attacker_touched_ball_in_defense_area();
  ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* mutable_attacker_touched_ball_in_defense_area();
  void set_allocated_attacker_touched_ball_in_defense_area(::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area);

  // optional .ssl_protos.gc.GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
  bool has_bot_kicked_ball_too_fast() const;
  void clear_bot_kicked_ball_too_fast();
  static const int kBotKickedBallTooFastFieldNumber = 18;
  private:
  const ::ssl_protos::gc::GameEvent_BotKickedBallTooFast& _internal_bot_kicked_ball_too_fast() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotKickedBallTooFast& bot_kicked_ball_too_fast() const;
  ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* release_bot_kicked_ball_too_fast();
  ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* mutable_bot_kicked_ball_too_fast();
  void set_allocated_bot_kicked_ball_too_fast(::ssl_protos::gc::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast);

  // optional .ssl_protos.gc.GameEvent.BotCrashUnique bot_crash_unique = 22;
  bool has_bot_crash_unique() const;
  void clear_bot_crash_unique();
  static const int kBotCrashUniqueFieldNumber = 22;
  private:
  const ::ssl_protos::gc::GameEvent_BotCrashUnique& _internal_bot_crash_unique() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotCrashUnique& bot_crash_unique() const;
  ::ssl_protos::gc::GameEvent_BotCrashUnique* release_bot_crash_unique();
  ::ssl_protos::gc::GameEvent_BotCrashUnique* mutable_bot_crash_unique();
  void set_allocated_bot_crash_unique(::ssl_protos::gc::GameEvent_BotCrashUnique* bot_crash_unique);

  // optional .ssl_protos.gc.GameEvent.BotCrashDrawn bot_crash_drawn = 21;
  bool has_bot_crash_drawn() const;
  void clear_bot_crash_drawn();
  static const int kBotCrashDrawnFieldNumber = 21;
  private:
  const ::ssl_protos::gc::GameEvent_BotCrashDrawn& _internal_bot_crash_drawn() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotCrashDrawn& bot_crash_drawn() const;
  ::ssl_protos::gc::GameEvent_BotCrashDrawn* release_bot_crash_drawn();
  ::ssl_protos::gc::GameEvent_BotCrashDrawn* mutable_bot_crash_drawn();
  void set_allocated_bot_crash_drawn(::ssl_protos::gc::GameEvent_BotCrashDrawn* bot_crash_drawn);

  // optional .ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
  bool has_defender_too_close_to_kick_point() const;
  void clear_defender_too_close_to_kick_point();
  static const int kDefenderTooCloseToKickPointFieldNumber = 29;
  private:
  const ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint& _internal_defender_too_close_to_kick_point() const;
  public:
  const ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint& defender_too_close_to_kick_point() const;
  ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* release_defender_too_close_to_kick_point();
  ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* mutable_defender_too_close_to_kick_point();
  void set_allocated_defender_too_close_to_kick_point(::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point);

  // optional .ssl_protos.gc.GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
  bool has_bot_too_fast_in_stop() const;
  void clear_bot_too_fast_in_stop();
  static const int kBotTooFastInStopFieldNumber = 28;
  private:
  const ::ssl_protos::gc::GameEvent_BotTooFastInStop& _internal_bot_too_fast_in_stop() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotTooFastInStop& bot_too_fast_in_stop() const;
  ::ssl_protos::gc::GameEvent_BotTooFastInStop* release_bot_too_fast_in_stop();
  ::ssl_protos::gc::GameEvent_BotTooFastInStop* mutable_bot_too_fast_in_stop();
  void set_allocated_bot_too_fast_in_stop(::ssl_protos::gc::GameEvent_BotTooFastInStop* bot_too_fast_in_stop);

  // optional .ssl_protos.gc.GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
  bool has_bot_interfered_placement() const;
  void clear_bot_interfered_placement();
  static const int kBotInterferedPlacementFieldNumber = 20;
  private:
  const ::ssl_protos::gc::GameEvent_BotInterferedPlacement& _internal_bot_interfered_placement() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotInterferedPlacement& bot_interfered_placement() const;
  ::ssl_protos::gc::GameEvent_BotInterferedPlacement* release_bot_interfered_placement();
  ::ssl_protos::gc::GameEvent_BotInterferedPlacement* mutable_bot_interfered_placement();
  void set_allocated_bot_interfered_placement(::ssl_protos::gc::GameEvent_BotInterferedPlacement* bot_interfered_placement);

  // optional .ssl_protos.gc.GameEvent.Goal possible_goal = 39;
  bool has_possible_goal() const;
  void clear_possible_goal();
  static const int kPossibleGoalFieldNumber = 39;
  private:
  const ::ssl_protos::gc::GameEvent_Goal& _internal_possible_goal() const;
  public:
  const ::ssl_protos::gc::GameEvent_Goal& possible_goal() const;
  ::ssl_protos::gc::GameEvent_Goal* release_possible_goal();
  ::ssl_protos::gc::GameEvent_Goal* mutable_possible_goal();
  void set_allocated_possible_goal(::ssl_protos::gc::GameEvent_Goal* possible_goal);

  // optional .ssl_protos.gc.GameEvent.Goal goal = 8;
  bool has_goal() const;
  void clear_goal();
  static const int kGoalFieldNumber = 8;
  private:
  const ::ssl_protos::gc::GameEvent_Goal& _internal_goal() const;
  public:
  const ::ssl_protos::gc::GameEvent_Goal& goal() const;
  ::ssl_protos::gc::GameEvent_Goal* release_goal();
  ::ssl_protos::gc::GameEvent_Goal* mutable_goal();
  void set_allocated_goal(::ssl_protos::gc::GameEvent_Goal* goal);

  // optional .ssl_protos.gc.GameEvent.Goal invalid_goal = 44;
  bool has_invalid_goal() const;
  void clear_invalid_goal();
  static const int kInvalidGoalFieldNumber = 44;
  private:
  const ::ssl_protos::gc::GameEvent_Goal& _internal_invalid_goal() const;
  public:
  const ::ssl_protos::gc::GameEvent_Goal& invalid_goal() const;
  ::ssl_protos::gc::GameEvent_Goal* release_invalid_goal();
  ::ssl_protos::gc::GameEvent_Goal* mutable_invalid_goal();
  void set_allocated_invalid_goal(::ssl_protos::gc::GameEvent_Goal* invalid_goal);

  // optional .ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
  bool has_attacker_double_touched_ball() const;
  void clear_attacker_double_touched_ball();
  static const int kAttackerDoubleTouchedBallFieldNumber = 14;
  private:
  const ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall& _internal_attacker_double_touched_ball() const;
  public:
  const ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall& attacker_double_touched_ball() const;
  ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* release_attacker_double_touched_ball();
  ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* mutable_attacker_double_touched_ball();
  void set_allocated_attacker_double_touched_ball(::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball);

  // optional .ssl_protos.gc.GameEvent.PlacementSucceeded placement_succeeded = 5;
  bool has_placement_succeeded() const;
  void clear_placement_succeeded();
  static const int kPlacementSucceededFieldNumber = 5;
  private:
  const ::ssl_protos::gc::GameEvent_PlacementSucceeded& _internal_placement_succeeded() const;
  public:
  const ::ssl_protos::gc::GameEvent_PlacementSucceeded& placement_succeeded() const;
  ::ssl_protos::gc::GameEvent_PlacementSucceeded* release_placement_succeeded();
  ::ssl_protos::gc::GameEvent_PlacementSucceeded* mutable_placement_succeeded();
  void set_allocated_placement_succeeded(::ssl_protos::gc::GameEvent_PlacementSucceeded* placement_succeeded);

  // optional .ssl_protos.gc.GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
  bool has_penalty_kick_failed() const;
  void clear_penalty_kick_failed();
  static const int kPenaltyKickFailedFieldNumber = 45;
  private:
  const ::ssl_protos::gc::GameEvent_PenaltyKickFailed& _internal_penalty_kick_failed() const;
  public:
  const ::ssl_protos::gc::GameEvent_PenaltyKickFailed& penalty_kick_failed() const;
  ::ssl_protos::gc::GameEvent_PenaltyKickFailed* release_penalty_kick_failed();
  ::ssl_protos::gc::GameEvent_PenaltyKickFailed* mutable_penalty_kick_failed();
  void set_allocated_penalty_kick_failed(::ssl_protos::gc::GameEvent_PenaltyKickFailed* penalty_kick_failed);

  // optional .ssl_protos.gc.GameEvent.NoProgressInGame no_progress_in_game = 2;
  bool has_no_progress_in_game() const;
  void clear_no_progress_in_game();
  static const int kNoProgressInGameFieldNumber = 2;
  private:
  const ::ssl_protos::gc::GameEvent_NoProgressInGame& _internal_no_progress_in_game() const;
  public:
  const ::ssl_protos::gc::GameEvent_NoProgressInGame& no_progress_in_game() const;
  ::ssl_protos::gc::GameEvent_NoProgressInGame* release_no_progress_in_game();
  ::ssl_protos::gc::GameEvent_NoProgressInGame* mutable_no_progress_in_game();
  void set_allocated_no_progress_in_game(::ssl_protos::gc::GameEvent_NoProgressInGame* no_progress_in_game);

  // optional .ssl_protos.gc.GameEvent.PlacementFailed placement_failed = 3;
  bool has_placement_failed() const;
  void clear_placement_failed();
  static const int kPlacementFailedFieldNumber = 3;
  private:
  const ::ssl_protos::gc::GameEvent_PlacementFailed& _internal_placement_failed() const;
  public:
  const ::ssl_protos::gc::GameEvent_PlacementFailed& placement_failed() const;
  ::ssl_protos::gc::GameEvent_PlacementFailed* release_placement_failed();
  ::ssl_protos::gc::GameEvent_PlacementFailed* mutable_placement_failed();
  void set_allocated_placement_failed(::ssl_protos::gc::GameEvent_PlacementFailed* placement_failed);

  // optional .ssl_protos.gc.GameEvent.MultipleCards multiple_cards = 32;
  bool has_multiple_cards() const;
  void clear_multiple_cards();
  static const int kMultipleCardsFieldNumber = 32;
  private:
  const ::ssl_protos::gc::GameEvent_MultipleCards& _internal_multiple_cards() const;
  public:
  const ::ssl_protos::gc::GameEvent_MultipleCards& multiple_cards() const;
  ::ssl_protos::gc::GameEvent_MultipleCards* release_multiple_cards();
  ::ssl_protos::gc::GameEvent_MultipleCards* mutable_multiple_cards();
  void set_allocated_multiple_cards(::ssl_protos::gc::GameEvent_MultipleCards* multiple_cards);

  // optional .ssl_protos.gc.GameEvent.MultipleFouls multiple_fouls = 34;
  bool has_multiple_fouls() const;
  void clear_multiple_fouls();
  static const int kMultipleFoulsFieldNumber = 34;
  private:
  const ::ssl_protos::gc::GameEvent_MultipleFouls& _internal_multiple_fouls() const;
  public:
  const ::ssl_protos::gc::GameEvent_MultipleFouls& multiple_fouls() const;
  ::ssl_protos::gc::GameEvent_MultipleFouls* release_multiple_fouls();
  ::ssl_protos::gc::GameEvent_MultipleFouls* mutable_multiple_fouls();
  void set_allocated_multiple_fouls(::ssl_protos::gc::GameEvent_MultipleFouls* multiple_fouls);

  // optional .ssl_protos.gc.GameEvent.BotSubstitution bot_substitution = 37;
  bool has_bot_substitution() const;
  void clear_bot_substitution();
  static const int kBotSubstitutionFieldNumber = 37;
  private:
  const ::ssl_protos::gc::GameEvent_BotSubstitution& _internal_bot_substitution() const;
  public:
  const ::ssl_protos::gc::GameEvent_BotSubstitution& bot_substitution() const;
  ::ssl_protos::gc::GameEvent_BotSubstitution* release_bot_substitution();
  ::ssl_protos::gc::GameEvent_BotSubstitution* mutable_bot_substitution();
  void set_allocated_bot_substitution(::ssl_protos::gc::GameEvent_BotSubstitution* bot_substitution);

  // optional .ssl_protos.gc.GameEvent.TooManyRobots too_many_robots = 38;
  bool has_too_many_robots() const;
  void clear_too_many_robots();
  static const int kTooManyRobotsFieldNumber = 38;
  private:
  const ::ssl_protos::gc::GameEvent_TooManyRobots& _internal_too_many_robots() const;
  public:
  const ::ssl_protos::gc::GameEvent_TooManyRobots& too_many_robots() const;
  ::ssl_protos::gc::GameEvent_TooManyRobots* release_too_many_robots();
  ::ssl_protos::gc::GameEvent_TooManyRobots* mutable_too_many_robots();
  void set_allocated_too_many_robots(::ssl_protos::gc::GameEvent_TooManyRobots* too_many_robots);

  // optional .ssl_protos.gc.GameEvent.ChallengeFlag challenge_flag = 46;
  bool has_challenge_flag() const;
  void clear_challenge_flag();
  static const int kChallengeFlagFieldNumber = 46;
  private:
  const ::ssl_protos::gc::GameEvent_ChallengeFlag& _internal_challenge_flag() const;
  public:
  const ::ssl_protos::gc::GameEvent_ChallengeFlag& challenge_flag() const;
  ::ssl_protos::gc::GameEvent_ChallengeFlag* release_challenge_flag();
  ::ssl_protos::gc::GameEvent_ChallengeFlag* mutable_challenge_flag();
  void set_allocated_challenge_flag(::ssl_protos::gc::GameEvent_ChallengeFlag* challenge_flag);

  // optional .ssl_protos.gc.GameEvent.EmergencyStop emergency_stop = 47;
  bool has_emergency_stop() const;
  void clear_emergency_stop();
  static const int kEmergencyStopFieldNumber = 47;
  private:
  const ::ssl_protos::gc::GameEvent_EmergencyStop& _internal_emergency_stop() const;
  public:
  const ::ssl_protos::gc::GameEvent_EmergencyStop& emergency_stop() const;
  ::ssl_protos::gc::GameEvent_EmergencyStop* release_emergency_stop();
  ::ssl_protos::gc::GameEvent_EmergencyStop* mutable_emergency_stop();
  void set_allocated_emergency_stop(::ssl_protos::gc::GameEvent_EmergencyStop* emergency_stop);

  // optional .ssl_protos.gc.GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
  bool has_unsporting_behavior_minor() const;
  void clear_unsporting_behavior_minor();
  static const int kUnsportingBehaviorMinorFieldNumber = 35;
  private:
  const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor& _internal_unsporting_behavior_minor() const;
  public:
  const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor& unsporting_behavior_minor() const;
  ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* release_unsporting_behavior_minor();
  ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* mutable_unsporting_behavior_minor();
  void set_allocated_unsporting_behavior_minor(::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor);

  // optional .ssl_protos.gc.GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
  bool has_unsporting_behavior_major() const;
  void clear_unsporting_behavior_major();
  static const int kUnsportingBehaviorMajorFieldNumber = 36;
  private:
  const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor& _internal_unsporting_behavior_major() const;
  public:
  const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor& unsporting_behavior_major() const;
  ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* release_unsporting_behavior_major();
  ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* mutable_unsporting_behavior_major();
  void set_allocated_unsporting_behavior_major(::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major);

  // optional .ssl_protos.gc.GameEvent.Prepared prepared = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_prepared() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_prepared();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kPreparedFieldNumber = 1;
  private:
  const ::ssl_protos::gc::GameEvent_Prepared& _internal_prepared() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_Prepared& prepared() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_Prepared* release_prepared();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_Prepared* mutable_prepared();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_prepared(::ssl_protos::gc::GameEvent_Prepared* prepared);

  // optional .ssl_protos.gc.GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_indirect_goal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_indirect_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kIndirectGoalFieldNumber = 9;
  private:
  const ::ssl_protos::gc::GameEvent_IndirectGoal& _internal_indirect_goal() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_IndirectGoal& indirect_goal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_IndirectGoal* release_indirect_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_IndirectGoal* mutable_indirect_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_indirect_goal(::ssl_protos::gc::GameEvent_IndirectGoal* indirect_goal);

  // optional .ssl_protos.gc.GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_chipped_goal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_chipped_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kChippedGoalFieldNumber = 10;
  private:
  const ::ssl_protos::gc::GameEvent_ChippedGoal& _internal_chipped_goal() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_ChippedGoal& chipped_goal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_ChippedGoal* release_chipped_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_ChippedGoal* mutable_chipped_goal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_chipped_goal(::ssl_protos::gc::GameEvent_ChippedGoal* chipped_goal);

  // optional .ssl_protos.gc.GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_kick_timeout() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_kick_timeout();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kKickTimeoutFieldNumber = 12;
  private:
  const ::ssl_protos::gc::GameEvent_KickTimeout& _internal_kick_timeout() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_KickTimeout& kick_timeout() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_KickTimeout* release_kick_timeout();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_KickTimeout* mutable_kick_timeout();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_kick_timeout(::ssl_protos::gc::GameEvent_KickTimeout* kick_timeout);

  // optional .ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_attacker_touched_opponent_in_defense_area() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_attacker_touched_opponent_in_defense_area();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAttackerTouchedOpponentInDefenseAreaFieldNumber = 16;
  private:
  const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_attacker_touched_opponent_in_defense_area(::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area);

  // optional .ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_attacker_touched_opponent_in_defense_area_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_attacker_touched_opponent_in_defense_area_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAttackerTouchedOpponentInDefenseAreaSkippedFieldNumber = 42;
  private:
  const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area_skipped() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_attacker_touched_opponent_in_defense_area_skipped(::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped);

  // optional .ssl_protos.gc.GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_bot_crash_unique_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_bot_crash_unique_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kBotCrashUniqueSkippedFieldNumber = 23;
  private:
  const ::ssl_protos::gc::GameEvent_BotCrashUnique& _internal_bot_crash_unique_skipped() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_BotCrashUnique& bot_crash_unique_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_BotCrashUnique* release_bot_crash_unique_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_BotCrashUnique* mutable_bot_crash_unique_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_bot_crash_unique_skipped(::ssl_protos::gc::GameEvent_BotCrashUnique* bot_crash_unique_skipped);

  // optional .ssl_protos.gc.GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_bot_pushed_bot_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_bot_pushed_bot_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kBotPushedBotSkippedFieldNumber = 25;
  private:
  const ::ssl_protos::gc::GameEvent_BotPushedBot& _internal_bot_pushed_bot_skipped() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_BotPushedBot& bot_pushed_bot_skipped() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_BotPushedBot* release_bot_pushed_bot_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_BotPushedBot* mutable_bot_pushed_bot_skipped();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_bot_pushed_bot_skipped(::ssl_protos::gc::GameEvent_BotPushedBot* bot_pushed_bot_skipped);

  // optional .ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_defender_in_defense_area_partially() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_defender_in_defense_area_partially();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDefenderInDefenseAreaPartiallyFieldNumber = 30;
  private:
  const ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially& _internal_defender_in_defense_area_partially() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially& defender_in_defense_area_partially() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* release_defender_in_defense_area_partially();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* mutable_defender_in_defense_area_partially();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_defender_in_defense_area_partially(::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially);

  // optional .ssl_protos.gc.GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_multiple_placement_failures() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_multiple_placement_failures();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kMultiplePlacementFailuresFieldNumber = 33;
  private:
  const ::ssl_protos::gc::GameEvent_MultiplePlacementFailures& _internal_multiple_placement_failures() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::ssl_protos::gc::GameEvent_MultiplePlacementFailures& multiple_placement_failures() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* release_multiple_placement_failures();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* mutable_multiple_placement_failures();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_multiple_placement_failures(::ssl_protos::gc::GameEvent_MultiplePlacementFailures* multiple_placement_failures);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameEvent)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_ball_left_field_touch_line();
  void set_has_ball_left_field_goal_line();
  void set_has_aimless_kick();
  void set_has_attacker_too_close_to_defense_area();
  void set_has_defender_in_defense_area();
  void set_has_boundary_crossing();
  void set_has_keeper_held_ball();
  void set_has_bot_dribbled_ball_too_far();
  void set_has_bot_pushed_bot();
  void set_has_bot_held_ball_deliberately();
  void set_has_bot_tipped_over();
  void set_has_attacker_touched_ball_in_defense_area();
  void set_has_bot_kicked_ball_too_fast();
  void set_has_bot_crash_unique();
  void set_has_bot_crash_drawn();
  void set_has_defender_too_close_to_kick_point();
  void set_has_bot_too_fast_in_stop();
  void set_has_bot_interfered_placement();
  void set_has_possible_goal();
  void set_has_goal();
  void set_has_invalid_goal();
  void set_has_attacker_double_touched_ball();
  void set_has_placement_succeeded();
  void set_has_penalty_kick_failed();
  void set_has_no_progress_in_game();
  void set_has_placement_failed();
  void set_has_multiple_cards();
  void set_has_multiple_fouls();
  void set_has_bot_substitution();
  void set_has_too_many_robots();
  void set_has_challenge_flag();
  void set_has_emergency_stop();
  void set_has_unsporting_behavior_minor();
  void set_has_unsporting_behavior_major();
  void set_has_prepared();
  void set_has_indirect_goal();
  void set_has_chipped_goal();
  void set_has_kick_timeout();
  void set_has_attacker_touched_opponent_in_defense_area();
  void set_has_attacker_touched_opponent_in_defense_area_skipped();
  void set_has_bot_crash_unique_skipped();
  void set_has_bot_pushed_bot_skipped();
  void set_has_defender_in_defense_area_partially();
  void set_has_multiple_placement_failures();

  inline bool has_event() const;
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> origin_;
  int type_;
  union EventUnion {
    EventUnion() {}
    ::ssl_protos::gc::GameEvent_BallLeftField* ball_left_field_touch_line_;
    ::ssl_protos::gc::GameEvent_BallLeftField* ball_left_field_goal_line_;
    ::ssl_protos::gc::GameEvent_AimlessKick* aimless_kick_;
    ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area_;
    ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* defender_in_defense_area_;
    ::ssl_protos::gc::GameEvent_BoundaryCrossing* boundary_crossing_;
    ::ssl_protos::gc::GameEvent_KeeperHeldBall* keeper_held_ball_;
    ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far_;
    ::ssl_protos::gc::GameEvent_BotPushedBot* bot_pushed_bot_;
    ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately_;
    ::ssl_protos::gc::GameEvent_BotTippedOver* bot_tipped_over_;
    ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area_;
    ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast_;
    ::ssl_protos::gc::GameEvent_BotCrashUnique* bot_crash_unique_;
    ::ssl_protos::gc::GameEvent_BotCrashDrawn* bot_crash_drawn_;
    ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point_;
    ::ssl_protos::gc::GameEvent_BotTooFastInStop* bot_too_fast_in_stop_;
    ::ssl_protos::gc::GameEvent_BotInterferedPlacement* bot_interfered_placement_;
    ::ssl_protos::gc::GameEvent_Goal* possible_goal_;
    ::ssl_protos::gc::GameEvent_Goal* goal_;
    ::ssl_protos::gc::GameEvent_Goal* invalid_goal_;
    ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball_;
    ::ssl_protos::gc::GameEvent_PlacementSucceeded* placement_succeeded_;
    ::ssl_protos::gc::GameEvent_PenaltyKickFailed* penalty_kick_failed_;
    ::ssl_protos::gc::GameEvent_NoProgressInGame* no_progress_in_game_;
    ::ssl_protos::gc::GameEvent_PlacementFailed* placement_failed_;
    ::ssl_protos::gc::GameEvent_MultipleCards* multiple_cards_;
    ::ssl_protos::gc::GameEvent_MultipleFouls* multiple_fouls_;
    ::ssl_protos::gc::GameEvent_BotSubstitution* bot_substitution_;
    ::ssl_protos::gc::GameEvent_TooManyRobots* too_many_robots_;
    ::ssl_protos::gc::GameEvent_ChallengeFlag* challenge_flag_;
    ::ssl_protos::gc::GameEvent_EmergencyStop* emergency_stop_;
    ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor_;
    ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major_;
    ::ssl_protos::gc::GameEvent_Prepared* prepared_;
    ::ssl_protos::gc::GameEvent_IndirectGoal* indirect_goal_;
    ::ssl_protos::gc::GameEvent_ChippedGoal* chipped_goal_;
    ::ssl_protos::gc::GameEvent_KickTimeout* kick_timeout_;
    ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
    ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped_;
    ::ssl_protos::gc::GameEvent_BotCrashUnique* bot_crash_unique_skipped_;
    ::ssl_protos::gc::GameEvent_BotPushedBot* bot_pushed_bot_skipped_;
    ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially_;
    ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* multiple_placement_failures_;
  } event_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gc_5fgame_5fevent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameEvent_BallLeftField

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BallLeftField::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BallLeftField::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BallLeftField::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BallLeftField::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BallLeftField::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BallLeftField.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BallLeftField::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BallLeftField.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BallLeftField::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BallLeftField::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BallLeftField::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BallLeftField::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BallLeftField::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BallLeftField.by_bot)
  return by_bot_;
}
inline void GameEvent_BallLeftField::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BallLeftField.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BallLeftField::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BallLeftField::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BallLeftField::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BallLeftField::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BallLeftField::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BallLeftField.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BallLeftField::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BallLeftField.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BallLeftField::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BallLeftField.location)
  return location_;
}
inline void GameEvent_BallLeftField::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BallLeftField.location)
}

// -------------------------------------------------------------------

// GameEvent_AimlessKick

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_AimlessKick::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_AimlessKick::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_AimlessKick::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_AimlessKick::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_AimlessKick::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AimlessKick.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_AimlessKick::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AimlessKick.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AimlessKick::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_AimlessKick::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_AimlessKick::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_AimlessKick::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_AimlessKick::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AimlessKick.by_bot)
  return by_bot_;
}
inline void GameEvent_AimlessKick::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AimlessKick.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_AimlessKick::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_AimlessKick::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_AimlessKick::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AimlessKick::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AimlessKick::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AimlessKick.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AimlessKick::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AimlessKick.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AimlessKick::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AimlessKick.location)
  return location_;
}
inline void GameEvent_AimlessKick::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AimlessKick.location)
}

// optional .ssl_protos.gc.Vector2 kick_location = 4;
inline bool GameEvent_AimlessKick::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_AimlessKick::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_AimlessKick::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AimlessKick::_internal_kick_location() const {
  return *kick_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AimlessKick::kick_location() const {
  const ::ssl_protos::gc::Vector2* p = kick_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AimlessKick.kick_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AimlessKick::release_kick_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AimlessKick.kick_location)
  clear_has_kick_location();
  ::ssl_protos::gc::Vector2* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AimlessKick::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    kick_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AimlessKick.kick_location)
  return kick_location_;
}
inline void GameEvent_AimlessKick::set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kick_location_);
  }
  if (kick_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kick_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick_location, submessage_arena);
    }
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  kick_location_ = kick_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AimlessKick.kick_location)
}

// -------------------------------------------------------------------

// GameEvent_Goal

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_Goal::has_by_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_Goal::set_has_by_team() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_Goal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_Goal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_Goal::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_Goal::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.by_team)
}

// optional .ssl_protos.gc.Team kicking_team = 6;
inline bool GameEvent_Goal::has_kicking_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameEvent_Goal::set_has_kicking_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameEvent_Goal::clear_has_kicking_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameEvent_Goal::clear_kicking_team() {
  kicking_team_ = 0;
  clear_has_kicking_team();
}
inline ::ssl_protos::gc::Team GameEvent_Goal::kicking_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.kicking_team)
  return static_cast< ::ssl_protos::gc::Team >(kicking_team_);
}
inline void GameEvent_Goal::set_kicking_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_kicking_team();
  kicking_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.kicking_team)
}

// optional uint32 kicking_bot = 2;
inline bool GameEvent_Goal::has_kicking_bot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_Goal::set_has_kicking_bot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_Goal::clear_has_kicking_bot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_Goal::clear_kicking_bot() {
  kicking_bot_ = 0u;
  clear_has_kicking_bot();
}
inline ::google::protobuf::uint32 GameEvent_Goal::kicking_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.kicking_bot)
  return kicking_bot_;
}
inline void GameEvent_Goal::set_kicking_bot(::google::protobuf::uint32 value) {
  set_has_kicking_bot();
  kicking_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.kicking_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_Goal::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_Goal::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_Goal::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_Goal::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_Goal::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_Goal::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.Goal.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_Goal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.Goal.location)
  return location_;
}
inline void GameEvent_Goal::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.Goal.location)
}

// optional .ssl_protos.gc.Vector2 kick_location = 4;
inline bool GameEvent_Goal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_Goal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_Goal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_Goal::_internal_kick_location() const {
  return *kick_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_Goal::kick_location() const {
  const ::ssl_protos::gc::Vector2* p = kick_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.kick_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_Goal::release_kick_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.Goal.kick_location)
  clear_has_kick_location();
  ::ssl_protos::gc::Vector2* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_Goal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    kick_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.Goal.kick_location)
  return kick_location_;
}
inline void GameEvent_Goal::set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kick_location_);
  }
  if (kick_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kick_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick_location, submessage_arena);
    }
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  kick_location_ = kick_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.Goal.kick_location)
}

// optional float max_ball_height = 5;
inline bool GameEvent_Goal::has_max_ball_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEvent_Goal::set_has_max_ball_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEvent_Goal::clear_has_max_ball_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEvent_Goal::clear_max_ball_height() {
  max_ball_height_ = 0;
  clear_has_max_ball_height();
}
inline float GameEvent_Goal::max_ball_height() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.max_ball_height)
  return max_ball_height_;
}
inline void GameEvent_Goal::set_max_ball_height(float value) {
  set_has_max_ball_height();
  max_ball_height_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.max_ball_height)
}

// optional uint32 num_robots_by_team = 7;
inline bool GameEvent_Goal::has_num_robots_by_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameEvent_Goal::set_has_num_robots_by_team() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameEvent_Goal::clear_has_num_robots_by_team() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameEvent_Goal::clear_num_robots_by_team() {
  num_robots_by_team_ = 0u;
  clear_has_num_robots_by_team();
}
inline ::google::protobuf::uint32 GameEvent_Goal::num_robots_by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.num_robots_by_team)
  return num_robots_by_team_;
}
inline void GameEvent_Goal::set_num_robots_by_team(::google::protobuf::uint32 value) {
  set_has_num_robots_by_team();
  num_robots_by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.num_robots_by_team)
}

// optional uint64 last_touch_by_team = 8;
inline bool GameEvent_Goal::has_last_touch_by_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameEvent_Goal::set_has_last_touch_by_team() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameEvent_Goal::clear_has_last_touch_by_team() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameEvent_Goal::clear_last_touch_by_team() {
  last_touch_by_team_ = GOOGLE_ULONGLONG(0);
  clear_has_last_touch_by_team();
}
inline ::google::protobuf::uint64 GameEvent_Goal::last_touch_by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.last_touch_by_team)
  return last_touch_by_team_;
}
inline void GameEvent_Goal::set_last_touch_by_team(::google::protobuf::uint64 value) {
  set_has_last_touch_by_team();
  last_touch_by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.last_touch_by_team)
}

// optional string message = 9;
inline bool GameEvent_Goal::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_Goal::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_Goal::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_Goal::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& GameEvent_Goal::message() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Goal.message)
  return message_.GetNoArena();
}
inline void GameEvent_Goal::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Goal.message)
}
#if LANG_CXX11
inline void GameEvent_Goal::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.GameEvent.Goal.message)
}
#endif
inline void GameEvent_Goal::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GameEvent.Goal.message)
}
inline void GameEvent_Goal::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GameEvent.Goal.message)
}
inline ::std::string* GameEvent_Goal::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.Goal.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEvent_Goal::release_message() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.Goal.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEvent_Goal::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.Goal.message)
}

// -------------------------------------------------------------------

// GameEvent_IndirectGoal

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_IndirectGoal::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_IndirectGoal::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_IndirectGoal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_IndirectGoal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_IndirectGoal::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.IndirectGoal.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_IndirectGoal::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.IndirectGoal.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_IndirectGoal::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_IndirectGoal::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_IndirectGoal::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_IndirectGoal::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_IndirectGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.IndirectGoal.by_bot)
  return by_bot_;
}
inline void GameEvent_IndirectGoal::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.IndirectGoal.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_IndirectGoal::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_IndirectGoal::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_IndirectGoal::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_IndirectGoal::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_IndirectGoal::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.IndirectGoal.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_IndirectGoal::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.IndirectGoal.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_IndirectGoal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.IndirectGoal.location)
  return location_;
}
inline void GameEvent_IndirectGoal::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.IndirectGoal.location)
}

// optional .ssl_protos.gc.Vector2 kick_location = 4;
inline bool GameEvent_IndirectGoal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_IndirectGoal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_IndirectGoal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_IndirectGoal::_internal_kick_location() const {
  return *kick_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_IndirectGoal::kick_location() const {
  const ::ssl_protos::gc::Vector2* p = kick_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.IndirectGoal.kick_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_IndirectGoal::release_kick_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.IndirectGoal.kick_location)
  clear_has_kick_location();
  ::ssl_protos::gc::Vector2* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_IndirectGoal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    kick_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.IndirectGoal.kick_location)
  return kick_location_;
}
inline void GameEvent_IndirectGoal::set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kick_location_);
  }
  if (kick_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kick_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick_location, submessage_arena);
    }
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  kick_location_ = kick_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.IndirectGoal.kick_location)
}

// -------------------------------------------------------------------

// GameEvent_ChippedGoal

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_ChippedGoal::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_ChippedGoal::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_ChippedGoal::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_ChippedGoal::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_ChippedGoal::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChippedGoal.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_ChippedGoal::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.ChippedGoal.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_ChippedGoal::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_ChippedGoal::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_ChippedGoal::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_ChippedGoal::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_ChippedGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChippedGoal.by_bot)
  return by_bot_;
}
inline void GameEvent_ChippedGoal::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.ChippedGoal.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_ChippedGoal::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_ChippedGoal::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_ChippedGoal::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_ChippedGoal::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_ChippedGoal::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChippedGoal.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_ChippedGoal::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.ChippedGoal.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_ChippedGoal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.ChippedGoal.location)
  return location_;
}
inline void GameEvent_ChippedGoal::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.ChippedGoal.location)
}

// optional .ssl_protos.gc.Vector2 kick_location = 4;
inline bool GameEvent_ChippedGoal::has_kick_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_ChippedGoal::set_has_kick_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_ChippedGoal::clear_has_kick_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_ChippedGoal::_internal_kick_location() const {
  return *kick_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_ChippedGoal::kick_location() const {
  const ::ssl_protos::gc::Vector2* p = kick_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChippedGoal.kick_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_ChippedGoal::release_kick_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.ChippedGoal.kick_location)
  clear_has_kick_location();
  ::ssl_protos::gc::Vector2* temp = kick_location_;
  kick_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_ChippedGoal::mutable_kick_location() {
  set_has_kick_location();
  if (kick_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    kick_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.ChippedGoal.kick_location)
  return kick_location_;
}
inline void GameEvent_ChippedGoal::set_allocated_kick_location(::ssl_protos::gc::Vector2* kick_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kick_location_);
  }
  if (kick_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kick_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick_location, submessage_arena);
    }
    set_has_kick_location();
  } else {
    clear_has_kick_location();
  }
  kick_location_ = kick_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.ChippedGoal.kick_location)
}

// optional float max_ball_height = 5;
inline bool GameEvent_ChippedGoal::has_max_ball_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_ChippedGoal::set_has_max_ball_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_ChippedGoal::clear_has_max_ball_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_ChippedGoal::clear_max_ball_height() {
  max_ball_height_ = 0;
  clear_has_max_ball_height();
}
inline float GameEvent_ChippedGoal::max_ball_height() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChippedGoal.max_ball_height)
  return max_ball_height_;
}
inline void GameEvent_ChippedGoal::set_max_ball_height(float value) {
  set_has_max_ball_height();
  max_ball_height_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.ChippedGoal.max_ball_height)
}

// -------------------------------------------------------------------

// GameEvent_BotTooFastInStop

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotTooFastInStop::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotTooFastInStop::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotTooFastInStop::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotTooFastInStop::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotTooFastInStop::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTooFastInStop.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotTooFastInStop::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotTooFastInStop.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotTooFastInStop::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotTooFastInStop::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotTooFastInStop::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotTooFastInStop::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotTooFastInStop::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTooFastInStop.by_bot)
  return by_bot_;
}
inline void GameEvent_BotTooFastInStop::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotTooFastInStop.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotTooFastInStop::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotTooFastInStop::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotTooFastInStop::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTooFastInStop::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTooFastInStop::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTooFastInStop.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTooFastInStop::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotTooFastInStop.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTooFastInStop::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotTooFastInStop.location)
  return location_;
}
inline void GameEvent_BotTooFastInStop::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotTooFastInStop.location)
}

// optional float speed = 4;
inline bool GameEvent_BotTooFastInStop::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotTooFastInStop::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotTooFastInStop::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotTooFastInStop::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float GameEvent_BotTooFastInStop::speed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTooFastInStop.speed)
  return speed_;
}
inline void GameEvent_BotTooFastInStop::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotTooFastInStop.speed)
}

// -------------------------------------------------------------------

// GameEvent_DefenderTooCloseToKickPoint

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_DefenderTooCloseToKickPoint::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_DefenderTooCloseToKickPoint::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.by_bot)
  return by_bot_;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderTooCloseToKickPoint::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderTooCloseToKickPoint::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderTooCloseToKickPoint::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderTooCloseToKickPoint::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.location)
  return location_;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_DefenderTooCloseToKickPoint::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.distance)
  return distance_;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint.distance)
}

// -------------------------------------------------------------------

// GameEvent_BotCrashDrawn

// optional uint32 bot_yellow = 1;
inline bool GameEvent_BotCrashDrawn::has_bot_yellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_bot_yellow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotCrashDrawn::clear_has_bot_yellow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotCrashDrawn::clear_bot_yellow() {
  bot_yellow_ = 0u;
  clear_has_bot_yellow();
}
inline ::google::protobuf::uint32 GameEvent_BotCrashDrawn::bot_yellow() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.bot_yellow)
  return bot_yellow_;
}
inline void GameEvent_BotCrashDrawn::set_bot_yellow(::google::protobuf::uint32 value) {
  set_has_bot_yellow();
  bot_yellow_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashDrawn.bot_yellow)
}

// optional uint32 bot_blue = 2;
inline bool GameEvent_BotCrashDrawn::has_bot_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_bot_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotCrashDrawn::clear_has_bot_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotCrashDrawn::clear_bot_blue() {
  bot_blue_ = 0u;
  clear_has_bot_blue();
}
inline ::google::protobuf::uint32 GameEvent_BotCrashDrawn::bot_blue() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.bot_blue)
  return bot_blue_;
}
inline void GameEvent_BotCrashDrawn::set_bot_blue(::google::protobuf::uint32 value) {
  set_has_bot_blue();
  bot_blue_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashDrawn.bot_blue)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotCrashDrawn::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotCrashDrawn::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotCrashDrawn::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotCrashDrawn::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotCrashDrawn::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotCrashDrawn.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotCrashDrawn::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotCrashDrawn.location)
  return location_;
}
inline void GameEvent_BotCrashDrawn::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotCrashDrawn.location)
}

// optional float crash_speed = 4;
inline bool GameEvent_BotCrashDrawn::has_crash_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_crash_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotCrashDrawn::clear_has_crash_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotCrashDrawn::clear_crash_speed() {
  crash_speed_ = 0;
  clear_has_crash_speed();
}
inline float GameEvent_BotCrashDrawn::crash_speed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.crash_speed)
  return crash_speed_;
}
inline void GameEvent_BotCrashDrawn::set_crash_speed(float value) {
  set_has_crash_speed();
  crash_speed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashDrawn.crash_speed)
}

// optional float speed_diff = 5;
inline bool GameEvent_BotCrashDrawn::has_speed_diff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_speed_diff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_BotCrashDrawn::clear_has_speed_diff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_BotCrashDrawn::clear_speed_diff() {
  speed_diff_ = 0;
  clear_has_speed_diff();
}
inline float GameEvent_BotCrashDrawn::speed_diff() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.speed_diff)
  return speed_diff_;
}
inline void GameEvent_BotCrashDrawn::set_speed_diff(float value) {
  set_has_speed_diff();
  speed_diff_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashDrawn.speed_diff)
}

// optional float crash_angle = 6;
inline bool GameEvent_BotCrashDrawn::has_crash_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEvent_BotCrashDrawn::set_has_crash_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEvent_BotCrashDrawn::clear_has_crash_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEvent_BotCrashDrawn::clear_crash_angle() {
  crash_angle_ = 0;
  clear_has_crash_angle();
}
inline float GameEvent_BotCrashDrawn::crash_angle() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashDrawn.crash_angle)
  return crash_angle_;
}
inline void GameEvent_BotCrashDrawn::set_crash_angle(float value) {
  set_has_crash_angle();
  crash_angle_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashDrawn.crash_angle)
}

// -------------------------------------------------------------------

// GameEvent_BotCrashUnique

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotCrashUnique::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotCrashUnique::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotCrashUnique::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotCrashUnique::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotCrashUnique::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.by_team)
}

// optional uint32 violator = 2;
inline bool GameEvent_BotCrashUnique::has_violator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_violator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotCrashUnique::clear_has_violator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotCrashUnique::clear_violator() {
  violator_ = 0u;
  clear_has_violator();
}
inline ::google::protobuf::uint32 GameEvent_BotCrashUnique::violator() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.violator)
  return violator_;
}
inline void GameEvent_BotCrashUnique::set_violator(::google::protobuf::uint32 value) {
  set_has_violator();
  violator_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.violator)
}

// optional uint32 victim = 3;
inline bool GameEvent_BotCrashUnique::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotCrashUnique::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotCrashUnique::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
inline ::google::protobuf::uint32 GameEvent_BotCrashUnique::victim() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.victim)
  return victim_;
}
inline void GameEvent_BotCrashUnique::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.victim)
}

// optional .ssl_protos.gc.Vector2 location = 4;
inline bool GameEvent_BotCrashUnique::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotCrashUnique::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotCrashUnique::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotCrashUnique::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotCrashUnique::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotCrashUnique.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotCrashUnique::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotCrashUnique.location)
  return location_;
}
inline void GameEvent_BotCrashUnique::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotCrashUnique.location)
}

// optional float crash_speed = 5;
inline bool GameEvent_BotCrashUnique::has_crash_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_crash_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_BotCrashUnique::clear_has_crash_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_BotCrashUnique::clear_crash_speed() {
  crash_speed_ = 0;
  clear_has_crash_speed();
}
inline float GameEvent_BotCrashUnique::crash_speed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.crash_speed)
  return crash_speed_;
}
inline void GameEvent_BotCrashUnique::set_crash_speed(float value) {
  set_has_crash_speed();
  crash_speed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.crash_speed)
}

// optional float speed_diff = 6;
inline bool GameEvent_BotCrashUnique::has_speed_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_speed_diff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEvent_BotCrashUnique::clear_has_speed_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEvent_BotCrashUnique::clear_speed_diff() {
  speed_diff_ = 0;
  clear_has_speed_diff();
}
inline float GameEvent_BotCrashUnique::speed_diff() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.speed_diff)
  return speed_diff_;
}
inline void GameEvent_BotCrashUnique::set_speed_diff(float value) {
  set_has_speed_diff();
  speed_diff_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.speed_diff)
}

// optional float crash_angle = 7;
inline bool GameEvent_BotCrashUnique::has_crash_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameEvent_BotCrashUnique::set_has_crash_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameEvent_BotCrashUnique::clear_has_crash_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameEvent_BotCrashUnique::clear_crash_angle() {
  crash_angle_ = 0;
  clear_has_crash_angle();
}
inline float GameEvent_BotCrashUnique::crash_angle() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotCrashUnique.crash_angle)
  return crash_angle_;
}
inline void GameEvent_BotCrashUnique::set_crash_angle(float value) {
  set_has_crash_angle();
  crash_angle_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotCrashUnique.crash_angle)
}

// -------------------------------------------------------------------

// GameEvent_BotPushedBot

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotPushedBot::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotPushedBot::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotPushedBot::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotPushedBot::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotPushedBot::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotPushedBot.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotPushedBot::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotPushedBot.by_team)
}

// optional uint32 violator = 2;
inline bool GameEvent_BotPushedBot::has_violator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotPushedBot::set_has_violator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotPushedBot::clear_has_violator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotPushedBot::clear_violator() {
  violator_ = 0u;
  clear_has_violator();
}
inline ::google::protobuf::uint32 GameEvent_BotPushedBot::violator() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotPushedBot.violator)
  return violator_;
}
inline void GameEvent_BotPushedBot::set_violator(::google::protobuf::uint32 value) {
  set_has_violator();
  violator_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotPushedBot.violator)
}

// optional uint32 victim = 3;
inline bool GameEvent_BotPushedBot::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotPushedBot::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotPushedBot::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotPushedBot::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
inline ::google::protobuf::uint32 GameEvent_BotPushedBot::victim() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotPushedBot.victim)
  return victim_;
}
inline void GameEvent_BotPushedBot::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotPushedBot.victim)
}

// optional .ssl_protos.gc.Vector2 location = 4;
inline bool GameEvent_BotPushedBot::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotPushedBot::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotPushedBot::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotPushedBot::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotPushedBot::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotPushedBot.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotPushedBot::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotPushedBot.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotPushedBot::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotPushedBot.location)
  return location_;
}
inline void GameEvent_BotPushedBot::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotPushedBot.location)
}

// optional float pushed_distance = 5;
inline bool GameEvent_BotPushedBot::has_pushed_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_BotPushedBot::set_has_pushed_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_BotPushedBot::clear_has_pushed_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_BotPushedBot::clear_pushed_distance() {
  pushed_distance_ = 0;
  clear_has_pushed_distance();
}
inline float GameEvent_BotPushedBot::pushed_distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotPushedBot.pushed_distance)
  return pushed_distance_;
}
inline void GameEvent_BotPushedBot::set_pushed_distance(float value) {
  set_has_pushed_distance();
  pushed_distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotPushedBot.pushed_distance)
}

// -------------------------------------------------------------------

// GameEvent_BotTippedOver

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotTippedOver::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotTippedOver::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotTippedOver::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotTippedOver::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotTippedOver::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTippedOver.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotTippedOver::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotTippedOver.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotTippedOver::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotTippedOver::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotTippedOver::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotTippedOver::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotTippedOver::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTippedOver.by_bot)
  return by_bot_;
}
inline void GameEvent_BotTippedOver::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotTippedOver.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotTippedOver::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotTippedOver::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotTippedOver::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTippedOver::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTippedOver::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTippedOver.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTippedOver::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotTippedOver.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTippedOver::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotTippedOver.location)
  return location_;
}
inline void GameEvent_BotTippedOver::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotTippedOver.location)
}

// optional .ssl_protos.gc.Vector2 ball_location = 4;
inline bool GameEvent_BotTippedOver::has_ball_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotTippedOver::set_has_ball_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotTippedOver::clear_has_ball_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTippedOver::_internal_ball_location() const {
  return *ball_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotTippedOver::ball_location() const {
  const ::ssl_protos::gc::Vector2* p = ball_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotTippedOver.ball_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTippedOver::release_ball_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotTippedOver.ball_location)
  clear_has_ball_location();
  ::ssl_protos::gc::Vector2* temp = ball_location_;
  ball_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotTippedOver::mutable_ball_location() {
  set_has_ball_location();
  if (ball_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    ball_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotTippedOver.ball_location)
  return ball_location_;
}
inline void GameEvent_BotTippedOver::set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ball_location_);
  }
  if (ball_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_location, submessage_arena);
    }
    set_has_ball_location();
  } else {
    clear_has_ball_location();
  }
  ball_location_ = ball_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotTippedOver.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_DefenderInDefenseArea

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_DefenderInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_DefenderInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_DefenderInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_DefenderInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_DefenderInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseArea.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_DefenderInDefenseArea::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_DefenderInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_DefenderInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_DefenderInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_DefenderInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseArea.by_bot)
  return by_bot_;
}
inline void GameEvent_DefenderInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseArea.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_DefenderInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_DefenderInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_DefenderInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseArea::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseArea::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseArea.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.DefenderInDefenseArea.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.DefenderInDefenseArea.location)
  return location_;
}
inline void GameEvent_DefenderInDefenseArea::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.DefenderInDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderInDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_DefenderInDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_DefenderInDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_DefenderInDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_DefenderInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseArea.distance)
  return distance_;
}
inline void GameEvent_DefenderInDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseArea.distance)
}

// -------------------------------------------------------------------

// GameEvent_DefenderInDefenseAreaPartially

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_DefenderInDefenseAreaPartially::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_DefenderInDefenseAreaPartially::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.by_bot)
  return by_bot_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseAreaPartially::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseAreaPartially::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseAreaPartially::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseAreaPartially::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.location)
  return location_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_DefenderInDefenseAreaPartially::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.distance)
  return distance_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.distance)
}

// optional .ssl_protos.gc.Vector2 ball_location = 5;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_ball_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_has_ball_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_has_ball_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseAreaPartially::_internal_ball_location() const {
  return *ball_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_DefenderInDefenseAreaPartially::ball_location() const {
  const ::ssl_protos::gc::Vector2* p = ball_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.ball_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseAreaPartially::release_ball_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.ball_location)
  clear_has_ball_location();
  ::ssl_protos::gc::Vector2* temp = ball_location_;
  ball_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_DefenderInDefenseAreaPartially::mutable_ball_location() {
  set_has_ball_location();
  if (ball_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    ball_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.ball_location)
  return ball_location_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ball_location_);
  }
  if (ball_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_location, submessage_arena);
    }
    set_has_ball_location();
  } else {
    clear_has_ball_location();
  }
  ball_location_ = ball_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTouchedBallInDefenseArea

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_AttackerTouchedBallInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_AttackerTouchedBallInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
  return by_bot_;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTouchedBallInDefenseArea::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTouchedBallInDefenseArea::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.location)
  return location_;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_AttackerTouchedBallInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.distance)
  return distance_;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea.distance)
}

// -------------------------------------------------------------------

// GameEvent_BotKickedBallTooFast

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotKickedBallTooFast::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotKickedBallTooFast::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotKickedBallTooFast::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotKickedBallTooFast::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotKickedBallTooFast::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotKickedBallTooFast.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotKickedBallTooFast::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotKickedBallTooFast.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotKickedBallTooFast::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotKickedBallTooFast::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotKickedBallTooFast::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotKickedBallTooFast::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotKickedBallTooFast::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotKickedBallTooFast.by_bot)
  return by_bot_;
}
inline void GameEvent_BotKickedBallTooFast::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotKickedBallTooFast.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotKickedBallTooFast::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotKickedBallTooFast::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotKickedBallTooFast::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotKickedBallTooFast::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotKickedBallTooFast::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotKickedBallTooFast.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotKickedBallTooFast::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotKickedBallTooFast.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotKickedBallTooFast::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotKickedBallTooFast.location)
  return location_;
}
inline void GameEvent_BotKickedBallTooFast::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotKickedBallTooFast.location)
}

// optional float initial_ball_speed = 4;
inline bool GameEvent_BotKickedBallTooFast::has_initial_ball_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotKickedBallTooFast::set_has_initial_ball_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotKickedBallTooFast::clear_has_initial_ball_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotKickedBallTooFast::clear_initial_ball_speed() {
  initial_ball_speed_ = 0;
  clear_has_initial_ball_speed();
}
inline float GameEvent_BotKickedBallTooFast::initial_ball_speed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotKickedBallTooFast.initial_ball_speed)
  return initial_ball_speed_;
}
inline void GameEvent_BotKickedBallTooFast::set_initial_ball_speed(float value) {
  set_has_initial_ball_speed();
  initial_ball_speed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotKickedBallTooFast.initial_ball_speed)
}

// optional bool chipped = 5;
inline bool GameEvent_BotKickedBallTooFast::has_chipped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_BotKickedBallTooFast::set_has_chipped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_BotKickedBallTooFast::clear_has_chipped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_BotKickedBallTooFast::clear_chipped() {
  chipped_ = false;
  clear_has_chipped();
}
inline bool GameEvent_BotKickedBallTooFast::chipped() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotKickedBallTooFast.chipped)
  return chipped_;
}
inline void GameEvent_BotKickedBallTooFast::set_chipped(bool value) {
  set_has_chipped();
  chipped_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotKickedBallTooFast.chipped)
}

// -------------------------------------------------------------------

// GameEvent_BotDribbledBallTooFar

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotDribbledBallTooFar::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotDribbledBallTooFar::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotDribbledBallTooFar::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotDribbledBallTooFar::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotDribbledBallTooFar::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotDribbledBallTooFar::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotDribbledBallTooFar::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.by_bot)
  return by_bot_;
}
inline void GameEvent_BotDribbledBallTooFar::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.by_bot)
}

// optional .ssl_protos.gc.Vector2 start = 3;
inline bool GameEvent_BotDribbledBallTooFar::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotDribbledBallTooFar::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotDribbledBallTooFar::_internal_start() const {
  return *start_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotDribbledBallTooFar::start() const {
  const ::ssl_protos::gc::Vector2* p = start_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.start)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotDribbledBallTooFar::release_start() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.start)
  clear_has_start();
  ::ssl_protos::gc::Vector2* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotDribbledBallTooFar::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.start)
  return start_;
}
inline void GameEvent_BotDribbledBallTooFar::set_allocated_start(::ssl_protos::gc::Vector2* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
  } else {
    clear_has_start();
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.start)
}

// optional .ssl_protos.gc.Vector2 end = 4;
inline bool GameEvent_BotDribbledBallTooFar::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotDribbledBallTooFar::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotDribbledBallTooFar::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotDribbledBallTooFar::_internal_end() const {
  return *end_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotDribbledBallTooFar::end() const {
  const ::ssl_protos::gc::Vector2* p = end_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.end)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotDribbledBallTooFar::release_end() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.end)
  clear_has_end();
  ::ssl_protos::gc::Vector2* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotDribbledBallTooFar::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.end)
  return end_;
}
inline void GameEvent_BotDribbledBallTooFar::set_allocated_end(::ssl_protos::gc::Vector2* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_);
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
  } else {
    clear_has_end();
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotDribbledBallTooFar.end)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTouchedOpponentInDefenseArea

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_AttackerTouchedOpponentInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_AttackerTouchedOpponentInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
  return by_bot_;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
}

// optional uint32 victim = 4;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_victim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_victim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_victim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_victim() {
  victim_ = 0u;
  clear_has_victim();
}
inline ::google::protobuf::uint32 GameEvent_AttackerTouchedOpponentInDefenseArea::victim() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
  return victim_;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_victim(::google::protobuf::uint32 value) {
  set_has_victim();
  victim_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTouchedOpponentInDefenseArea::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return location_;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea.location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerDoubleTouchedBall

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_AttackerDoubleTouchedBall::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_AttackerDoubleTouchedBall::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_AttackerDoubleTouchedBall::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerDoubleTouchedBall::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_AttackerDoubleTouchedBall::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.by_bot)
  return by_bot_;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_AttackerDoubleTouchedBall::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerDoubleTouchedBall::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerDoubleTouchedBall::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerDoubleTouchedBall::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerDoubleTouchedBall::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.location)
  return location_;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall.location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTooCloseToDefenseArea

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_by_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_has_by_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_AttackerTooCloseToDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_by_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_has_by_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_AttackerTooCloseToDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.by_bot)
  return by_bot_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTooCloseToDefenseArea::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTooCloseToDefenseArea::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTooCloseToDefenseArea::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTooCloseToDefenseArea::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.location)
  return location_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_AttackerTooCloseToDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.distance)
  return distance_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.distance)
}

// optional .ssl_protos.gc.Vector2 ball_location = 5;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_ball_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_has_ball_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_has_ball_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTooCloseToDefenseArea::_internal_ball_location() const {
  return *ball_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_AttackerTooCloseToDefenseArea::ball_location() const {
  const ::ssl_protos::gc::Vector2* p = ball_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.ball_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTooCloseToDefenseArea::release_ball_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.ball_location)
  clear_has_ball_location();
  ::ssl_protos::gc::Vector2* temp = ball_location_;
  ball_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_AttackerTooCloseToDefenseArea::mutable_ball_location() {
  set_has_ball_location();
  if (ball_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    ball_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.ball_location)
  return ball_location_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ball_location_);
  }
  if (ball_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_location, submessage_arena);
    }
    set_has_ball_location();
  } else {
    clear_has_ball_location();
  }
  ball_location_ = ball_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_BotHeldBallDeliberately

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotHeldBallDeliberately::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotHeldBallDeliberately::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotHeldBallDeliberately::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotHeldBallDeliberately::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotHeldBallDeliberately::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotHeldBallDeliberately::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotHeldBallDeliberately::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.by_bot)
  return by_bot_;
}
inline void GameEvent_BotHeldBallDeliberately::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotHeldBallDeliberately::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotHeldBallDeliberately::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotHeldBallDeliberately::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotHeldBallDeliberately::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotHeldBallDeliberately::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotHeldBallDeliberately::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.location)
  return location_;
}
inline void GameEvent_BotHeldBallDeliberately::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.location)
}

// optional float duration = 4;
inline bool GameEvent_BotHeldBallDeliberately::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_BotHeldBallDeliberately::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_BotHeldBallDeliberately::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float GameEvent_BotHeldBallDeliberately::duration() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.duration)
  return duration_;
}
inline void GameEvent_BotHeldBallDeliberately::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotHeldBallDeliberately.duration)
}

// -------------------------------------------------------------------

// GameEvent_BotInterferedPlacement

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotInterferedPlacement::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BotInterferedPlacement::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BotInterferedPlacement::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BotInterferedPlacement::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotInterferedPlacement::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotInterferedPlacement.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotInterferedPlacement::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotInterferedPlacement.by_team)
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotInterferedPlacement::has_by_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_BotInterferedPlacement::set_has_by_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_BotInterferedPlacement::clear_has_by_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_BotInterferedPlacement::clear_by_bot() {
  by_bot_ = 0u;
  clear_has_by_bot();
}
inline ::google::protobuf::uint32 GameEvent_BotInterferedPlacement::by_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotInterferedPlacement.by_bot)
  return by_bot_;
}
inline void GameEvent_BotInterferedPlacement::set_by_bot(::google::protobuf::uint32 value) {
  set_has_by_bot();
  by_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotInterferedPlacement.by_bot)
}

// optional .ssl_protos.gc.Vector2 location = 3;
inline bool GameEvent_BotInterferedPlacement::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotInterferedPlacement::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotInterferedPlacement::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotInterferedPlacement::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BotInterferedPlacement::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotInterferedPlacement.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotInterferedPlacement::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BotInterferedPlacement.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BotInterferedPlacement::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BotInterferedPlacement.location)
  return location_;
}
inline void GameEvent_BotInterferedPlacement::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BotInterferedPlacement.location)
}

// -------------------------------------------------------------------

// GameEvent_MultipleCards

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_MultipleCards::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_MultipleCards::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_MultipleCards::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_MultipleCards::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_MultipleCards::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.MultipleCards.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_MultipleCards::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.MultipleCards.by_team)
}

// -------------------------------------------------------------------

// GameEvent_MultipleFouls

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_MultipleFouls::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_MultipleFouls::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_MultipleFouls::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_MultipleFouls::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_MultipleFouls::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.MultipleFouls.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_MultipleFouls::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.MultipleFouls.by_team)
}

// -------------------------------------------------------------------

// GameEvent_MultiplePlacementFailures

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_MultiplePlacementFailures::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_MultiplePlacementFailures::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_MultiplePlacementFailures::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_MultiplePlacementFailures::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_MultiplePlacementFailures::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.MultiplePlacementFailures.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_MultiplePlacementFailures::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.MultiplePlacementFailures.by_team)
}

// -------------------------------------------------------------------

// GameEvent_KickTimeout

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_KickTimeout::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_KickTimeout::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_KickTimeout::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_KickTimeout::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_KickTimeout::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KickTimeout.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_KickTimeout::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.KickTimeout.by_team)
}

// optional .ssl_protos.gc.Vector2 location = 2;
inline bool GameEvent_KickTimeout::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_KickTimeout::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_KickTimeout::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_KickTimeout::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_KickTimeout::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KickTimeout.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_KickTimeout::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.KickTimeout.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_KickTimeout::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.KickTimeout.location)
  return location_;
}
inline void GameEvent_KickTimeout::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.KickTimeout.location)
}

// optional float time = 3;
inline bool GameEvent_KickTimeout::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_KickTimeout::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_KickTimeout::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_KickTimeout::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float GameEvent_KickTimeout::time() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KickTimeout.time)
  return time_;
}
inline void GameEvent_KickTimeout::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.KickTimeout.time)
}

// -------------------------------------------------------------------

// GameEvent_NoProgressInGame

// optional .ssl_protos.gc.Vector2 location = 1;
inline bool GameEvent_NoProgressInGame::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_NoProgressInGame::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_NoProgressInGame::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_NoProgressInGame::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_NoProgressInGame::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.NoProgressInGame.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_NoProgressInGame::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.NoProgressInGame.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_NoProgressInGame::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.NoProgressInGame.location)
  return location_;
}
inline void GameEvent_NoProgressInGame::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.NoProgressInGame.location)
}

// optional float time = 2;
inline bool GameEvent_NoProgressInGame::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_NoProgressInGame::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_NoProgressInGame::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_NoProgressInGame::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float GameEvent_NoProgressInGame::time() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.NoProgressInGame.time)
  return time_;
}
inline void GameEvent_NoProgressInGame::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.NoProgressInGame.time)
}

// -------------------------------------------------------------------

// GameEvent_PlacementFailed

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_PlacementFailed::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_PlacementFailed::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_PlacementFailed::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_PlacementFailed::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_PlacementFailed::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementFailed.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_PlacementFailed::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementFailed.by_team)
}

// optional float remaining_distance = 2;
inline bool GameEvent_PlacementFailed::has_remaining_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_PlacementFailed::set_has_remaining_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_PlacementFailed::clear_has_remaining_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_PlacementFailed::clear_remaining_distance() {
  remaining_distance_ = 0;
  clear_has_remaining_distance();
}
inline float GameEvent_PlacementFailed::remaining_distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementFailed.remaining_distance)
  return remaining_distance_;
}
inline void GameEvent_PlacementFailed::set_remaining_distance(float value) {
  set_has_remaining_distance();
  remaining_distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementFailed.remaining_distance)
}

// -------------------------------------------------------------------

// GameEvent_UnsportingBehaviorMinor

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_UnsportingBehaviorMinor::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_UnsportingBehaviorMinor::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_UnsportingBehaviorMinor::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_UnsportingBehaviorMinor::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.by_team)
}

// required string reason = 2;
inline bool GameEvent_UnsportingBehaviorMinor::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_UnsportingBehaviorMinor::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& GameEvent_UnsportingBehaviorMinor::reason() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
  return reason_.GetNoArena();
}
inline void GameEvent_UnsportingBehaviorMinor::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
}
#if LANG_CXX11
inline void GameEvent_UnsportingBehaviorMinor::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
}
#endif
inline void GameEvent_UnsportingBehaviorMinor::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
}
inline void GameEvent_UnsportingBehaviorMinor::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
}
inline ::std::string* GameEvent_UnsportingBehaviorMinor::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEvent_UnsportingBehaviorMinor::release_reason() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
  if (!has_reason()) {
    return NULL;
  }
  clear_has_reason();
  return reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEvent_UnsportingBehaviorMinor::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.UnsportingBehaviorMinor.reason)
}

// -------------------------------------------------------------------

// GameEvent_UnsportingBehaviorMajor

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_UnsportingBehaviorMajor::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_UnsportingBehaviorMajor::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_UnsportingBehaviorMajor::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_UnsportingBehaviorMajor::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.by_team)
}

// required string reason = 2;
inline bool GameEvent_UnsportingBehaviorMajor::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_UnsportingBehaviorMajor::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& GameEvent_UnsportingBehaviorMajor::reason() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
  return reason_.GetNoArena();
}
inline void GameEvent_UnsportingBehaviorMajor::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
}
#if LANG_CXX11
inline void GameEvent_UnsportingBehaviorMajor::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
}
#endif
inline void GameEvent_UnsportingBehaviorMajor::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
}
inline void GameEvent_UnsportingBehaviorMajor::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
}
inline ::std::string* GameEvent_UnsportingBehaviorMajor::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameEvent_UnsportingBehaviorMajor::release_reason() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
  if (!has_reason()) {
    return NULL;
  }
  clear_has_reason();
  return reason_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameEvent_UnsportingBehaviorMajor::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.UnsportingBehaviorMajor.reason)
}

// -------------------------------------------------------------------

// GameEvent_KeeperHeldBall

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_KeeperHeldBall::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_KeeperHeldBall::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_KeeperHeldBall::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_KeeperHeldBall::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_KeeperHeldBall::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KeeperHeldBall.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_KeeperHeldBall::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.KeeperHeldBall.by_team)
}

// optional .ssl_protos.gc.Vector2 location = 2;
inline bool GameEvent_KeeperHeldBall::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_KeeperHeldBall::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_KeeperHeldBall::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_KeeperHeldBall::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_KeeperHeldBall::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KeeperHeldBall.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_KeeperHeldBall::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.KeeperHeldBall.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_KeeperHeldBall::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.KeeperHeldBall.location)
  return location_;
}
inline void GameEvent_KeeperHeldBall::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.KeeperHeldBall.location)
}

// optional float duration = 3;
inline bool GameEvent_KeeperHeldBall::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_KeeperHeldBall::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_KeeperHeldBall::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_KeeperHeldBall::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float GameEvent_KeeperHeldBall::duration() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.KeeperHeldBall.duration)
  return duration_;
}
inline void GameEvent_KeeperHeldBall::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.KeeperHeldBall.duration)
}

// -------------------------------------------------------------------

// GameEvent_PlacementSucceeded

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_PlacementSucceeded::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_PlacementSucceeded::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_PlacementSucceeded::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_PlacementSucceeded::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_PlacementSucceeded::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementSucceeded.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_PlacementSucceeded::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementSucceeded.by_team)
}

// optional float time_taken = 2;
inline bool GameEvent_PlacementSucceeded::has_time_taken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_PlacementSucceeded::set_has_time_taken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_PlacementSucceeded::clear_has_time_taken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_PlacementSucceeded::clear_time_taken() {
  time_taken_ = 0;
  clear_has_time_taken();
}
inline float GameEvent_PlacementSucceeded::time_taken() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementSucceeded.time_taken)
  return time_taken_;
}
inline void GameEvent_PlacementSucceeded::set_time_taken(float value) {
  set_has_time_taken();
  time_taken_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementSucceeded.time_taken)
}

// optional float precision = 3;
inline bool GameEvent_PlacementSucceeded::has_precision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_PlacementSucceeded::set_has_precision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_PlacementSucceeded::clear_has_precision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_PlacementSucceeded::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline float GameEvent_PlacementSucceeded::precision() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementSucceeded.precision)
  return precision_;
}
inline void GameEvent_PlacementSucceeded::set_precision(float value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementSucceeded.precision)
}

// optional float distance = 4;
inline bool GameEvent_PlacementSucceeded::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_PlacementSucceeded::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_PlacementSucceeded::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_PlacementSucceeded::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float GameEvent_PlacementSucceeded::distance() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PlacementSucceeded.distance)
  return distance_;
}
inline void GameEvent_PlacementSucceeded::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PlacementSucceeded.distance)
}

// -------------------------------------------------------------------

// GameEvent_Prepared

// optional float time_taken = 1;
inline bool GameEvent_Prepared::has_time_taken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_Prepared::set_has_time_taken() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_Prepared::clear_has_time_taken() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_Prepared::clear_time_taken() {
  time_taken_ = 0;
  clear_has_time_taken();
}
inline float GameEvent_Prepared::time_taken() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.Prepared.time_taken)
  return time_taken_;
}
inline void GameEvent_Prepared::set_time_taken(float value) {
  set_has_time_taken();
  time_taken_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.Prepared.time_taken)
}

// -------------------------------------------------------------------

// GameEvent_BotSubstitution

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BotSubstitution::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BotSubstitution::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BotSubstitution::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_BotSubstitution::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BotSubstitution::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BotSubstitution.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BotSubstitution::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BotSubstitution.by_team)
}

// -------------------------------------------------------------------

// GameEvent_ChallengeFlag

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_ChallengeFlag::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_ChallengeFlag::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_ChallengeFlag::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_ChallengeFlag::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_ChallengeFlag::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ChallengeFlag.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_ChallengeFlag::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.ChallengeFlag.by_team)
}

// -------------------------------------------------------------------

// GameEvent_EmergencyStop

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_EmergencyStop::has_by_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_EmergencyStop::set_has_by_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_EmergencyStop::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent_EmergencyStop::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_EmergencyStop::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.EmergencyStop.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_EmergencyStop::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.EmergencyStop.by_team)
}

// -------------------------------------------------------------------

// GameEvent_TooManyRobots

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_TooManyRobots::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_TooManyRobots::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_TooManyRobots::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_TooManyRobots::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_TooManyRobots::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.TooManyRobots.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_TooManyRobots::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.TooManyRobots.by_team)
}

// optional int32 num_robots_allowed = 2;
inline bool GameEvent_TooManyRobots::has_num_robots_allowed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEvent_TooManyRobots::set_has_num_robots_allowed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEvent_TooManyRobots::clear_has_num_robots_allowed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEvent_TooManyRobots::clear_num_robots_allowed() {
  num_robots_allowed_ = 0;
  clear_has_num_robots_allowed();
}
inline ::google::protobuf::int32 GameEvent_TooManyRobots::num_robots_allowed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.TooManyRobots.num_robots_allowed)
  return num_robots_allowed_;
}
inline void GameEvent_TooManyRobots::set_num_robots_allowed(::google::protobuf::int32 value) {
  set_has_num_robots_allowed();
  num_robots_allowed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.TooManyRobots.num_robots_allowed)
}

// optional int32 num_robots_on_field = 3;
inline bool GameEvent_TooManyRobots::has_num_robots_on_field() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEvent_TooManyRobots::set_has_num_robots_on_field() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEvent_TooManyRobots::clear_has_num_robots_on_field() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEvent_TooManyRobots::clear_num_robots_on_field() {
  num_robots_on_field_ = 0;
  clear_has_num_robots_on_field();
}
inline ::google::protobuf::int32 GameEvent_TooManyRobots::num_robots_on_field() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.TooManyRobots.num_robots_on_field)
  return num_robots_on_field_;
}
inline void GameEvent_TooManyRobots::set_num_robots_on_field(::google::protobuf::int32 value) {
  set_has_num_robots_on_field();
  num_robots_on_field_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.TooManyRobots.num_robots_on_field)
}

// optional .ssl_protos.gc.Vector2 ball_location = 4;
inline bool GameEvent_TooManyRobots::has_ball_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_TooManyRobots::set_has_ball_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_TooManyRobots::clear_has_ball_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_TooManyRobots::_internal_ball_location() const {
  return *ball_location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_TooManyRobots::ball_location() const {
  const ::ssl_protos::gc::Vector2* p = ball_location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.TooManyRobots.ball_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_TooManyRobots::release_ball_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.TooManyRobots.ball_location)
  clear_has_ball_location();
  ::ssl_protos::gc::Vector2* temp = ball_location_;
  ball_location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_TooManyRobots::mutable_ball_location() {
  set_has_ball_location();
  if (ball_location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    ball_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.TooManyRobots.ball_location)
  return ball_location_;
}
inline void GameEvent_TooManyRobots::set_allocated_ball_location(::ssl_protos::gc::Vector2* ball_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ball_location_);
  }
  if (ball_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball_location, submessage_arena);
    }
    set_has_ball_location();
  } else {
    clear_has_ball_location();
  }
  ball_location_ = ball_location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.TooManyRobots.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_BoundaryCrossing

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_BoundaryCrossing::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_BoundaryCrossing::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_BoundaryCrossing::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_BoundaryCrossing::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_BoundaryCrossing::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BoundaryCrossing.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_BoundaryCrossing::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.BoundaryCrossing.by_team)
}

// optional .ssl_protos.gc.Vector2 location = 2;
inline bool GameEvent_BoundaryCrossing::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_BoundaryCrossing::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_BoundaryCrossing::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BoundaryCrossing::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_BoundaryCrossing::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.BoundaryCrossing.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_BoundaryCrossing::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.BoundaryCrossing.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_BoundaryCrossing::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.BoundaryCrossing.location)
  return location_;
}
inline void GameEvent_BoundaryCrossing::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.BoundaryCrossing.location)
}

// -------------------------------------------------------------------

// GameEvent_PenaltyKickFailed

// required .ssl_protos.gc.Team by_team = 1;
inline bool GameEvent_PenaltyKickFailed::has_by_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEvent_PenaltyKickFailed::set_has_by_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEvent_PenaltyKickFailed::clear_has_by_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEvent_PenaltyKickFailed::clear_by_team() {
  by_team_ = 0;
  clear_has_by_team();
}
inline ::ssl_protos::gc::Team GameEvent_PenaltyKickFailed::by_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PenaltyKickFailed.by_team)
  return static_cast< ::ssl_protos::gc::Team >(by_team_);
}
inline void GameEvent_PenaltyKickFailed::set_by_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_by_team();
  by_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.PenaltyKickFailed.by_team)
}

// optional .ssl_protos.gc.Vector2 location = 2;
inline bool GameEvent_PenaltyKickFailed::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent_PenaltyKickFailed::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent_PenaltyKickFailed::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_PenaltyKickFailed::_internal_location() const {
  return *location_;
}
inline const ::ssl_protos::gc::Vector2& GameEvent_PenaltyKickFailed::location() const {
  const ::ssl_protos::gc::Vector2* p = location_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.PenaltyKickFailed.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* GameEvent_PenaltyKickFailed::release_location() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.PenaltyKickFailed.location)
  clear_has_location();
  ::ssl_protos::gc::Vector2* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* GameEvent_PenaltyKickFailed::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.PenaltyKickFailed.location)
  return location_;
}
inline void GameEvent_PenaltyKickFailed::set_allocated_location(::ssl_protos::gc::Vector2* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GameEvent.PenaltyKickFailed.location)
}

// -------------------------------------------------------------------

// GameEvent

// optional .ssl_protos.gc.GameEvent.Type type = 40;
inline bool GameEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ssl_protos::gc::GameEvent_Type GameEvent::type() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.type)
  return static_cast< ::ssl_protos::gc::GameEvent_Type >(type_);
}
inline void GameEvent::set_type(::ssl_protos::gc::GameEvent_Type value) {
  assert(::ssl_protos::gc::GameEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.type)
}

// repeated string origin = 41;
inline int GameEvent::origin_size() const {
  return origin_.size();
}
inline void GameEvent::clear_origin() {
  origin_.Clear();
}
inline const ::std::string& GameEvent::origin(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.origin)
  return origin_.Get(index);
}
inline ::std::string* GameEvent::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.origin)
  return origin_.Mutable(index);
}
inline void GameEvent::set_origin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.origin)
  origin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameEvent::set_origin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameEvent.origin)
  origin_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameEvent::set_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GameEvent.origin)
}
inline void GameEvent::set_origin(int index, const char* value, size_t size) {
  origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GameEvent.origin)
}
inline ::std::string* GameEvent::add_origin() {
  // @@protoc_insertion_point(field_add_mutable:ssl_protos.gc.GameEvent.origin)
  return origin_.Add();
}
inline void GameEvent::add_origin(const ::std::string& value) {
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ssl_protos.gc.GameEvent.origin)
}
#if LANG_CXX11
inline void GameEvent::add_origin(::std::string&& value) {
  origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ssl_protos.gc.GameEvent.origin)
}
#endif
inline void GameEvent::add_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ssl_protos.gc.GameEvent.origin)
}
inline void GameEvent::add_origin(const char* value, size_t size) {
  origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ssl_protos.gc.GameEvent.origin)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GameEvent::origin() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.GameEvent.origin)
  return origin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GameEvent::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.GameEvent.origin)
  return &origin_;
}

// optional .ssl_protos.gc.GameEvent.BallLeftField ball_left_field_touch_line = 6;
inline bool GameEvent::has_ball_left_field_touch_line() const {
  return event_case() == kBallLeftFieldTouchLine;
}
inline void GameEvent::set_has_ball_left_field_touch_line() {
  _oneof_case_[0] = kBallLeftFieldTouchLine;
}
inline void GameEvent::clear_ball_left_field_touch_line() {
  if (has_ball_left_field_touch_line()) {
    delete event_.ball_left_field_touch_line_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BallLeftField& GameEvent::_internal_ball_left_field_touch_line() const {
  return *event_.ball_left_field_touch_line_;
}
inline ::ssl_protos::gc::GameEvent_BallLeftField* GameEvent::release_ball_left_field_touch_line() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.ball_left_field_touch_line)
  if (has_ball_left_field_touch_line()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BallLeftField* temp = event_.ball_left_field_touch_line_;
    event_.ball_left_field_touch_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BallLeftField& GameEvent::ball_left_field_touch_line() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ball_left_field_touch_line)
  return has_ball_left_field_touch_line()
      ? *event_.ball_left_field_touch_line_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BallLeftField*>(&::ssl_protos::gc::_GameEvent_BallLeftField_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_touch_line() {
  if (!has_ball_left_field_touch_line()) {
    clear_event();
    set_has_ball_left_field_touch_line();
    event_.ball_left_field_touch_line_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BallLeftField >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.ball_left_field_touch_line)
  return event_.ball_left_field_touch_line_;
}

// optional .ssl_protos.gc.GameEvent.BallLeftField ball_left_field_goal_line = 7;
inline bool GameEvent::has_ball_left_field_goal_line() const {
  return event_case() == kBallLeftFieldGoalLine;
}
inline void GameEvent::set_has_ball_left_field_goal_line() {
  _oneof_case_[0] = kBallLeftFieldGoalLine;
}
inline void GameEvent::clear_ball_left_field_goal_line() {
  if (has_ball_left_field_goal_line()) {
    delete event_.ball_left_field_goal_line_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BallLeftField& GameEvent::_internal_ball_left_field_goal_line() const {
  return *event_.ball_left_field_goal_line_;
}
inline ::ssl_protos::gc::GameEvent_BallLeftField* GameEvent::release_ball_left_field_goal_line() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.ball_left_field_goal_line)
  if (has_ball_left_field_goal_line()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BallLeftField* temp = event_.ball_left_field_goal_line_;
    event_.ball_left_field_goal_line_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BallLeftField& GameEvent::ball_left_field_goal_line() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.ball_left_field_goal_line)
  return has_ball_left_field_goal_line()
      ? *event_.ball_left_field_goal_line_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BallLeftField*>(&::ssl_protos::gc::_GameEvent_BallLeftField_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_goal_line() {
  if (!has_ball_left_field_goal_line()) {
    clear_event();
    set_has_ball_left_field_goal_line();
    event_.ball_left_field_goal_line_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BallLeftField >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.ball_left_field_goal_line)
  return event_.ball_left_field_goal_line_;
}

// optional .ssl_protos.gc.GameEvent.AimlessKick aimless_kick = 11;
inline bool GameEvent::has_aimless_kick() const {
  return event_case() == kAimlessKick;
}
inline void GameEvent::set_has_aimless_kick() {
  _oneof_case_[0] = kAimlessKick;
}
inline void GameEvent::clear_aimless_kick() {
  if (has_aimless_kick()) {
    delete event_.aimless_kick_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AimlessKick& GameEvent::_internal_aimless_kick() const {
  return *event_.aimless_kick_;
}
inline ::ssl_protos::gc::GameEvent_AimlessKick* GameEvent::release_aimless_kick() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.aimless_kick)
  if (has_aimless_kick()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AimlessKick* temp = event_.aimless_kick_;
    event_.aimless_kick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AimlessKick& GameEvent::aimless_kick() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.aimless_kick)
  return has_aimless_kick()
      ? *event_.aimless_kick_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AimlessKick*>(&::ssl_protos::gc::_GameEvent_AimlessKick_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AimlessKick* GameEvent::mutable_aimless_kick() {
  if (!has_aimless_kick()) {
    clear_event();
    set_has_aimless_kick();
    event_.aimless_kick_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AimlessKick >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.aimless_kick)
  return event_.aimless_kick_;
}

// optional .ssl_protos.gc.GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
inline bool GameEvent::has_attacker_too_close_to_defense_area() const {
  return event_case() == kAttackerTooCloseToDefenseArea;
}
inline void GameEvent::set_has_attacker_too_close_to_defense_area() {
  _oneof_case_[0] = kAttackerTooCloseToDefenseArea;
}
inline void GameEvent::clear_attacker_too_close_to_defense_area() {
  if (has_attacker_too_close_to_defense_area()) {
    delete event_.attacker_too_close_to_defense_area_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea& GameEvent::_internal_attacker_too_close_to_defense_area() const {
  return *event_.attacker_too_close_to_defense_area_;
}
inline ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::release_attacker_too_close_to_defense_area() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.attacker_too_close_to_defense_area)
  if (has_attacker_too_close_to_defense_area()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* temp = event_.attacker_too_close_to_defense_area_;
    event_.attacker_too_close_to_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea& GameEvent::attacker_too_close_to_defense_area() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.attacker_too_close_to_defense_area)
  return has_attacker_too_close_to_defense_area()
      ? *event_.attacker_too_close_to_defense_area_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea*>(&::ssl_protos::gc::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::mutable_attacker_too_close_to_defense_area() {
  if (!has_attacker_too_close_to_defense_area()) {
    clear_event();
    set_has_attacker_too_close_to_defense_area();
    event_.attacker_too_close_to_defense_area_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AttackerTooCloseToDefenseArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.attacker_too_close_to_defense_area)
  return event_.attacker_too_close_to_defense_area_;
}

// optional .ssl_protos.gc.GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
inline bool GameEvent::has_defender_in_defense_area() const {
  return event_case() == kDefenderInDefenseArea;
}
inline void GameEvent::set_has_defender_in_defense_area() {
  _oneof_case_[0] = kDefenderInDefenseArea;
}
inline void GameEvent::clear_defender_in_defense_area() {
  if (has_defender_in_defense_area()) {
    delete event_.defender_in_defense_area_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderInDefenseArea& GameEvent::_internal_defender_in_defense_area() const {
  return *event_.defender_in_defense_area_;
}
inline ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* GameEvent::release_defender_in_defense_area() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.defender_in_defense_area)
  if (has_defender_in_defense_area()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* temp = event_.defender_in_defense_area_;
    event_.defender_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderInDefenseArea& GameEvent::defender_in_defense_area() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.defender_in_defense_area)
  return has_defender_in_defense_area()
      ? *event_.defender_in_defense_area_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_DefenderInDefenseArea*>(&::ssl_protos::gc::_GameEvent_DefenderInDefenseArea_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_DefenderInDefenseArea* GameEvent::mutable_defender_in_defense_area() {
  if (!has_defender_in_defense_area()) {
    clear_event();
    set_has_defender_in_defense_area();
    event_.defender_in_defense_area_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_DefenderInDefenseArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.defender_in_defense_area)
  return event_.defender_in_defense_area_;
}

// optional .ssl_protos.gc.GameEvent.BoundaryCrossing boundary_crossing = 43;
inline bool GameEvent::has_boundary_crossing() const {
  return event_case() == kBoundaryCrossing;
}
inline void GameEvent::set_has_boundary_crossing() {
  _oneof_case_[0] = kBoundaryCrossing;
}
inline void GameEvent::clear_boundary_crossing() {
  if (has_boundary_crossing()) {
    delete event_.boundary_crossing_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BoundaryCrossing& GameEvent::_internal_boundary_crossing() const {
  return *event_.boundary_crossing_;
}
inline ::ssl_protos::gc::GameEvent_BoundaryCrossing* GameEvent::release_boundary_crossing() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.boundary_crossing)
  if (has_boundary_crossing()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BoundaryCrossing* temp = event_.boundary_crossing_;
    event_.boundary_crossing_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BoundaryCrossing& GameEvent::boundary_crossing() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.boundary_crossing)
  return has_boundary_crossing()
      ? *event_.boundary_crossing_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BoundaryCrossing*>(&::ssl_protos::gc::_GameEvent_BoundaryCrossing_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BoundaryCrossing* GameEvent::mutable_boundary_crossing() {
  if (!has_boundary_crossing()) {
    clear_event();
    set_has_boundary_crossing();
    event_.boundary_crossing_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BoundaryCrossing >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.boundary_crossing)
  return event_.boundary_crossing_;
}

// optional .ssl_protos.gc.GameEvent.KeeperHeldBall keeper_held_ball = 13;
inline bool GameEvent::has_keeper_held_ball() const {
  return event_case() == kKeeperHeldBall;
}
inline void GameEvent::set_has_keeper_held_ball() {
  _oneof_case_[0] = kKeeperHeldBall;
}
inline void GameEvent::clear_keeper_held_ball() {
  if (has_keeper_held_ball()) {
    delete event_.keeper_held_ball_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_KeeperHeldBall& GameEvent::_internal_keeper_held_ball() const {
  return *event_.keeper_held_ball_;
}
inline ::ssl_protos::gc::GameEvent_KeeperHeldBall* GameEvent::release_keeper_held_ball() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.keeper_held_ball)
  if (has_keeper_held_ball()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_KeeperHeldBall* temp = event_.keeper_held_ball_;
    event_.keeper_held_ball_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_KeeperHeldBall& GameEvent::keeper_held_ball() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.keeper_held_ball)
  return has_keeper_held_ball()
      ? *event_.keeper_held_ball_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_KeeperHeldBall*>(&::ssl_protos::gc::_GameEvent_KeeperHeldBall_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_KeeperHeldBall* GameEvent::mutable_keeper_held_ball() {
  if (!has_keeper_held_ball()) {
    clear_event();
    set_has_keeper_held_ball();
    event_.keeper_held_ball_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_KeeperHeldBall >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.keeper_held_ball)
  return event_.keeper_held_ball_;
}

// optional .ssl_protos.gc.GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
inline bool GameEvent::has_bot_dribbled_ball_too_far() const {
  return event_case() == kBotDribbledBallTooFar;
}
inline void GameEvent::set_has_bot_dribbled_ball_too_far() {
  _oneof_case_[0] = kBotDribbledBallTooFar;
}
inline void GameEvent::clear_bot_dribbled_ball_too_far() {
  if (has_bot_dribbled_ball_too_far()) {
    delete event_.bot_dribbled_ball_too_far_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar& GameEvent::_internal_bot_dribbled_ball_too_far() const {
  return *event_.bot_dribbled_ball_too_far_;
}
inline ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* GameEvent::release_bot_dribbled_ball_too_far() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_dribbled_ball_too_far)
  if (has_bot_dribbled_ball_too_far()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* temp = event_.bot_dribbled_ball_too_far_;
    event_.bot_dribbled_ball_too_far_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar& GameEvent::bot_dribbled_ball_too_far() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_dribbled_ball_too_far)
  return has_bot_dribbled_ball_too_far()
      ? *event_.bot_dribbled_ball_too_far_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar*>(&::ssl_protos::gc::_GameEvent_BotDribbledBallTooFar_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar* GameEvent::mutable_bot_dribbled_ball_too_far() {
  if (!has_bot_dribbled_ball_too_far()) {
    clear_event();
    set_has_bot_dribbled_ball_too_far();
    event_.bot_dribbled_ball_too_far_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotDribbledBallTooFar >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_dribbled_ball_too_far)
  return event_.bot_dribbled_ball_too_far_;
}

// optional .ssl_protos.gc.GameEvent.BotPushedBot bot_pushed_bot = 24;
inline bool GameEvent::has_bot_pushed_bot() const {
  return event_case() == kBotPushedBot;
}
inline void GameEvent::set_has_bot_pushed_bot() {
  _oneof_case_[0] = kBotPushedBot;
}
inline void GameEvent::clear_bot_pushed_bot() {
  if (has_bot_pushed_bot()) {
    delete event_.bot_pushed_bot_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotPushedBot& GameEvent::_internal_bot_pushed_bot() const {
  return *event_.bot_pushed_bot_;
}
inline ::ssl_protos::gc::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_pushed_bot)
  if (has_bot_pushed_bot()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotPushedBot* temp = event_.bot_pushed_bot_;
    event_.bot_pushed_bot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_pushed_bot)
  return has_bot_pushed_bot()
      ? *event_.bot_pushed_bot_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotPushedBot*>(&::ssl_protos::gc::_GameEvent_BotPushedBot_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot() {
  if (!has_bot_pushed_bot()) {
    clear_event();
    set_has_bot_pushed_bot();
    event_.bot_pushed_bot_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotPushedBot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_pushed_bot)
  return event_.bot_pushed_bot_;
}

// optional .ssl_protos.gc.GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
inline bool GameEvent::has_bot_held_ball_deliberately() const {
  return event_case() == kBotHeldBallDeliberately;
}
inline void GameEvent::set_has_bot_held_ball_deliberately() {
  _oneof_case_[0] = kBotHeldBallDeliberately;
}
inline void GameEvent::clear_bot_held_ball_deliberately() {
  if (has_bot_held_ball_deliberately()) {
    delete event_.bot_held_ball_deliberately_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately& GameEvent::_internal_bot_held_ball_deliberately() const {
  return *event_.bot_held_ball_deliberately_;
}
inline ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* GameEvent::release_bot_held_ball_deliberately() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_held_ball_deliberately)
  if (has_bot_held_ball_deliberately()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* temp = event_.bot_held_ball_deliberately_;
    event_.bot_held_ball_deliberately_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately& GameEvent::bot_held_ball_deliberately() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_held_ball_deliberately)
  return has_bot_held_ball_deliberately()
      ? *event_.bot_held_ball_deliberately_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately*>(&::ssl_protos::gc::_GameEvent_BotHeldBallDeliberately_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately* GameEvent::mutable_bot_held_ball_deliberately() {
  if (!has_bot_held_ball_deliberately()) {
    clear_event();
    set_has_bot_held_ball_deliberately();
    event_.bot_held_ball_deliberately_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotHeldBallDeliberately >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_held_ball_deliberately)
  return event_.bot_held_ball_deliberately_;
}

// optional .ssl_protos.gc.GameEvent.BotTippedOver bot_tipped_over = 27;
inline bool GameEvent::has_bot_tipped_over() const {
  return event_case() == kBotTippedOver;
}
inline void GameEvent::set_has_bot_tipped_over() {
  _oneof_case_[0] = kBotTippedOver;
}
inline void GameEvent::clear_bot_tipped_over() {
  if (has_bot_tipped_over()) {
    delete event_.bot_tipped_over_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotTippedOver& GameEvent::_internal_bot_tipped_over() const {
  return *event_.bot_tipped_over_;
}
inline ::ssl_protos::gc::GameEvent_BotTippedOver* GameEvent::release_bot_tipped_over() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_tipped_over)
  if (has_bot_tipped_over()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotTippedOver* temp = event_.bot_tipped_over_;
    event_.bot_tipped_over_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotTippedOver& GameEvent::bot_tipped_over() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_tipped_over)
  return has_bot_tipped_over()
      ? *event_.bot_tipped_over_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotTippedOver*>(&::ssl_protos::gc::_GameEvent_BotTippedOver_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotTippedOver* GameEvent::mutable_bot_tipped_over() {
  if (!has_bot_tipped_over()) {
    clear_event();
    set_has_bot_tipped_over();
    event_.bot_tipped_over_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotTippedOver >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_tipped_over)
  return event_.bot_tipped_over_;
}

// optional .ssl_protos.gc.GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
inline bool GameEvent::has_attacker_touched_ball_in_defense_area() const {
  return event_case() == kAttackerTouchedBallInDefenseArea;
}
inline void GameEvent::set_has_attacker_touched_ball_in_defense_area() {
  _oneof_case_[0] = kAttackerTouchedBallInDefenseArea;
}
inline void GameEvent::clear_attacker_touched_ball_in_defense_area() {
  if (has_attacker_touched_ball_in_defense_area()) {
    delete event_.attacker_touched_ball_in_defense_area_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea& GameEvent::_internal_attacker_touched_ball_in_defense_area() const {
  return *event_.attacker_touched_ball_in_defense_area_;
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::release_attacker_touched_ball_in_defense_area() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.attacker_touched_ball_in_defense_area)
  if (has_attacker_touched_ball_in_defense_area()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* temp = event_.attacker_touched_ball_in_defense_area_;
    event_.attacker_touched_ball_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea& GameEvent::attacker_touched_ball_in_defense_area() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.attacker_touched_ball_in_defense_area)
  return has_attacker_touched_ball_in_defense_area()
      ? *event_.attacker_touched_ball_in_defense_area_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea*>(&::ssl_protos::gc::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::mutable_attacker_touched_ball_in_defense_area() {
  if (!has_attacker_touched_ball_in_defense_area()) {
    clear_event();
    set_has_attacker_touched_ball_in_defense_area();
    event_.attacker_touched_ball_in_defense_area_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AttackerTouchedBallInDefenseArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.attacker_touched_ball_in_defense_area)
  return event_.attacker_touched_ball_in_defense_area_;
}

// optional .ssl_protos.gc.GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
inline bool GameEvent::has_bot_kicked_ball_too_fast() const {
  return event_case() == kBotKickedBallTooFast;
}
inline void GameEvent::set_has_bot_kicked_ball_too_fast() {
  _oneof_case_[0] = kBotKickedBallTooFast;
}
inline void GameEvent::clear_bot_kicked_ball_too_fast() {
  if (has_bot_kicked_ball_too_fast()) {
    delete event_.bot_kicked_ball_too_fast_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotKickedBallTooFast& GameEvent::_internal_bot_kicked_ball_too_fast() const {
  return *event_.bot_kicked_ball_too_fast_;
}
inline ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* GameEvent::release_bot_kicked_ball_too_fast() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_kicked_ball_too_fast)
  if (has_bot_kicked_ball_too_fast()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* temp = event_.bot_kicked_ball_too_fast_;
    event_.bot_kicked_ball_too_fast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotKickedBallTooFast& GameEvent::bot_kicked_ball_too_fast() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_kicked_ball_too_fast)
  return has_bot_kicked_ball_too_fast()
      ? *event_.bot_kicked_ball_too_fast_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotKickedBallTooFast*>(&::ssl_protos::gc::_GameEvent_BotKickedBallTooFast_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotKickedBallTooFast* GameEvent::mutable_bot_kicked_ball_too_fast() {
  if (!has_bot_kicked_ball_too_fast()) {
    clear_event();
    set_has_bot_kicked_ball_too_fast();
    event_.bot_kicked_ball_too_fast_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotKickedBallTooFast >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_kicked_ball_too_fast)
  return event_.bot_kicked_ball_too_fast_;
}

// optional .ssl_protos.gc.GameEvent.BotCrashUnique bot_crash_unique = 22;
inline bool GameEvent::has_bot_crash_unique() const {
  return event_case() == kBotCrashUnique;
}
inline void GameEvent::set_has_bot_crash_unique() {
  _oneof_case_[0] = kBotCrashUnique;
}
inline void GameEvent::clear_bot_crash_unique() {
  if (has_bot_crash_unique()) {
    delete event_.bot_crash_unique_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashUnique& GameEvent::_internal_bot_crash_unique() const {
  return *event_.bot_crash_unique_;
}
inline ::ssl_protos::gc::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_crash_unique)
  if (has_bot_crash_unique()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotCrashUnique* temp = event_.bot_crash_unique_;
    event_.bot_crash_unique_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_crash_unique)
  return has_bot_crash_unique()
      ? *event_.bot_crash_unique_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotCrashUnique*>(&::ssl_protos::gc::_GameEvent_BotCrashUnique_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique() {
  if (!has_bot_crash_unique()) {
    clear_event();
    set_has_bot_crash_unique();
    event_.bot_crash_unique_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotCrashUnique >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_crash_unique)
  return event_.bot_crash_unique_;
}

// optional .ssl_protos.gc.GameEvent.BotCrashDrawn bot_crash_drawn = 21;
inline bool GameEvent::has_bot_crash_drawn() const {
  return event_case() == kBotCrashDrawn;
}
inline void GameEvent::set_has_bot_crash_drawn() {
  _oneof_case_[0] = kBotCrashDrawn;
}
inline void GameEvent::clear_bot_crash_drawn() {
  if (has_bot_crash_drawn()) {
    delete event_.bot_crash_drawn_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashDrawn& GameEvent::_internal_bot_crash_drawn() const {
  return *event_.bot_crash_drawn_;
}
inline ::ssl_protos::gc::GameEvent_BotCrashDrawn* GameEvent::release_bot_crash_drawn() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_crash_drawn)
  if (has_bot_crash_drawn()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotCrashDrawn* temp = event_.bot_crash_drawn_;
    event_.bot_crash_drawn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashDrawn& GameEvent::bot_crash_drawn() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_crash_drawn)
  return has_bot_crash_drawn()
      ? *event_.bot_crash_drawn_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotCrashDrawn*>(&::ssl_protos::gc::_GameEvent_BotCrashDrawn_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotCrashDrawn* GameEvent::mutable_bot_crash_drawn() {
  if (!has_bot_crash_drawn()) {
    clear_event();
    set_has_bot_crash_drawn();
    event_.bot_crash_drawn_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotCrashDrawn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_crash_drawn)
  return event_.bot_crash_drawn_;
}

// optional .ssl_protos.gc.GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
inline bool GameEvent::has_defender_too_close_to_kick_point() const {
  return event_case() == kDefenderTooCloseToKickPoint;
}
inline void GameEvent::set_has_defender_too_close_to_kick_point() {
  _oneof_case_[0] = kDefenderTooCloseToKickPoint;
}
inline void GameEvent::clear_defender_too_close_to_kick_point() {
  if (has_defender_too_close_to_kick_point()) {
    delete event_.defender_too_close_to_kick_point_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint& GameEvent::_internal_defender_too_close_to_kick_point() const {
  return *event_.defender_too_close_to_kick_point_;
}
inline ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* GameEvent::release_defender_too_close_to_kick_point() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.defender_too_close_to_kick_point)
  if (has_defender_too_close_to_kick_point()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* temp = event_.defender_too_close_to_kick_point_;
    event_.defender_too_close_to_kick_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint& GameEvent::defender_too_close_to_kick_point() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.defender_too_close_to_kick_point)
  return has_defender_too_close_to_kick_point()
      ? *event_.defender_too_close_to_kick_point_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint*>(&::ssl_protos::gc::_GameEvent_DefenderTooCloseToKickPoint_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint* GameEvent::mutable_defender_too_close_to_kick_point() {
  if (!has_defender_too_close_to_kick_point()) {
    clear_event();
    set_has_defender_too_close_to_kick_point();
    event_.defender_too_close_to_kick_point_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_DefenderTooCloseToKickPoint >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.defender_too_close_to_kick_point)
  return event_.defender_too_close_to_kick_point_;
}

// optional .ssl_protos.gc.GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
inline bool GameEvent::has_bot_too_fast_in_stop() const {
  return event_case() == kBotTooFastInStop;
}
inline void GameEvent::set_has_bot_too_fast_in_stop() {
  _oneof_case_[0] = kBotTooFastInStop;
}
inline void GameEvent::clear_bot_too_fast_in_stop() {
  if (has_bot_too_fast_in_stop()) {
    delete event_.bot_too_fast_in_stop_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotTooFastInStop& GameEvent::_internal_bot_too_fast_in_stop() const {
  return *event_.bot_too_fast_in_stop_;
}
inline ::ssl_protos::gc::GameEvent_BotTooFastInStop* GameEvent::release_bot_too_fast_in_stop() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_too_fast_in_stop)
  if (has_bot_too_fast_in_stop()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotTooFastInStop* temp = event_.bot_too_fast_in_stop_;
    event_.bot_too_fast_in_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotTooFastInStop& GameEvent::bot_too_fast_in_stop() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_too_fast_in_stop)
  return has_bot_too_fast_in_stop()
      ? *event_.bot_too_fast_in_stop_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotTooFastInStop*>(&::ssl_protos::gc::_GameEvent_BotTooFastInStop_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotTooFastInStop* GameEvent::mutable_bot_too_fast_in_stop() {
  if (!has_bot_too_fast_in_stop()) {
    clear_event();
    set_has_bot_too_fast_in_stop();
    event_.bot_too_fast_in_stop_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotTooFastInStop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_too_fast_in_stop)
  return event_.bot_too_fast_in_stop_;
}

// optional .ssl_protos.gc.GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
inline bool GameEvent::has_bot_interfered_placement() const {
  return event_case() == kBotInterferedPlacement;
}
inline void GameEvent::set_has_bot_interfered_placement() {
  _oneof_case_[0] = kBotInterferedPlacement;
}
inline void GameEvent::clear_bot_interfered_placement() {
  if (has_bot_interfered_placement()) {
    delete event_.bot_interfered_placement_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotInterferedPlacement& GameEvent::_internal_bot_interfered_placement() const {
  return *event_.bot_interfered_placement_;
}
inline ::ssl_protos::gc::GameEvent_BotInterferedPlacement* GameEvent::release_bot_interfered_placement() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_interfered_placement)
  if (has_bot_interfered_placement()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotInterferedPlacement* temp = event_.bot_interfered_placement_;
    event_.bot_interfered_placement_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotInterferedPlacement& GameEvent::bot_interfered_placement() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_interfered_placement)
  return has_bot_interfered_placement()
      ? *event_.bot_interfered_placement_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotInterferedPlacement*>(&::ssl_protos::gc::_GameEvent_BotInterferedPlacement_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotInterferedPlacement* GameEvent::mutable_bot_interfered_placement() {
  if (!has_bot_interfered_placement()) {
    clear_event();
    set_has_bot_interfered_placement();
    event_.bot_interfered_placement_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotInterferedPlacement >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_interfered_placement)
  return event_.bot_interfered_placement_;
}

// optional .ssl_protos.gc.GameEvent.Goal possible_goal = 39;
inline bool GameEvent::has_possible_goal() const {
  return event_case() == kPossibleGoal;
}
inline void GameEvent::set_has_possible_goal() {
  _oneof_case_[0] = kPossibleGoal;
}
inline void GameEvent::clear_possible_goal() {
  if (has_possible_goal()) {
    delete event_.possible_goal_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::_internal_possible_goal() const {
  return *event_.possible_goal_;
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::release_possible_goal() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.possible_goal)
  if (has_possible_goal()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_Goal* temp = event_.possible_goal_;
    event_.possible_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::possible_goal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.possible_goal)
  return has_possible_goal()
      ? *event_.possible_goal_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_Goal*>(&::ssl_protos::gc::_GameEvent_Goal_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::mutable_possible_goal() {
  if (!has_possible_goal()) {
    clear_event();
    set_has_possible_goal();
    event_.possible_goal_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_Goal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.possible_goal)
  return event_.possible_goal_;
}

// optional .ssl_protos.gc.GameEvent.Goal goal = 8;
inline bool GameEvent::has_goal() const {
  return event_case() == kGoal;
}
inline void GameEvent::set_has_goal() {
  _oneof_case_[0] = kGoal;
}
inline void GameEvent::clear_goal() {
  if (has_goal()) {
    delete event_.goal_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::_internal_goal() const {
  return *event_.goal_;
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::release_goal() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.goal)
  if (has_goal()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_Goal* temp = event_.goal_;
    event_.goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::goal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.goal)
  return has_goal()
      ? *event_.goal_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_Goal*>(&::ssl_protos::gc::_GameEvent_Goal_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::mutable_goal() {
  if (!has_goal()) {
    clear_event();
    set_has_goal();
    event_.goal_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_Goal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.goal)
  return event_.goal_;
}

// optional .ssl_protos.gc.GameEvent.Goal invalid_goal = 44;
inline bool GameEvent::has_invalid_goal() const {
  return event_case() == kInvalidGoal;
}
inline void GameEvent::set_has_invalid_goal() {
  _oneof_case_[0] = kInvalidGoal;
}
inline void GameEvent::clear_invalid_goal() {
  if (has_invalid_goal()) {
    delete event_.invalid_goal_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::_internal_invalid_goal() const {
  return *event_.invalid_goal_;
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::release_invalid_goal() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.invalid_goal)
  if (has_invalid_goal()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_Goal* temp = event_.invalid_goal_;
    event_.invalid_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_Goal& GameEvent::invalid_goal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.invalid_goal)
  return has_invalid_goal()
      ? *event_.invalid_goal_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_Goal*>(&::ssl_protos::gc::_GameEvent_Goal_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_Goal* GameEvent::mutable_invalid_goal() {
  if (!has_invalid_goal()) {
    clear_event();
    set_has_invalid_goal();
    event_.invalid_goal_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_Goal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.invalid_goal)
  return event_.invalid_goal_;
}

// optional .ssl_protos.gc.GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
inline bool GameEvent::has_attacker_double_touched_ball() const {
  return event_case() == kAttackerDoubleTouchedBall;
}
inline void GameEvent::set_has_attacker_double_touched_ball() {
  _oneof_case_[0] = kAttackerDoubleTouchedBall;
}
inline void GameEvent::clear_attacker_double_touched_ball() {
  if (has_attacker_double_touched_ball()) {
    delete event_.attacker_double_touched_ball_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall& GameEvent::_internal_attacker_double_touched_ball() const {
  return *event_.attacker_double_touched_ball_;
}
inline ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* GameEvent::release_attacker_double_touched_ball() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.attacker_double_touched_ball)
  if (has_attacker_double_touched_ball()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* temp = event_.attacker_double_touched_ball_;
    event_.attacker_double_touched_ball_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall& GameEvent::attacker_double_touched_ball() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.attacker_double_touched_ball)
  return has_attacker_double_touched_ball()
      ? *event_.attacker_double_touched_ball_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall*>(&::ssl_protos::gc::_GameEvent_AttackerDoubleTouchedBall_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall* GameEvent::mutable_attacker_double_touched_ball() {
  if (!has_attacker_double_touched_ball()) {
    clear_event();
    set_has_attacker_double_touched_ball();
    event_.attacker_double_touched_ball_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AttackerDoubleTouchedBall >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.attacker_double_touched_ball)
  return event_.attacker_double_touched_ball_;
}

// optional .ssl_protos.gc.GameEvent.PlacementSucceeded placement_succeeded = 5;
inline bool GameEvent::has_placement_succeeded() const {
  return event_case() == kPlacementSucceeded;
}
inline void GameEvent::set_has_placement_succeeded() {
  _oneof_case_[0] = kPlacementSucceeded;
}
inline void GameEvent::clear_placement_succeeded() {
  if (has_placement_succeeded()) {
    delete event_.placement_succeeded_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_PlacementSucceeded& GameEvent::_internal_placement_succeeded() const {
  return *event_.placement_succeeded_;
}
inline ::ssl_protos::gc::GameEvent_PlacementSucceeded* GameEvent::release_placement_succeeded() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.placement_succeeded)
  if (has_placement_succeeded()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_PlacementSucceeded* temp = event_.placement_succeeded_;
    event_.placement_succeeded_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_PlacementSucceeded& GameEvent::placement_succeeded() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.placement_succeeded)
  return has_placement_succeeded()
      ? *event_.placement_succeeded_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_PlacementSucceeded*>(&::ssl_protos::gc::_GameEvent_PlacementSucceeded_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_PlacementSucceeded* GameEvent::mutable_placement_succeeded() {
  if (!has_placement_succeeded()) {
    clear_event();
    set_has_placement_succeeded();
    event_.placement_succeeded_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_PlacementSucceeded >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.placement_succeeded)
  return event_.placement_succeeded_;
}

// optional .ssl_protos.gc.GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
inline bool GameEvent::has_penalty_kick_failed() const {
  return event_case() == kPenaltyKickFailed;
}
inline void GameEvent::set_has_penalty_kick_failed() {
  _oneof_case_[0] = kPenaltyKickFailed;
}
inline void GameEvent::clear_penalty_kick_failed() {
  if (has_penalty_kick_failed()) {
    delete event_.penalty_kick_failed_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_PenaltyKickFailed& GameEvent::_internal_penalty_kick_failed() const {
  return *event_.penalty_kick_failed_;
}
inline ::ssl_protos::gc::GameEvent_PenaltyKickFailed* GameEvent::release_penalty_kick_failed() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.penalty_kick_failed)
  if (has_penalty_kick_failed()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_PenaltyKickFailed* temp = event_.penalty_kick_failed_;
    event_.penalty_kick_failed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_PenaltyKickFailed& GameEvent::penalty_kick_failed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.penalty_kick_failed)
  return has_penalty_kick_failed()
      ? *event_.penalty_kick_failed_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_PenaltyKickFailed*>(&::ssl_protos::gc::_GameEvent_PenaltyKickFailed_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_PenaltyKickFailed* GameEvent::mutable_penalty_kick_failed() {
  if (!has_penalty_kick_failed()) {
    clear_event();
    set_has_penalty_kick_failed();
    event_.penalty_kick_failed_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_PenaltyKickFailed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.penalty_kick_failed)
  return event_.penalty_kick_failed_;
}

// optional .ssl_protos.gc.GameEvent.NoProgressInGame no_progress_in_game = 2;
inline bool GameEvent::has_no_progress_in_game() const {
  return event_case() == kNoProgressInGame;
}
inline void GameEvent::set_has_no_progress_in_game() {
  _oneof_case_[0] = kNoProgressInGame;
}
inline void GameEvent::clear_no_progress_in_game() {
  if (has_no_progress_in_game()) {
    delete event_.no_progress_in_game_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_NoProgressInGame& GameEvent::_internal_no_progress_in_game() const {
  return *event_.no_progress_in_game_;
}
inline ::ssl_protos::gc::GameEvent_NoProgressInGame* GameEvent::release_no_progress_in_game() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.no_progress_in_game)
  if (has_no_progress_in_game()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_NoProgressInGame* temp = event_.no_progress_in_game_;
    event_.no_progress_in_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_NoProgressInGame& GameEvent::no_progress_in_game() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.no_progress_in_game)
  return has_no_progress_in_game()
      ? *event_.no_progress_in_game_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_NoProgressInGame*>(&::ssl_protos::gc::_GameEvent_NoProgressInGame_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_NoProgressInGame* GameEvent::mutable_no_progress_in_game() {
  if (!has_no_progress_in_game()) {
    clear_event();
    set_has_no_progress_in_game();
    event_.no_progress_in_game_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_NoProgressInGame >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.no_progress_in_game)
  return event_.no_progress_in_game_;
}

// optional .ssl_protos.gc.GameEvent.PlacementFailed placement_failed = 3;
inline bool GameEvent::has_placement_failed() const {
  return event_case() == kPlacementFailed;
}
inline void GameEvent::set_has_placement_failed() {
  _oneof_case_[0] = kPlacementFailed;
}
inline void GameEvent::clear_placement_failed() {
  if (has_placement_failed()) {
    delete event_.placement_failed_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_PlacementFailed& GameEvent::_internal_placement_failed() const {
  return *event_.placement_failed_;
}
inline ::ssl_protos::gc::GameEvent_PlacementFailed* GameEvent::release_placement_failed() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.placement_failed)
  if (has_placement_failed()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_PlacementFailed* temp = event_.placement_failed_;
    event_.placement_failed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_PlacementFailed& GameEvent::placement_failed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.placement_failed)
  return has_placement_failed()
      ? *event_.placement_failed_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_PlacementFailed*>(&::ssl_protos::gc::_GameEvent_PlacementFailed_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_PlacementFailed* GameEvent::mutable_placement_failed() {
  if (!has_placement_failed()) {
    clear_event();
    set_has_placement_failed();
    event_.placement_failed_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_PlacementFailed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.placement_failed)
  return event_.placement_failed_;
}

// optional .ssl_protos.gc.GameEvent.MultipleCards multiple_cards = 32;
inline bool GameEvent::has_multiple_cards() const {
  return event_case() == kMultipleCards;
}
inline void GameEvent::set_has_multiple_cards() {
  _oneof_case_[0] = kMultipleCards;
}
inline void GameEvent::clear_multiple_cards() {
  if (has_multiple_cards()) {
    delete event_.multiple_cards_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_MultipleCards& GameEvent::_internal_multiple_cards() const {
  return *event_.multiple_cards_;
}
inline ::ssl_protos::gc::GameEvent_MultipleCards* GameEvent::release_multiple_cards() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.multiple_cards)
  if (has_multiple_cards()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_MultipleCards* temp = event_.multiple_cards_;
    event_.multiple_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_MultipleCards& GameEvent::multiple_cards() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.multiple_cards)
  return has_multiple_cards()
      ? *event_.multiple_cards_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_MultipleCards*>(&::ssl_protos::gc::_GameEvent_MultipleCards_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_MultipleCards* GameEvent::mutable_multiple_cards() {
  if (!has_multiple_cards()) {
    clear_event();
    set_has_multiple_cards();
    event_.multiple_cards_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_MultipleCards >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.multiple_cards)
  return event_.multiple_cards_;
}

// optional .ssl_protos.gc.GameEvent.MultipleFouls multiple_fouls = 34;
inline bool GameEvent::has_multiple_fouls() const {
  return event_case() == kMultipleFouls;
}
inline void GameEvent::set_has_multiple_fouls() {
  _oneof_case_[0] = kMultipleFouls;
}
inline void GameEvent::clear_multiple_fouls() {
  if (has_multiple_fouls()) {
    delete event_.multiple_fouls_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_MultipleFouls& GameEvent::_internal_multiple_fouls() const {
  return *event_.multiple_fouls_;
}
inline ::ssl_protos::gc::GameEvent_MultipleFouls* GameEvent::release_multiple_fouls() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.multiple_fouls)
  if (has_multiple_fouls()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_MultipleFouls* temp = event_.multiple_fouls_;
    event_.multiple_fouls_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_MultipleFouls& GameEvent::multiple_fouls() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.multiple_fouls)
  return has_multiple_fouls()
      ? *event_.multiple_fouls_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_MultipleFouls*>(&::ssl_protos::gc::_GameEvent_MultipleFouls_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_MultipleFouls* GameEvent::mutable_multiple_fouls() {
  if (!has_multiple_fouls()) {
    clear_event();
    set_has_multiple_fouls();
    event_.multiple_fouls_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_MultipleFouls >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.multiple_fouls)
  return event_.multiple_fouls_;
}

// optional .ssl_protos.gc.GameEvent.BotSubstitution bot_substitution = 37;
inline bool GameEvent::has_bot_substitution() const {
  return event_case() == kBotSubstitution;
}
inline void GameEvent::set_has_bot_substitution() {
  _oneof_case_[0] = kBotSubstitution;
}
inline void GameEvent::clear_bot_substitution() {
  if (has_bot_substitution()) {
    delete event_.bot_substitution_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotSubstitution& GameEvent::_internal_bot_substitution() const {
  return *event_.bot_substitution_;
}
inline ::ssl_protos::gc::GameEvent_BotSubstitution* GameEvent::release_bot_substitution() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_substitution)
  if (has_bot_substitution()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotSubstitution* temp = event_.bot_substitution_;
    event_.bot_substitution_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotSubstitution& GameEvent::bot_substitution() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_substitution)
  return has_bot_substitution()
      ? *event_.bot_substitution_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotSubstitution*>(&::ssl_protos::gc::_GameEvent_BotSubstitution_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotSubstitution* GameEvent::mutable_bot_substitution() {
  if (!has_bot_substitution()) {
    clear_event();
    set_has_bot_substitution();
    event_.bot_substitution_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotSubstitution >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_substitution)
  return event_.bot_substitution_;
}

// optional .ssl_protos.gc.GameEvent.TooManyRobots too_many_robots = 38;
inline bool GameEvent::has_too_many_robots() const {
  return event_case() == kTooManyRobots;
}
inline void GameEvent::set_has_too_many_robots() {
  _oneof_case_[0] = kTooManyRobots;
}
inline void GameEvent::clear_too_many_robots() {
  if (has_too_many_robots()) {
    delete event_.too_many_robots_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_TooManyRobots& GameEvent::_internal_too_many_robots() const {
  return *event_.too_many_robots_;
}
inline ::ssl_protos::gc::GameEvent_TooManyRobots* GameEvent::release_too_many_robots() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.too_many_robots)
  if (has_too_many_robots()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_TooManyRobots* temp = event_.too_many_robots_;
    event_.too_many_robots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_TooManyRobots& GameEvent::too_many_robots() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.too_many_robots)
  return has_too_many_robots()
      ? *event_.too_many_robots_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_TooManyRobots*>(&::ssl_protos::gc::_GameEvent_TooManyRobots_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_TooManyRobots* GameEvent::mutable_too_many_robots() {
  if (!has_too_many_robots()) {
    clear_event();
    set_has_too_many_robots();
    event_.too_many_robots_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_TooManyRobots >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.too_many_robots)
  return event_.too_many_robots_;
}

// optional .ssl_protos.gc.GameEvent.ChallengeFlag challenge_flag = 46;
inline bool GameEvent::has_challenge_flag() const {
  return event_case() == kChallengeFlag;
}
inline void GameEvent::set_has_challenge_flag() {
  _oneof_case_[0] = kChallengeFlag;
}
inline void GameEvent::clear_challenge_flag() {
  if (has_challenge_flag()) {
    delete event_.challenge_flag_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_ChallengeFlag& GameEvent::_internal_challenge_flag() const {
  return *event_.challenge_flag_;
}
inline ::ssl_protos::gc::GameEvent_ChallengeFlag* GameEvent::release_challenge_flag() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.challenge_flag)
  if (has_challenge_flag()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_ChallengeFlag* temp = event_.challenge_flag_;
    event_.challenge_flag_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_ChallengeFlag& GameEvent::challenge_flag() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.challenge_flag)
  return has_challenge_flag()
      ? *event_.challenge_flag_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_ChallengeFlag*>(&::ssl_protos::gc::_GameEvent_ChallengeFlag_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_ChallengeFlag* GameEvent::mutable_challenge_flag() {
  if (!has_challenge_flag()) {
    clear_event();
    set_has_challenge_flag();
    event_.challenge_flag_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_ChallengeFlag >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.challenge_flag)
  return event_.challenge_flag_;
}

// optional .ssl_protos.gc.GameEvent.EmergencyStop emergency_stop = 47;
inline bool GameEvent::has_emergency_stop() const {
  return event_case() == kEmergencyStop;
}
inline void GameEvent::set_has_emergency_stop() {
  _oneof_case_[0] = kEmergencyStop;
}
inline void GameEvent::clear_emergency_stop() {
  if (has_emergency_stop()) {
    delete event_.emergency_stop_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_EmergencyStop& GameEvent::_internal_emergency_stop() const {
  return *event_.emergency_stop_;
}
inline ::ssl_protos::gc::GameEvent_EmergencyStop* GameEvent::release_emergency_stop() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.emergency_stop)
  if (has_emergency_stop()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_EmergencyStop* temp = event_.emergency_stop_;
    event_.emergency_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_EmergencyStop& GameEvent::emergency_stop() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.emergency_stop)
  return has_emergency_stop()
      ? *event_.emergency_stop_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_EmergencyStop*>(&::ssl_protos::gc::_GameEvent_EmergencyStop_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_EmergencyStop* GameEvent::mutable_emergency_stop() {
  if (!has_emergency_stop()) {
    clear_event();
    set_has_emergency_stop();
    event_.emergency_stop_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_EmergencyStop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.emergency_stop)
  return event_.emergency_stop_;
}

// optional .ssl_protos.gc.GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
inline bool GameEvent::has_unsporting_behavior_minor() const {
  return event_case() == kUnsportingBehaviorMinor;
}
inline void GameEvent::set_has_unsporting_behavior_minor() {
  _oneof_case_[0] = kUnsportingBehaviorMinor;
}
inline void GameEvent::clear_unsporting_behavior_minor() {
  if (has_unsporting_behavior_minor()) {
    delete event_.unsporting_behavior_minor_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor& GameEvent::_internal_unsporting_behavior_minor() const {
  return *event_.unsporting_behavior_minor_;
}
inline ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* GameEvent::release_unsporting_behavior_minor() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.unsporting_behavior_minor)
  if (has_unsporting_behavior_minor()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* temp = event_.unsporting_behavior_minor_;
    event_.unsporting_behavior_minor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor& GameEvent::unsporting_behavior_minor() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.unsporting_behavior_minor)
  return has_unsporting_behavior_minor()
      ? *event_.unsporting_behavior_minor_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor*>(&::ssl_protos::gc::_GameEvent_UnsportingBehaviorMinor_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor* GameEvent::mutable_unsporting_behavior_minor() {
  if (!has_unsporting_behavior_minor()) {
    clear_event();
    set_has_unsporting_behavior_minor();
    event_.unsporting_behavior_minor_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_UnsportingBehaviorMinor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.unsporting_behavior_minor)
  return event_.unsporting_behavior_minor_;
}

// optional .ssl_protos.gc.GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
inline bool GameEvent::has_unsporting_behavior_major() const {
  return event_case() == kUnsportingBehaviorMajor;
}
inline void GameEvent::set_has_unsporting_behavior_major() {
  _oneof_case_[0] = kUnsportingBehaviorMajor;
}
inline void GameEvent::clear_unsporting_behavior_major() {
  if (has_unsporting_behavior_major()) {
    delete event_.unsporting_behavior_major_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor& GameEvent::_internal_unsporting_behavior_major() const {
  return *event_.unsporting_behavior_major_;
}
inline ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* GameEvent::release_unsporting_behavior_major() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.unsporting_behavior_major)
  if (has_unsporting_behavior_major()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* temp = event_.unsporting_behavior_major_;
    event_.unsporting_behavior_major_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor& GameEvent::unsporting_behavior_major() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.unsporting_behavior_major)
  return has_unsporting_behavior_major()
      ? *event_.unsporting_behavior_major_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor*>(&::ssl_protos::gc::_GameEvent_UnsportingBehaviorMajor_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor* GameEvent::mutable_unsporting_behavior_major() {
  if (!has_unsporting_behavior_major()) {
    clear_event();
    set_has_unsporting_behavior_major();
    event_.unsporting_behavior_major_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_UnsportingBehaviorMajor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.unsporting_behavior_major)
  return event_.unsporting_behavior_major_;
}

// optional .ssl_protos.gc.GameEvent.Prepared prepared = 1 [deprecated = true];
inline bool GameEvent::has_prepared() const {
  return event_case() == kPrepared;
}
inline void GameEvent::set_has_prepared() {
  _oneof_case_[0] = kPrepared;
}
inline void GameEvent::clear_prepared() {
  if (has_prepared()) {
    delete event_.prepared_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_Prepared& GameEvent::_internal_prepared() const {
  return *event_.prepared_;
}
inline ::ssl_protos::gc::GameEvent_Prepared* GameEvent::release_prepared() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.prepared)
  if (has_prepared()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_Prepared* temp = event_.prepared_;
    event_.prepared_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_Prepared& GameEvent::prepared() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.prepared)
  return has_prepared()
      ? *event_.prepared_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_Prepared*>(&::ssl_protos::gc::_GameEvent_Prepared_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_Prepared* GameEvent::mutable_prepared() {
  if (!has_prepared()) {
    clear_event();
    set_has_prepared();
    event_.prepared_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_Prepared >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.prepared)
  return event_.prepared_;
}

// optional .ssl_protos.gc.GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
inline bool GameEvent::has_indirect_goal() const {
  return event_case() == kIndirectGoal;
}
inline void GameEvent::set_has_indirect_goal() {
  _oneof_case_[0] = kIndirectGoal;
}
inline void GameEvent::clear_indirect_goal() {
  if (has_indirect_goal()) {
    delete event_.indirect_goal_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_IndirectGoal& GameEvent::_internal_indirect_goal() const {
  return *event_.indirect_goal_;
}
inline ::ssl_protos::gc::GameEvent_IndirectGoal* GameEvent::release_indirect_goal() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.indirect_goal)
  if (has_indirect_goal()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_IndirectGoal* temp = event_.indirect_goal_;
    event_.indirect_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_IndirectGoal& GameEvent::indirect_goal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.indirect_goal)
  return has_indirect_goal()
      ? *event_.indirect_goal_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_IndirectGoal*>(&::ssl_protos::gc::_GameEvent_IndirectGoal_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_IndirectGoal* GameEvent::mutable_indirect_goal() {
  if (!has_indirect_goal()) {
    clear_event();
    set_has_indirect_goal();
    event_.indirect_goal_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_IndirectGoal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.indirect_goal)
  return event_.indirect_goal_;
}

// optional .ssl_protos.gc.GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
inline bool GameEvent::has_chipped_goal() const {
  return event_case() == kChippedGoal;
}
inline void GameEvent::set_has_chipped_goal() {
  _oneof_case_[0] = kChippedGoal;
}
inline void GameEvent::clear_chipped_goal() {
  if (has_chipped_goal()) {
    delete event_.chipped_goal_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_ChippedGoal& GameEvent::_internal_chipped_goal() const {
  return *event_.chipped_goal_;
}
inline ::ssl_protos::gc::GameEvent_ChippedGoal* GameEvent::release_chipped_goal() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.chipped_goal)
  if (has_chipped_goal()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_ChippedGoal* temp = event_.chipped_goal_;
    event_.chipped_goal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_ChippedGoal& GameEvent::chipped_goal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.chipped_goal)
  return has_chipped_goal()
      ? *event_.chipped_goal_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_ChippedGoal*>(&::ssl_protos::gc::_GameEvent_ChippedGoal_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_ChippedGoal* GameEvent::mutable_chipped_goal() {
  if (!has_chipped_goal()) {
    clear_event();
    set_has_chipped_goal();
    event_.chipped_goal_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_ChippedGoal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.chipped_goal)
  return event_.chipped_goal_;
}

// optional .ssl_protos.gc.GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
inline bool GameEvent::has_kick_timeout() const {
  return event_case() == kKickTimeout;
}
inline void GameEvent::set_has_kick_timeout() {
  _oneof_case_[0] = kKickTimeout;
}
inline void GameEvent::clear_kick_timeout() {
  if (has_kick_timeout()) {
    delete event_.kick_timeout_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_KickTimeout& GameEvent::_internal_kick_timeout() const {
  return *event_.kick_timeout_;
}
inline ::ssl_protos::gc::GameEvent_KickTimeout* GameEvent::release_kick_timeout() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.kick_timeout)
  if (has_kick_timeout()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_KickTimeout* temp = event_.kick_timeout_;
    event_.kick_timeout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_KickTimeout& GameEvent::kick_timeout() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.kick_timeout)
  return has_kick_timeout()
      ? *event_.kick_timeout_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_KickTimeout*>(&::ssl_protos::gc::_GameEvent_KickTimeout_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_KickTimeout* GameEvent::mutable_kick_timeout() {
  if (!has_kick_timeout()) {
    clear_event();
    set_has_kick_timeout();
    event_.kick_timeout_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_KickTimeout >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.kick_timeout)
  return event_.kick_timeout_;
}

// optional .ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
inline bool GameEvent::has_attacker_touched_opponent_in_defense_area() const {
  return event_case() == kAttackerTouchedOpponentInDefenseArea;
}
inline void GameEvent::set_has_attacker_touched_opponent_in_defense_area() {
  _oneof_case_[0] = kAttackerTouchedOpponentInDefenseArea;
}
inline void GameEvent::clear_attacker_touched_opponent_in_defense_area() {
  if (has_attacker_touched_opponent_in_defense_area()) {
    delete event_.attacker_touched_opponent_in_defense_area_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::_internal_attacker_touched_opponent_in_defense_area() const {
  return *event_.attacker_touched_opponent_in_defense_area_;
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area)
  if (has_attacker_touched_opponent_in_defense_area()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = event_.attacker_touched_opponent_in_defense_area_;
    event_.attacker_touched_opponent_in_defense_area_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area)
  return has_attacker_touched_opponent_in_defense_area()
      ? *event_.attacker_touched_opponent_in_defense_area_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea*>(&::ssl_protos::gc::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area() {
  if (!has_attacker_touched_opponent_in_defense_area()) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area();
    event_.attacker_touched_opponent_in_defense_area_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area)
  return event_.attacker_touched_opponent_in_defense_area_;
}

// optional .ssl_protos.gc.GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
inline bool GameEvent::has_attacker_touched_opponent_in_defense_area_skipped() const {
  return event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped;
}
inline void GameEvent::set_has_attacker_touched_opponent_in_defense_area_skipped() {
  _oneof_case_[0] = kAttackerTouchedOpponentInDefenseAreaSkipped;
}
inline void GameEvent::clear_attacker_touched_opponent_in_defense_area_skipped() {
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    delete event_.attacker_touched_opponent_in_defense_area_skipped_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::_internal_attacker_touched_opponent_in_defense_area_skipped() const {
  return *event_.attacker_touched_opponent_in_defense_area_skipped_;
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area_skipped() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  if (has_attacker_touched_opponent_in_defense_area_skipped()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = event_.attacker_touched_opponent_in_defense_area_skipped_;
    event_.attacker_touched_opponent_in_defense_area_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area_skipped() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return has_attacker_touched_opponent_in_defense_area_skipped()
      ? *event_.attacker_touched_opponent_in_defense_area_skipped_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea*>(&::ssl_protos::gc::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area_skipped() {
  if (!has_attacker_touched_opponent_in_defense_area_skipped()) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    event_.attacker_touched_opponent_in_defense_area_skipped_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_AttackerTouchedOpponentInDefenseArea >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return event_.attacker_touched_opponent_in_defense_area_skipped_;
}

// optional .ssl_protos.gc.GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
inline bool GameEvent::has_bot_crash_unique_skipped() const {
  return event_case() == kBotCrashUniqueSkipped;
}
inline void GameEvent::set_has_bot_crash_unique_skipped() {
  _oneof_case_[0] = kBotCrashUniqueSkipped;
}
inline void GameEvent::clear_bot_crash_unique_skipped() {
  if (has_bot_crash_unique_skipped()) {
    delete event_.bot_crash_unique_skipped_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashUnique& GameEvent::_internal_bot_crash_unique_skipped() const {
  return *event_.bot_crash_unique_skipped_;
}
inline ::ssl_protos::gc::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique_skipped() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_crash_unique_skipped)
  if (has_bot_crash_unique_skipped()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotCrashUnique* temp = event_.bot_crash_unique_skipped_;
    event_.bot_crash_unique_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique_skipped() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_crash_unique_skipped)
  return has_bot_crash_unique_skipped()
      ? *event_.bot_crash_unique_skipped_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotCrashUnique*>(&::ssl_protos::gc::_GameEvent_BotCrashUnique_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique_skipped() {
  if (!has_bot_crash_unique_skipped()) {
    clear_event();
    set_has_bot_crash_unique_skipped();
    event_.bot_crash_unique_skipped_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotCrashUnique >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_crash_unique_skipped)
  return event_.bot_crash_unique_skipped_;
}

// optional .ssl_protos.gc.GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
inline bool GameEvent::has_bot_pushed_bot_skipped() const {
  return event_case() == kBotPushedBotSkipped;
}
inline void GameEvent::set_has_bot_pushed_bot_skipped() {
  _oneof_case_[0] = kBotPushedBotSkipped;
}
inline void GameEvent::clear_bot_pushed_bot_skipped() {
  if (has_bot_pushed_bot_skipped()) {
    delete event_.bot_pushed_bot_skipped_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_BotPushedBot& GameEvent::_internal_bot_pushed_bot_skipped() const {
  return *event_.bot_pushed_bot_skipped_;
}
inline ::ssl_protos::gc::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot_skipped() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.bot_pushed_bot_skipped)
  if (has_bot_pushed_bot_skipped()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_BotPushedBot* temp = event_.bot_pushed_bot_skipped_;
    event_.bot_pushed_bot_skipped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot_skipped() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.bot_pushed_bot_skipped)
  return has_bot_pushed_bot_skipped()
      ? *event_.bot_pushed_bot_skipped_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_BotPushedBot*>(&::ssl_protos::gc::_GameEvent_BotPushedBot_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot_skipped() {
  if (!has_bot_pushed_bot_skipped()) {
    clear_event();
    set_has_bot_pushed_bot_skipped();
    event_.bot_pushed_bot_skipped_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_BotPushedBot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.bot_pushed_bot_skipped)
  return event_.bot_pushed_bot_skipped_;
}

// optional .ssl_protos.gc.GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
inline bool GameEvent::has_defender_in_defense_area_partially() const {
  return event_case() == kDefenderInDefenseAreaPartially;
}
inline void GameEvent::set_has_defender_in_defense_area_partially() {
  _oneof_case_[0] = kDefenderInDefenseAreaPartially;
}
inline void GameEvent::clear_defender_in_defense_area_partially() {
  if (has_defender_in_defense_area_partially()) {
    delete event_.defender_in_defense_area_partially_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially& GameEvent::_internal_defender_in_defense_area_partially() const {
  return *event_.defender_in_defense_area_partially_;
}
inline ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* GameEvent::release_defender_in_defense_area_partially() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.defender_in_defense_area_partially)
  if (has_defender_in_defense_area_partially()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* temp = event_.defender_in_defense_area_partially_;
    event_.defender_in_defense_area_partially_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially& GameEvent::defender_in_defense_area_partially() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.defender_in_defense_area_partially)
  return has_defender_in_defense_area_partially()
      ? *event_.defender_in_defense_area_partially_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially*>(&::ssl_protos::gc::_GameEvent_DefenderInDefenseAreaPartially_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially* GameEvent::mutable_defender_in_defense_area_partially() {
  if (!has_defender_in_defense_area_partially()) {
    clear_event();
    set_has_defender_in_defense_area_partially();
    event_.defender_in_defense_area_partially_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_DefenderInDefenseAreaPartially >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.defender_in_defense_area_partially)
  return event_.defender_in_defense_area_partially_;
}

// optional .ssl_protos.gc.GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
inline bool GameEvent::has_multiple_placement_failures() const {
  return event_case() == kMultiplePlacementFailures;
}
inline void GameEvent::set_has_multiple_placement_failures() {
  _oneof_case_[0] = kMultiplePlacementFailures;
}
inline void GameEvent::clear_multiple_placement_failures() {
  if (has_multiple_placement_failures()) {
    delete event_.multiple_placement_failures_;
    clear_has_event();
  }
}
inline const ::ssl_protos::gc::GameEvent_MultiplePlacementFailures& GameEvent::_internal_multiple_placement_failures() const {
  return *event_.multiple_placement_failures_;
}
inline ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* GameEvent::release_multiple_placement_failures() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GameEvent.multiple_placement_failures)
  if (has_multiple_placement_failures()) {
    clear_has_event();
      ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* temp = event_.multiple_placement_failures_;
    event_.multiple_placement_failures_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ssl_protos::gc::GameEvent_MultiplePlacementFailures& GameEvent::multiple_placement_failures() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameEvent.multiple_placement_failures)
  return has_multiple_placement_failures()
      ? *event_.multiple_placement_failures_
      : *reinterpret_cast< ::ssl_protos::gc::GameEvent_MultiplePlacementFailures*>(&::ssl_protos::gc::_GameEvent_MultiplePlacementFailures_default_instance_);
}
inline ::ssl_protos::gc::GameEvent_MultiplePlacementFailures* GameEvent::mutable_multiple_placement_failures() {
  if (!has_multiple_placement_failures()) {
    clear_event();
    set_has_multiple_placement_failures();
    event_.multiple_placement_failures_ = CreateMaybeMessage< ::ssl_protos::gc::GameEvent_MultiplePlacementFailures >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GameEvent.multiple_placement_failures)
  return event_.multiple_placement_failures_;
}

inline bool GameEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void GameEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline GameEvent::EventCase GameEvent::event_case() const {
  return GameEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gc
}  // namespace ssl_protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssl_protos::gc::GameEvent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::gc::GameEvent_Type>() {
  return ::ssl_protos::gc::GameEvent_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gc_5fgame_5fevent_2eproto
