// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_ci.proto

#include "gc_ci.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5fapi_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fapi_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Input;
}  // namespace protobuf_gc_5fapi_2eproto
namespace protobuf_gc_5freferee_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5freferee_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Referee;
}  // namespace protobuf_gc_5freferee_5fmessage_2eproto
namespace protobuf_vision_5fwrapper_5ftracked_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fwrapper_5ftracked_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrackerWrapperPacket;
}  // namespace protobuf_vision_5fwrapper_5ftracked_2eproto
namespace ssl_protos {
namespace gc {
class CiInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CiInput>
      _instance;
} _CiInput_default_instance_;
class CiOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CiOutput>
      _instance;
} _CiOutput_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5fci_2eproto {
static void InitDefaultsCiInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_CiInput_default_instance_;
    new (ptr) ::ssl_protos::gc::CiInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::CiInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CiInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCiInput}, {
      &protobuf_vision_5fwrapper_5ftracked_2eproto::scc_info_TrackerWrapperPacket.base,
      &protobuf_gc_5fapi_2eproto::scc_info_Input.base,}};

static void InitDefaultsCiOutput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_CiOutput_default_instance_;
    new (ptr) ::ssl_protos::gc::CiOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::CiOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CiOutput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCiOutput}, {
      &protobuf_gc_5freferee_5fmessage_2eproto::scc_info_Referee.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CiInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CiOutput.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiInput, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiInput, tracker_packet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiInput, api_inputs_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::CiOutput, referee_msg_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ssl_protos::gc::CiInput)},
  { 11, 17, sizeof(::ssl_protos::gc::CiOutput)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_CiInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_CiOutput_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_ci.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013gc_ci.proto\022\rssl_protos.gc\032\034vision_wra"
      "pper_tracked.proto\032\014gc_api.proto\032\030gc_ref"
      "eree_message.proto\"\207\001\n\007CiInput\022\021\n\ttimest"
      "amp\030\001 \001(\003\022\?\n\016tracker_packet\030\002 \001(\0132\'.ssl_"
      "protos.vision.TrackerWrapperPacket\022(\n\nap"
      "i_inputs\030\003 \003(\0132\024.ssl_protos.gc.Input\"7\n\010"
      "CiOutput\022+\n\013referee_msg\030\001 \001(\0132\026.ssl_prot"
      "os.gc.RefereeB<Z:github.com/RoboCup-SSL/"
      "ssl-game-controller/internal/app/ci"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_ci.proto", &protobuf_RegisterTypes);
  ::protobuf_vision_5fwrapper_5ftracked_2eproto::AddDescriptors();
  ::protobuf_gc_5fapi_2eproto::AddDescriptors();
  ::protobuf_gc_5freferee_5fmessage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5fci_2eproto
namespace ssl_protos {
namespace gc {

// ===================================================================

void CiInput::InitAsDefaultInstance() {
  ::ssl_protos::gc::_CiInput_default_instance_._instance.get_mutable()->tracker_packet_ = const_cast< ::ssl_protos::vision::TrackerWrapperPacket*>(
      ::ssl_protos::vision::TrackerWrapperPacket::internal_default_instance());
}
void CiInput::clear_tracker_packet() {
  if (tracker_packet_ != NULL) tracker_packet_->Clear();
  clear_has_tracker_packet();
}
void CiInput::clear_api_inputs() {
  api_inputs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CiInput::kTimestampFieldNumber;
const int CiInput::kTrackerPacketFieldNumber;
const int CiInput::kApiInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CiInput::CiInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fci_2eproto::scc_info_CiInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.CiInput)
}
CiInput::CiInput(const CiInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      api_inputs_(from.api_inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tracker_packet()) {
    tracker_packet_ = new ::ssl_protos::vision::TrackerWrapperPacket(*from.tracker_packet_);
  } else {
    tracker_packet_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.CiInput)
}

void CiInput::SharedCtor() {
  ::memset(&tracker_packet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&tracker_packet_)) + sizeof(timestamp_));
}

CiInput::~CiInput() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.CiInput)
  SharedDtor();
}

void CiInput::SharedDtor() {
  if (this != internal_default_instance()) delete tracker_packet_;
}

void CiInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CiInput::descriptor() {
  ::protobuf_gc_5fci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CiInput& CiInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fci_2eproto::scc_info_CiInput.base);
  return *internal_default_instance();
}


void CiInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.CiInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_inputs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tracker_packet_ != NULL);
    tracker_packet_->Clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CiInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.CiInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.vision.TrackerWrapperPacket tracker_packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tracker_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssl_protos.gc.Input api_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_api_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.CiInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.CiInput)
  return false;
#undef DO_
}

void CiInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.CiInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .ssl_protos.vision.TrackerWrapperPacket tracker_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_tracker_packet(), output);
  }

  // repeated .ssl_protos.gc.Input api_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->api_inputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.CiInput)
}

::google::protobuf::uint8* CiInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.CiInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .ssl_protos.vision.TrackerWrapperPacket tracker_packet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_tracker_packet(), deterministic, target);
  }

  // repeated .ssl_protos.gc.Input api_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->api_inputs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.CiInput)
  return target;
}

size_t CiInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.CiInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ssl_protos.gc.Input api_inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->api_inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->api_inputs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.vision.TrackerWrapperPacket tracker_packet = 2;
    if (has_tracker_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tracker_packet_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CiInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.CiInput)
  GOOGLE_DCHECK_NE(&from, this);
  const CiInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CiInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.CiInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.CiInput)
    MergeFrom(*source);
  }
}

void CiInput::MergeFrom(const CiInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.CiInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  api_inputs_.MergeFrom(from.api_inputs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tracker_packet()->::ssl_protos::vision::TrackerWrapperPacket::MergeFrom(from.tracker_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CiInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.CiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CiInput::CopyFrom(const CiInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.CiInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiInput::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->api_inputs())) return false;
  if (has_tracker_packet()) {
    if (!this->tracker_packet_->IsInitialized()) return false;
  }
  return true;
}

void CiInput::Swap(CiInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CiInput::InternalSwap(CiInput* other) {
  using std::swap;
  CastToBase(&api_inputs_)->InternalSwap(CastToBase(&other->api_inputs_));
  swap(tracker_packet_, other->tracker_packet_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CiInput::GetMetadata() const {
  protobuf_gc_5fci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CiOutput::InitAsDefaultInstance() {
  ::ssl_protos::gc::_CiOutput_default_instance_._instance.get_mutable()->referee_msg_ = const_cast< ::ssl_protos::gc::Referee*>(
      ::ssl_protos::gc::Referee::internal_default_instance());
}
void CiOutput::clear_referee_msg() {
  if (referee_msg_ != NULL) referee_msg_->Clear();
  clear_has_referee_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CiOutput::kRefereeMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CiOutput::CiOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fci_2eproto::scc_info_CiOutput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.CiOutput)
}
CiOutput::CiOutput(const CiOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_referee_msg()) {
    referee_msg_ = new ::ssl_protos::gc::Referee(*from.referee_msg_);
  } else {
    referee_msg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.CiOutput)
}

void CiOutput::SharedCtor() {
  referee_msg_ = NULL;
}

CiOutput::~CiOutput() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.CiOutput)
  SharedDtor();
}

void CiOutput::SharedDtor() {
  if (this != internal_default_instance()) delete referee_msg_;
}

void CiOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CiOutput::descriptor() {
  ::protobuf_gc_5fci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CiOutput& CiOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fci_2eproto::scc_info_CiOutput.base);
  return *internal_default_instance();
}


void CiOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.CiOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(referee_msg_ != NULL);
    referee_msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CiOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.CiOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Referee referee_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_referee_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.CiOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.CiOutput)
  return false;
#undef DO_
}

void CiOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.CiOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Referee referee_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_referee_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.CiOutput)
}

::google::protobuf::uint8* CiOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.CiOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Referee referee_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_referee_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.CiOutput)
  return target;
}

size_t CiOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.CiOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Referee referee_msg = 1;
  if (has_referee_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *referee_msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CiOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.CiOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CiOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CiOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.CiOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.CiOutput)
    MergeFrom(*source);
  }
}

void CiOutput::MergeFrom(const CiOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.CiOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_referee_msg()) {
    mutable_referee_msg()->::ssl_protos::gc::Referee::MergeFrom(from.referee_msg());
  }
}

void CiOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.CiOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CiOutput::CopyFrom(const CiOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.CiOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiOutput::IsInitialized() const {
  if (has_referee_msg()) {
    if (!this->referee_msg_->IsInitialized()) return false;
  }
  return true;
}

void CiOutput::Swap(CiOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CiOutput::InternalSwap(CiOutput* other) {
  using std::swap;
  swap(referee_msg_, other->referee_msg_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CiOutput::GetMetadata() const {
  protobuf_gc_5fci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::CiInput* Arena::CreateMaybeMessage< ::ssl_protos::gc::CiInput >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::CiInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::CiOutput* Arena::CreateMaybeMessage< ::ssl_protos::gc::CiOutput >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::CiOutput >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
