// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_geometry.proto

#ifndef PROTOBUF_INCLUDED_vision_5fgeometry_2eproto
#define PROTOBUF_INCLUDED_vision_5fgeometry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fgeometry_2eproto 

namespace protobuf_vision_5fgeometry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vision_5fgeometry_2eproto
namespace ssl_protos {
namespace vision {
class BallModelChipFixedLoss;
class BallModelChipFixedLossDefaultTypeInternal;
extern BallModelChipFixedLossDefaultTypeInternal _BallModelChipFixedLoss_default_instance_;
class BallModelStraightTwoPhase;
class BallModelStraightTwoPhaseDefaultTypeInternal;
extern BallModelStraightTwoPhaseDefaultTypeInternal _BallModelStraightTwoPhase_default_instance_;
class CameraCalibration;
class CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
class FieldCircularArc;
class FieldCircularArcDefaultTypeInternal;
extern FieldCircularArcDefaultTypeInternal _FieldCircularArc_default_instance_;
class FieldLineSegment;
class FieldLineSegmentDefaultTypeInternal;
extern FieldLineSegmentDefaultTypeInternal _FieldLineSegment_default_instance_;
class FieldSize;
class FieldSizeDefaultTypeInternal;
extern FieldSizeDefaultTypeInternal _FieldSize_default_instance_;
class Geometry;
class GeometryDefaultTypeInternal;
extern GeometryDefaultTypeInternal _Geometry_default_instance_;
class GeometryModels;
class GeometryModelsDefaultTypeInternal;
extern GeometryModelsDefaultTypeInternal _GeometryModels_default_instance_;
class Vector2f;
class Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
}  // namespace vision
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::vision::BallModelChipFixedLoss* Arena::CreateMaybeMessage<::ssl_protos::vision::BallModelChipFixedLoss>(Arena*);
template<> ::ssl_protos::vision::BallModelStraightTwoPhase* Arena::CreateMaybeMessage<::ssl_protos::vision::BallModelStraightTwoPhase>(Arena*);
template<> ::ssl_protos::vision::CameraCalibration* Arena::CreateMaybeMessage<::ssl_protos::vision::CameraCalibration>(Arena*);
template<> ::ssl_protos::vision::FieldCircularArc* Arena::CreateMaybeMessage<::ssl_protos::vision::FieldCircularArc>(Arena*);
template<> ::ssl_protos::vision::FieldLineSegment* Arena::CreateMaybeMessage<::ssl_protos::vision::FieldLineSegment>(Arena*);
template<> ::ssl_protos::vision::FieldSize* Arena::CreateMaybeMessage<::ssl_protos::vision::FieldSize>(Arena*);
template<> ::ssl_protos::vision::Geometry* Arena::CreateMaybeMessage<::ssl_protos::vision::Geometry>(Arena*);
template<> ::ssl_protos::vision::GeometryModels* Arena::CreateMaybeMessage<::ssl_protos::vision::GeometryModels>(Arena*);
template<> ::ssl_protos::vision::Vector2f* Arena::CreateMaybeMessage<::ssl_protos::vision::Vector2f>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace vision {

enum FieldShapeType {
  Undefined = 0,
  CenterCircle = 1,
  TopTouchLine = 2,
  BottomTouchLine = 3,
  LeftGoalLine = 4,
  RightGoalLine = 5,
  HalfwayLine = 6,
  CenterLine = 7,
  LeftPenaltyStretch = 8,
  RightPenaltyStretch = 9,
  LeftFieldLeftPenaltyStretch = 10,
  LeftFieldRightPenaltyStretch = 11,
  RightFieldLeftPenaltyStretch = 12,
  RightFieldRightPenaltyStretch = 13
};
bool FieldShapeType_IsValid(int value);
const FieldShapeType FieldShapeType_MIN = Undefined;
const FieldShapeType FieldShapeType_MAX = RightFieldRightPenaltyStretch;
const int FieldShapeType_ARRAYSIZE = FieldShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldShapeType_descriptor();
inline const ::std::string& FieldShapeType_Name(FieldShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldShapeType_descriptor(), value);
}
inline bool FieldShapeType_Parse(
    const ::std::string& name, FieldShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldShapeType>(
    FieldShapeType_descriptor(), name, value);
}
// ===================================================================

class Vector2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.Vector2f) */ {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector2f* other);
  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2f* New() const final {
    return CreateMaybeMessage<Vector2f>(NULL);
  }

  Vector2f* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.Vector2f)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldLineSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.FieldLineSegment) */ {
 public:
  FieldLineSegment();
  virtual ~FieldLineSegment();

  FieldLineSegment(const FieldLineSegment& from);

  inline FieldLineSegment& operator=(const FieldLineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldLineSegment(FieldLineSegment&& from) noexcept
    : FieldLineSegment() {
    *this = ::std::move(from);
  }

  inline FieldLineSegment& operator=(FieldLineSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLineSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldLineSegment* internal_default_instance() {
    return reinterpret_cast<const FieldLineSegment*>(
               &_FieldLineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FieldLineSegment* other);
  friend void swap(FieldLineSegment& a, FieldLineSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldLineSegment* New() const final {
    return CreateMaybeMessage<FieldLineSegment>(NULL);
  }

  FieldLineSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldLineSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldLineSegment& from);
  void MergeFrom(const FieldLineSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldLineSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .ssl_protos.vision.Vector2f p1 = 2;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 2;
  private:
  const ::ssl_protos::vision::Vector2f& _internal_p1() const;
  public:
  const ::ssl_protos::vision::Vector2f& p1() const;
  ::ssl_protos::vision::Vector2f* release_p1();
  ::ssl_protos::vision::Vector2f* mutable_p1();
  void set_allocated_p1(::ssl_protos::vision::Vector2f* p1);

  // required .ssl_protos.vision.Vector2f p2 = 3;
  bool has_p2() const;
  void clear_p2();
  static const int kP2FieldNumber = 3;
  private:
  const ::ssl_protos::vision::Vector2f& _internal_p2() const;
  public:
  const ::ssl_protos::vision::Vector2f& p2() const;
  ::ssl_protos::vision::Vector2f* release_p2();
  ::ssl_protos::vision::Vector2f* mutable_p2();
  void set_allocated_p2(::ssl_protos::vision::Vector2f* p2);

  // required float thickness = 4;
  bool has_thickness() const;
  void clear_thickness();
  static const int kThicknessFieldNumber = 4;
  float thickness() const;
  void set_thickness(float value);

  // optional .ssl_protos.vision.FieldShapeType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::ssl_protos::vision::FieldShapeType type() const;
  void set_type(::ssl_protos::vision::FieldShapeType value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.FieldLineSegment)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_p1();
  void clear_has_p1();
  void set_has_p2();
  void clear_has_p2();
  void set_has_thickness();
  void clear_has_thickness();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ssl_protos::vision::Vector2f* p1_;
  ::ssl_protos::vision::Vector2f* p2_;
  float thickness_;
  int type_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldCircularArc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.FieldCircularArc) */ {
 public:
  FieldCircularArc();
  virtual ~FieldCircularArc();

  FieldCircularArc(const FieldCircularArc& from);

  inline FieldCircularArc& operator=(const FieldCircularArc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldCircularArc(FieldCircularArc&& from) noexcept
    : FieldCircularArc() {
    *this = ::std::move(from);
  }

  inline FieldCircularArc& operator=(FieldCircularArc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldCircularArc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldCircularArc* internal_default_instance() {
    return reinterpret_cast<const FieldCircularArc*>(
               &_FieldCircularArc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FieldCircularArc* other);
  friend void swap(FieldCircularArc& a, FieldCircularArc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldCircularArc* New() const final {
    return CreateMaybeMessage<FieldCircularArc>(NULL);
  }

  FieldCircularArc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldCircularArc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldCircularArc& from);
  void MergeFrom(const FieldCircularArc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldCircularArc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .ssl_protos.vision.Vector2f center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  private:
  const ::ssl_protos::vision::Vector2f& _internal_center() const;
  public:
  const ::ssl_protos::vision::Vector2f& center() const;
  ::ssl_protos::vision::Vector2f* release_center();
  ::ssl_protos::vision::Vector2f* mutable_center();
  void set_allocated_center(::ssl_protos::vision::Vector2f* center);

  // required float radius = 3;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // required float a1 = 4;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 4;
  float a1() const;
  void set_a1(float value);

  // required float a2 = 5;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 5;
  float a2() const;
  void set_a2(float value);

  // required float thickness = 6;
  bool has_thickness() const;
  void clear_thickness();
  static const int kThicknessFieldNumber = 6;
  float thickness() const;
  void set_thickness(float value);

  // optional .ssl_protos.vision.FieldShapeType type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::ssl_protos::vision::FieldShapeType type() const;
  void set_type(::ssl_protos::vision::FieldShapeType value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.FieldCircularArc)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_center();
  void clear_has_center();
  void set_has_radius();
  void clear_has_radius();
  void set_has_a1();
  void clear_has_a1();
  void set_has_a2();
  void clear_has_a2();
  void set_has_thickness();
  void clear_has_thickness();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ssl_protos::vision::Vector2f* center_;
  float radius_;
  float a1_;
  float a2_;
  float thickness_;
  int type_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.FieldSize) */ {
 public:
  FieldSize();
  virtual ~FieldSize();

  FieldSize(const FieldSize& from);

  inline FieldSize& operator=(const FieldSize& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldSize(FieldSize&& from) noexcept
    : FieldSize() {
    *this = ::std::move(from);
  }

  inline FieldSize& operator=(FieldSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldSize* internal_default_instance() {
    return reinterpret_cast<const FieldSize*>(
               &_FieldSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FieldSize* other);
  friend void swap(FieldSize& a, FieldSize& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldSize* New() const final {
    return CreateMaybeMessage<FieldSize>(NULL);
  }

  FieldSize* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldSize>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldSize& from);
  void MergeFrom(const FieldSize& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
  int field_lines_size() const;
  void clear_field_lines();
  static const int kFieldLinesFieldNumber = 6;
  ::ssl_protos::vision::FieldLineSegment* mutable_field_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldLineSegment >*
      mutable_field_lines();
  const ::ssl_protos::vision::FieldLineSegment& field_lines(int index) const;
  ::ssl_protos::vision::FieldLineSegment* add_field_lines();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldLineSegment >&
      field_lines() const;

  // repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
  int field_arcs_size() const;
  void clear_field_arcs();
  static const int kFieldArcsFieldNumber = 7;
  ::ssl_protos::vision::FieldCircularArc* mutable_field_arcs(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldCircularArc >*
      mutable_field_arcs();
  const ::ssl_protos::vision::FieldCircularArc& field_arcs(int index) const;
  ::ssl_protos::vision::FieldCircularArc* add_field_arcs();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldCircularArc >&
      field_arcs() const;

  // required int32 field_length = 1;
  bool has_field_length() const;
  void clear_field_length();
  static const int kFieldLengthFieldNumber = 1;
  ::google::protobuf::int32 field_length() const;
  void set_field_length(::google::protobuf::int32 value);

  // required int32 field_width = 2;
  bool has_field_width() const;
  void clear_field_width();
  static const int kFieldWidthFieldNumber = 2;
  ::google::protobuf::int32 field_width() const;
  void set_field_width(::google::protobuf::int32 value);

  // required int32 goal_width = 3;
  bool has_goal_width() const;
  void clear_goal_width();
  static const int kGoalWidthFieldNumber = 3;
  ::google::protobuf::int32 goal_width() const;
  void set_goal_width(::google::protobuf::int32 value);

  // required int32 goal_depth = 4;
  bool has_goal_depth() const;
  void clear_goal_depth();
  static const int kGoalDepthFieldNumber = 4;
  ::google::protobuf::int32 goal_depth() const;
  void set_goal_depth(::google::protobuf::int32 value);

  // required int32 boundary_width = 5;
  bool has_boundary_width() const;
  void clear_boundary_width();
  static const int kBoundaryWidthFieldNumber = 5;
  ::google::protobuf::int32 boundary_width() const;
  void set_boundary_width(::google::protobuf::int32 value);

  // optional int32 penalty_area_depth = 8;
  bool has_penalty_area_depth() const;
  void clear_penalty_area_depth();
  static const int kPenaltyAreaDepthFieldNumber = 8;
  ::google::protobuf::int32 penalty_area_depth() const;
  void set_penalty_area_depth(::google::protobuf::int32 value);

  // optional int32 penalty_area_width = 9;
  bool has_penalty_area_width() const;
  void clear_penalty_area_width();
  static const int kPenaltyAreaWidthFieldNumber = 9;
  ::google::protobuf::int32 penalty_area_width() const;
  void set_penalty_area_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.FieldSize)
 private:
  void set_has_field_length();
  void clear_has_field_length();
  void set_has_field_width();
  void clear_has_field_width();
  void set_has_goal_width();
  void clear_has_goal_width();
  void set_has_goal_depth();
  void clear_has_goal_depth();
  void set_has_boundary_width();
  void clear_has_boundary_width();
  void set_has_penalty_area_depth();
  void clear_has_penalty_area_depth();
  void set_has_penalty_area_width();
  void clear_has_penalty_area_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldLineSegment > field_lines_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldCircularArc > field_arcs_;
  ::google::protobuf::int32 field_length_;
  ::google::protobuf::int32 field_width_;
  ::google::protobuf::int32 goal_width_;
  ::google::protobuf::int32 goal_depth_;
  ::google::protobuf::int32 boundary_width_;
  ::google::protobuf::int32 penalty_area_depth_;
  ::google::protobuf::int32 penalty_area_width_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraCalibration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.CameraCalibration) */ {
 public:
  CameraCalibration();
  virtual ~CameraCalibration();

  CameraCalibration(const CameraCalibration& from);

  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraCalibration(CameraCalibration&& from) noexcept
    : CameraCalibration() {
    *this = ::std::move(from);
  }

  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
               &_CameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CameraCalibration* other);
  friend void swap(CameraCalibration& a, CameraCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCalibration* New() const final {
    return CreateMaybeMessage<CameraCalibration>(NULL);
  }

  CameraCalibration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraCalibration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraCalibration& from);
  void MergeFrom(const CameraCalibration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // required float focal_length = 2;
  bool has_focal_length() const;
  void clear_focal_length();
  static const int kFocalLengthFieldNumber = 2;
  float focal_length() const;
  void set_focal_length(float value);

  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  void clear_principal_point_x();
  static const int kPrincipalPointXFieldNumber = 3;
  float principal_point_x() const;
  void set_principal_point_x(float value);

  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  void clear_principal_point_y();
  static const int kPrincipalPointYFieldNumber = 4;
  float principal_point_y() const;
  void set_principal_point_y(float value);

  // required float distortion = 5;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 5;
  float distortion() const;
  void set_distortion(float value);

  // required float q0 = 6;
  bool has_q0() const;
  void clear_q0();
  static const int kQ0FieldNumber = 6;
  float q0() const;
  void set_q0(float value);

  // required float q1 = 7;
  bool has_q1() const;
  void clear_q1();
  static const int kQ1FieldNumber = 7;
  float q1() const;
  void set_q1(float value);

  // required float q2 = 8;
  bool has_q2() const;
  void clear_q2();
  static const int kQ2FieldNumber = 8;
  float q2() const;
  void set_q2(float value);

  // required float q3 = 9;
  bool has_q3() const;
  void clear_q3();
  static const int kQ3FieldNumber = 9;
  float q3() const;
  void set_q3(float value);

  // required float tx = 10;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 10;
  float tx() const;
  void set_tx(float value);

  // required float ty = 11;
  bool has_ty() const;
  void clear_ty();
  static const int kTyFieldNumber = 11;
  float ty() const;
  void set_ty(float value);

  // required float tz = 12;
  bool has_tz() const;
  void clear_tz();
  static const int kTzFieldNumber = 12;
  float tz() const;
  void set_tz(float value);

  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  void clear_derived_camera_world_tx();
  static const int kDerivedCameraWorldTxFieldNumber = 13;
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);

  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  void clear_derived_camera_world_ty();
  static const int kDerivedCameraWorldTyFieldNumber = 14;
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);

  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  void clear_derived_camera_world_tz();
  static const int kDerivedCameraWorldTzFieldNumber = 15;
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);

  // optional uint32 pixel_image_width = 16;
  bool has_pixel_image_width() const;
  void clear_pixel_image_width();
  static const int kPixelImageWidthFieldNumber = 16;
  ::google::protobuf::uint32 pixel_image_width() const;
  void set_pixel_image_width(::google::protobuf::uint32 value);

  // optional uint32 pixel_image_height = 17;
  bool has_pixel_image_height() const;
  void clear_pixel_image_height();
  static const int kPixelImageHeightFieldNumber = 17;
  ::google::protobuf::uint32 pixel_image_height() const;
  void set_pixel_image_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.CameraCalibration)
 private:
  void set_has_camera_id();
  void clear_has_camera_id();
  void set_has_focal_length();
  void clear_has_focal_length();
  void set_has_principal_point_x();
  void clear_has_principal_point_x();
  void set_has_principal_point_y();
  void clear_has_principal_point_y();
  void set_has_distortion();
  void clear_has_distortion();
  void set_has_q0();
  void clear_has_q0();
  void set_has_q1();
  void clear_has_q1();
  void set_has_q2();
  void clear_has_q2();
  void set_has_q3();
  void clear_has_q3();
  void set_has_tx();
  void clear_has_tx();
  void set_has_ty();
  void clear_has_ty();
  void set_has_tz();
  void clear_has_tz();
  void set_has_derived_camera_world_tx();
  void clear_has_derived_camera_world_tx();
  void set_has_derived_camera_world_ty();
  void clear_has_derived_camera_world_ty();
  void set_has_derived_camera_world_tz();
  void clear_has_derived_camera_world_tz();
  void set_has_pixel_image_width();
  void clear_has_pixel_image_width();
  void set_has_pixel_image_height();
  void clear_has_pixel_image_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 camera_id_;
  float focal_length_;
  float principal_point_x_;
  float principal_point_y_;
  float distortion_;
  float q0_;
  float q1_;
  float q2_;
  float q3_;
  float tx_;
  float ty_;
  float tz_;
  float derived_camera_world_tx_;
  float derived_camera_world_ty_;
  float derived_camera_world_tz_;
  ::google::protobuf::uint32 pixel_image_width_;
  ::google::protobuf::uint32 pixel_image_height_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BallModelStraightTwoPhase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.BallModelStraightTwoPhase) */ {
 public:
  BallModelStraightTwoPhase();
  virtual ~BallModelStraightTwoPhase();

  BallModelStraightTwoPhase(const BallModelStraightTwoPhase& from);

  inline BallModelStraightTwoPhase& operator=(const BallModelStraightTwoPhase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BallModelStraightTwoPhase(BallModelStraightTwoPhase&& from) noexcept
    : BallModelStraightTwoPhase() {
    *this = ::std::move(from);
  }

  inline BallModelStraightTwoPhase& operator=(BallModelStraightTwoPhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BallModelStraightTwoPhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallModelStraightTwoPhase* internal_default_instance() {
    return reinterpret_cast<const BallModelStraightTwoPhase*>(
               &_BallModelStraightTwoPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BallModelStraightTwoPhase* other);
  friend void swap(BallModelStraightTwoPhase& a, BallModelStraightTwoPhase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BallModelStraightTwoPhase* New() const final {
    return CreateMaybeMessage<BallModelStraightTwoPhase>(NULL);
  }

  BallModelStraightTwoPhase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BallModelStraightTwoPhase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BallModelStraightTwoPhase& from);
  void MergeFrom(const BallModelStraightTwoPhase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallModelStraightTwoPhase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double acc_slide = 1;
  bool has_acc_slide() const;
  void clear_acc_slide();
  static const int kAccSlideFieldNumber = 1;
  double acc_slide() const;
  void set_acc_slide(double value);

  // required double acc_roll = 2;
  bool has_acc_roll() const;
  void clear_acc_roll();
  static const int kAccRollFieldNumber = 2;
  double acc_roll() const;
  void set_acc_roll(double value);

  // required double k_switch = 3;
  bool has_k_switch() const;
  void clear_k_switch();
  static const int kKSwitchFieldNumber = 3;
  double k_switch() const;
  void set_k_switch(double value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.BallModelStraightTwoPhase)
 private:
  void set_has_acc_slide();
  void clear_has_acc_slide();
  void set_has_acc_roll();
  void clear_has_acc_roll();
  void set_has_k_switch();
  void clear_has_k_switch();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double acc_slide_;
  double acc_roll_;
  double k_switch_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BallModelChipFixedLoss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.BallModelChipFixedLoss) */ {
 public:
  BallModelChipFixedLoss();
  virtual ~BallModelChipFixedLoss();

  BallModelChipFixedLoss(const BallModelChipFixedLoss& from);

  inline BallModelChipFixedLoss& operator=(const BallModelChipFixedLoss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BallModelChipFixedLoss(BallModelChipFixedLoss&& from) noexcept
    : BallModelChipFixedLoss() {
    *this = ::std::move(from);
  }

  inline BallModelChipFixedLoss& operator=(BallModelChipFixedLoss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BallModelChipFixedLoss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallModelChipFixedLoss* internal_default_instance() {
    return reinterpret_cast<const BallModelChipFixedLoss*>(
               &_BallModelChipFixedLoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BallModelChipFixedLoss* other);
  friend void swap(BallModelChipFixedLoss& a, BallModelChipFixedLoss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BallModelChipFixedLoss* New() const final {
    return CreateMaybeMessage<BallModelChipFixedLoss>(NULL);
  }

  BallModelChipFixedLoss* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BallModelChipFixedLoss>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BallModelChipFixedLoss& from);
  void MergeFrom(const BallModelChipFixedLoss& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallModelChipFixedLoss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double damping_xy_first_hop = 1;
  bool has_damping_xy_first_hop() const;
  void clear_damping_xy_first_hop();
  static const int kDampingXyFirstHopFieldNumber = 1;
  double damping_xy_first_hop() const;
  void set_damping_xy_first_hop(double value);

  // required double damping_xy_other_hops = 2;
  bool has_damping_xy_other_hops() const;
  void clear_damping_xy_other_hops();
  static const int kDampingXyOtherHopsFieldNumber = 2;
  double damping_xy_other_hops() const;
  void set_damping_xy_other_hops(double value);

  // required double damping_z = 3;
  bool has_damping_z() const;
  void clear_damping_z();
  static const int kDampingZFieldNumber = 3;
  double damping_z() const;
  void set_damping_z(double value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.BallModelChipFixedLoss)
 private:
  void set_has_damping_xy_first_hop();
  void clear_has_damping_xy_first_hop();
  void set_has_damping_xy_other_hops();
  void clear_has_damping_xy_other_hops();
  void set_has_damping_z();
  void clear_has_damping_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double damping_xy_first_hop_;
  double damping_xy_other_hops_;
  double damping_z_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeometryModels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.GeometryModels) */ {
 public:
  GeometryModels();
  virtual ~GeometryModels();

  GeometryModels(const GeometryModels& from);

  inline GeometryModels& operator=(const GeometryModels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeometryModels(GeometryModels&& from) noexcept
    : GeometryModels() {
    *this = ::std::move(from);
  }

  inline GeometryModels& operator=(GeometryModels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeometryModels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryModels* internal_default_instance() {
    return reinterpret_cast<const GeometryModels*>(
               &_GeometryModels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GeometryModels* other);
  friend void swap(GeometryModels& a, GeometryModels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeometryModels* New() const final {
    return CreateMaybeMessage<GeometryModels>(NULL);
  }

  GeometryModels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeometryModels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeometryModels& from);
  void MergeFrom(const GeometryModels& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometryModels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
  bool has_straight_two_phase() const;
  void clear_straight_two_phase();
  static const int kStraightTwoPhaseFieldNumber = 1;
  private:
  const ::ssl_protos::vision::BallModelStraightTwoPhase& _internal_straight_two_phase() const;
  public:
  const ::ssl_protos::vision::BallModelStraightTwoPhase& straight_two_phase() const;
  ::ssl_protos::vision::BallModelStraightTwoPhase* release_straight_two_phase();
  ::ssl_protos::vision::BallModelStraightTwoPhase* mutable_straight_two_phase();
  void set_allocated_straight_two_phase(::ssl_protos::vision::BallModelStraightTwoPhase* straight_two_phase);

  // optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
  bool has_chip_fixed_loss() const;
  void clear_chip_fixed_loss();
  static const int kChipFixedLossFieldNumber = 2;
  private:
  const ::ssl_protos::vision::BallModelChipFixedLoss& _internal_chip_fixed_loss() const;
  public:
  const ::ssl_protos::vision::BallModelChipFixedLoss& chip_fixed_loss() const;
  ::ssl_protos::vision::BallModelChipFixedLoss* release_chip_fixed_loss();
  ::ssl_protos::vision::BallModelChipFixedLoss* mutable_chip_fixed_loss();
  void set_allocated_chip_fixed_loss(::ssl_protos::vision::BallModelChipFixedLoss* chip_fixed_loss);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.GeometryModels)
 private:
  void set_has_straight_two_phase();
  void clear_has_straight_two_phase();
  void set_has_chip_fixed_loss();
  void clear_has_chip_fixed_loss();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::vision::BallModelStraightTwoPhase* straight_two_phase_;
  ::ssl_protos::vision::BallModelChipFixedLoss* chip_fixed_loss_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Geometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.Geometry) */ {
 public:
  Geometry();
  virtual ~Geometry();

  Geometry(const Geometry& from);

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geometry(Geometry&& from) noexcept
    : Geometry() {
    *this = ::std::move(from);
  }

  inline Geometry& operator=(Geometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
               &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Geometry* other);
  friend void swap(Geometry& a, Geometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geometry* New() const final {
    return CreateMaybeMessage<Geometry>(NULL);
  }

  Geometry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Geometry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Geometry& from);
  void MergeFrom(const Geometry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.vision.CameraCalibration calib = 2;
  int calib_size() const;
  void clear_calib();
  static const int kCalibFieldNumber = 2;
  ::ssl_protos::vision::CameraCalibration* mutable_calib(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::CameraCalibration >*
      mutable_calib();
  const ::ssl_protos::vision::CameraCalibration& calib(int index) const;
  ::ssl_protos::vision::CameraCalibration* add_calib();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::CameraCalibration >&
      calib() const;

  // required .ssl_protos.vision.FieldSize field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  private:
  const ::ssl_protos::vision::FieldSize& _internal_field() const;
  public:
  const ::ssl_protos::vision::FieldSize& field() const;
  ::ssl_protos::vision::FieldSize* release_field();
  ::ssl_protos::vision::FieldSize* mutable_field();
  void set_allocated_field(::ssl_protos::vision::FieldSize* field);

  // optional .ssl_protos.vision.GeometryModels models = 3;
  bool has_models() const;
  void clear_models();
  static const int kModelsFieldNumber = 3;
  private:
  const ::ssl_protos::vision::GeometryModels& _internal_models() const;
  public:
  const ::ssl_protos::vision::GeometryModels& models() const;
  ::ssl_protos::vision::GeometryModels* release_models();
  ::ssl_protos::vision::GeometryModels* mutable_models();
  void set_allocated_models(::ssl_protos::vision::GeometryModels* models);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.Geometry)
 private:
  void set_has_field();
  void clear_has_field();
  void set_has_models();
  void clear_has_models();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::CameraCalibration > calib_;
  ::ssl_protos::vision::FieldSize* field_;
  ::ssl_protos::vision::GeometryModels* models_;
  friend struct ::protobuf_vision_5fgeometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2f

// required float x = 1;
inline bool Vector2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.Vector2f.x)
  return x_;
}
inline void Vector2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.Vector2f.x)
}

// required float y = 2;
inline bool Vector2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.Vector2f.y)
  return y_;
}
inline void Vector2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.Vector2f.y)
}

// -------------------------------------------------------------------

// FieldLineSegment

// required string name = 1;
inline bool FieldLineSegment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLineSegment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLineSegment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLineSegment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldLineSegment.name)
  return name_.GetNoArena();
}
inline void FieldLineSegment::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldLineSegment.name)
}
#if LANG_CXX11
inline void FieldLineSegment::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.vision.FieldLineSegment.name)
}
#endif
inline void FieldLineSegment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.vision.FieldLineSegment.name)
}
inline void FieldLineSegment::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.vision.FieldLineSegment.name)
}
inline ::std::string* FieldLineSegment::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldLineSegment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.FieldLineSegment.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldLineSegment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.FieldLineSegment.name)
}

// required .ssl_protos.vision.Vector2f p1 = 2;
inline bool FieldLineSegment::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLineSegment::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLineSegment::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLineSegment::clear_p1() {
  if (p1_ != NULL) p1_->Clear();
  clear_has_p1();
}
inline const ::ssl_protos::vision::Vector2f& FieldLineSegment::_internal_p1() const {
  return *p1_;
}
inline const ::ssl_protos::vision::Vector2f& FieldLineSegment::p1() const {
  const ::ssl_protos::vision::Vector2f* p = p1_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldLineSegment.p1)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::Vector2f*>(
      &::ssl_protos::vision::_Vector2f_default_instance_);
}
inline ::ssl_protos::vision::Vector2f* FieldLineSegment::release_p1() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.FieldLineSegment.p1)
  clear_has_p1();
  ::ssl_protos::vision::Vector2f* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::Vector2f* FieldLineSegment::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::Vector2f>(GetArenaNoVirtual());
    p1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldLineSegment.p1)
  return p1_;
}
inline void FieldLineSegment::set_allocated_p1(::ssl_protos::vision::Vector2f* p1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p1_;
  }
  if (p1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    set_has_p1();
  } else {
    clear_has_p1();
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.FieldLineSegment.p1)
}

// required .ssl_protos.vision.Vector2f p2 = 3;
inline bool FieldLineSegment::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLineSegment::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLineSegment::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLineSegment::clear_p2() {
  if (p2_ != NULL) p2_->Clear();
  clear_has_p2();
}
inline const ::ssl_protos::vision::Vector2f& FieldLineSegment::_internal_p2() const {
  return *p2_;
}
inline const ::ssl_protos::vision::Vector2f& FieldLineSegment::p2() const {
  const ::ssl_protos::vision::Vector2f* p = p2_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldLineSegment.p2)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::Vector2f*>(
      &::ssl_protos::vision::_Vector2f_default_instance_);
}
inline ::ssl_protos::vision::Vector2f* FieldLineSegment::release_p2() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.FieldLineSegment.p2)
  clear_has_p2();
  ::ssl_protos::vision::Vector2f* temp = p2_;
  p2_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::Vector2f* FieldLineSegment::mutable_p2() {
  set_has_p2();
  if (p2_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::Vector2f>(GetArenaNoVirtual());
    p2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldLineSegment.p2)
  return p2_;
}
inline void FieldLineSegment::set_allocated_p2(::ssl_protos::vision::Vector2f* p2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p2_;
  }
  if (p2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p2, submessage_arena);
    }
    set_has_p2();
  } else {
    clear_has_p2();
  }
  p2_ = p2;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.FieldLineSegment.p2)
}

// required float thickness = 4;
inline bool FieldLineSegment::has_thickness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLineSegment::set_has_thickness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLineSegment::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLineSegment::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline float FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldLineSegment.thickness)
  return thickness_;
}
inline void FieldLineSegment::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldLineSegment.thickness)
}

// optional .ssl_protos.vision.FieldShapeType type = 5;
inline bool FieldLineSegment::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldLineSegment::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldLineSegment::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldLineSegment::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ssl_protos::vision::FieldShapeType FieldLineSegment::type() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldLineSegment.type)
  return static_cast< ::ssl_protos::vision::FieldShapeType >(type_);
}
inline void FieldLineSegment::set_type(::ssl_protos::vision::FieldShapeType value) {
  assert(::ssl_protos::vision::FieldShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldLineSegment.type)
}

// -------------------------------------------------------------------

// FieldCircularArc

// required string name = 1;
inline bool FieldCircularArc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldCircularArc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldCircularArc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldCircularArc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FieldCircularArc::name() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.name)
  return name_.GetNoArena();
}
inline void FieldCircularArc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.name)
}
#if LANG_CXX11
inline void FieldCircularArc::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.vision.FieldCircularArc.name)
}
#endif
inline void FieldCircularArc::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.vision.FieldCircularArc.name)
}
inline void FieldCircularArc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.vision.FieldCircularArc.name)
}
inline ::std::string* FieldCircularArc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldCircularArc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldCircularArc::release_name() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.FieldCircularArc.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldCircularArc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.FieldCircularArc.name)
}

// required .ssl_protos.vision.Vector2f center = 2;
inline bool FieldCircularArc::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldCircularArc::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldCircularArc::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldCircularArc::clear_center() {
  if (center_ != NULL) center_->Clear();
  clear_has_center();
}
inline const ::ssl_protos::vision::Vector2f& FieldCircularArc::_internal_center() const {
  return *center_;
}
inline const ::ssl_protos::vision::Vector2f& FieldCircularArc::center() const {
  const ::ssl_protos::vision::Vector2f* p = center_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.center)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::Vector2f*>(
      &::ssl_protos::vision::_Vector2f_default_instance_);
}
inline ::ssl_protos::vision::Vector2f* FieldCircularArc::release_center() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.FieldCircularArc.center)
  clear_has_center();
  ::ssl_protos::vision::Vector2f* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::Vector2f* FieldCircularArc::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::Vector2f>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldCircularArc.center)
  return center_;
}
inline void FieldCircularArc::set_allocated_center(::ssl_protos::vision::Vector2f* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_;
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
  } else {
    clear_has_center();
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.FieldCircularArc.center)
}

// required float radius = 3;
inline bool FieldCircularArc::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldCircularArc::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldCircularArc::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldCircularArc::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float FieldCircularArc::radius() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.radius)
  return radius_;
}
inline void FieldCircularArc::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.radius)
}

// required float a1 = 4;
inline bool FieldCircularArc::has_a1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldCircularArc::set_has_a1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldCircularArc::clear_has_a1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldCircularArc::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
inline float FieldCircularArc::a1() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.a1)
  return a1_;
}
inline void FieldCircularArc::set_a1(float value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.a1)
}

// required float a2 = 5;
inline bool FieldCircularArc::has_a2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldCircularArc::set_has_a2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldCircularArc::clear_has_a2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldCircularArc::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
inline float FieldCircularArc::a2() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.a2)
  return a2_;
}
inline void FieldCircularArc::set_a2(float value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.a2)
}

// required float thickness = 6;
inline bool FieldCircularArc::has_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FieldCircularArc::set_has_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FieldCircularArc::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FieldCircularArc::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline float FieldCircularArc::thickness() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.thickness)
  return thickness_;
}
inline void FieldCircularArc::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.thickness)
}

// optional .ssl_protos.vision.FieldShapeType type = 7;
inline bool FieldCircularArc::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FieldCircularArc::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FieldCircularArc::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FieldCircularArc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ssl_protos::vision::FieldShapeType FieldCircularArc::type() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldCircularArc.type)
  return static_cast< ::ssl_protos::vision::FieldShapeType >(type_);
}
inline void FieldCircularArc::set_type(::ssl_protos::vision::FieldShapeType value) {
  assert(::ssl_protos::vision::FieldShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldCircularArc.type)
}

// -------------------------------------------------------------------

// FieldSize

// required int32 field_length = 1;
inline bool FieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
inline ::google::protobuf::int32 FieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.field_length)
  return field_length_;
}
inline void FieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.field_length)
}

// required int32 field_width = 2;
inline bool FieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
inline ::google::protobuf::int32 FieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.field_width)
  return field_width_;
}
inline void FieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.field_width)
}

// required int32 goal_width = 3;
inline bool FieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
inline ::google::protobuf::int32 FieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.goal_width)
  return goal_width_;
}
inline void FieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.goal_width)
}

// required int32 goal_depth = 4;
inline bool FieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
inline ::google::protobuf::int32 FieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.goal_depth)
  return goal_depth_;
}
inline void FieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.goal_depth)
}

// required int32 boundary_width = 5;
inline bool FieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
inline ::google::protobuf::int32 FieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.boundary_width)
  return boundary_width_;
}
inline void FieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.boundary_width)
}

// repeated .ssl_protos.vision.FieldLineSegment field_lines = 6;
inline int FieldSize::field_lines_size() const {
  return field_lines_.size();
}
inline void FieldSize::clear_field_lines() {
  field_lines_.Clear();
}
inline ::ssl_protos::vision::FieldLineSegment* FieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldSize.field_lines)
  return field_lines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldLineSegment >*
FieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.FieldSize.field_lines)
  return &field_lines_;
}
inline const ::ssl_protos::vision::FieldLineSegment& FieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.field_lines)
  return field_lines_.Get(index);
}
inline ::ssl_protos::vision::FieldLineSegment* FieldSize::add_field_lines() {
  // @@protoc_insertion_point(field_add:ssl_protos.vision.FieldSize.field_lines)
  return field_lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldLineSegment >&
FieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.FieldSize.field_lines)
  return field_lines_;
}

// repeated .ssl_protos.vision.FieldCircularArc field_arcs = 7;
inline int FieldSize::field_arcs_size() const {
  return field_arcs_.size();
}
inline void FieldSize::clear_field_arcs() {
  field_arcs_.Clear();
}
inline ::ssl_protos::vision::FieldCircularArc* FieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.FieldSize.field_arcs)
  return field_arcs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldCircularArc >*
FieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.FieldSize.field_arcs)
  return &field_arcs_;
}
inline const ::ssl_protos::vision::FieldCircularArc& FieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.field_arcs)
  return field_arcs_.Get(index);
}
inline ::ssl_protos::vision::FieldCircularArc* FieldSize::add_field_arcs() {
  // @@protoc_insertion_point(field_add:ssl_protos.vision.FieldSize.field_arcs)
  return field_arcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::FieldCircularArc >&
FieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.FieldSize.field_arcs)
  return field_arcs_;
}

// optional int32 penalty_area_depth = 8;
inline bool FieldSize::has_penalty_area_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FieldSize::set_has_penalty_area_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FieldSize::clear_has_penalty_area_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FieldSize::clear_penalty_area_depth() {
  penalty_area_depth_ = 0;
  clear_has_penalty_area_depth();
}
inline ::google::protobuf::int32 FieldSize::penalty_area_depth() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.penalty_area_depth)
  return penalty_area_depth_;
}
inline void FieldSize::set_penalty_area_depth(::google::protobuf::int32 value) {
  set_has_penalty_area_depth();
  penalty_area_depth_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.penalty_area_depth)
}

// optional int32 penalty_area_width = 9;
inline bool FieldSize::has_penalty_area_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FieldSize::set_has_penalty_area_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FieldSize::clear_has_penalty_area_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FieldSize::clear_penalty_area_width() {
  penalty_area_width_ = 0;
  clear_has_penalty_area_width();
}
inline ::google::protobuf::int32 FieldSize::penalty_area_width() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.FieldSize.penalty_area_width)
  return penalty_area_width_;
}
inline void FieldSize::set_penalty_area_width(::google::protobuf::int32 value) {
  set_has_penalty_area_width();
  penalty_area_width_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.FieldSize.penalty_area_width)
}

// -------------------------------------------------------------------

// CameraCalibration

// required uint32 camera_id = 1;
inline bool CameraCalibration::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraCalibration::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraCalibration::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 CameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.camera_id)
  return camera_id_;
}
inline void CameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.camera_id)
}

// required float focal_length = 2;
inline bool CameraCalibration::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraCalibration::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraCalibration::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
inline float CameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.focal_length)
  return focal_length_;
}
inline void CameraCalibration::set_focal_length(float value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.focal_length)
}

// required float principal_point_x = 3;
inline bool CameraCalibration::has_principal_point_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraCalibration::set_has_principal_point_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraCalibration::clear_has_principal_point_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  clear_has_principal_point_x();
}
inline float CameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.principal_point_x)
  return principal_point_x_;
}
inline void CameraCalibration::set_principal_point_x(float value) {
  set_has_principal_point_x();
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
inline bool CameraCalibration::has_principal_point_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraCalibration::set_has_principal_point_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraCalibration::clear_has_principal_point_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  clear_has_principal_point_y();
}
inline float CameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.principal_point_y)
  return principal_point_y_;
}
inline void CameraCalibration::set_principal_point_y(float value) {
  set_has_principal_point_y();
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.principal_point_y)
}

// required float distortion = 5;
inline bool CameraCalibration::has_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraCalibration::set_has_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraCalibration::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraCalibration::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
inline float CameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.distortion)
  return distortion_;
}
inline void CameraCalibration::set_distortion(float value) {
  set_has_distortion();
  distortion_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.distortion)
}

// required float q0 = 6;
inline bool CameraCalibration::has_q0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraCalibration::set_has_q0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraCalibration::clear_has_q0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraCalibration::clear_q0() {
  q0_ = 0;
  clear_has_q0();
}
inline float CameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.q0)
  return q0_;
}
inline void CameraCalibration::set_q0(float value) {
  set_has_q0();
  q0_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.q0)
}

// required float q1 = 7;
inline bool CameraCalibration::has_q1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraCalibration::set_has_q1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraCalibration::clear_has_q1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraCalibration::clear_q1() {
  q1_ = 0;
  clear_has_q1();
}
inline float CameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.q1)
  return q1_;
}
inline void CameraCalibration::set_q1(float value) {
  set_has_q1();
  q1_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.q1)
}

// required float q2 = 8;
inline bool CameraCalibration::has_q2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraCalibration::set_has_q2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraCalibration::clear_has_q2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraCalibration::clear_q2() {
  q2_ = 0;
  clear_has_q2();
}
inline float CameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.q2)
  return q2_;
}
inline void CameraCalibration::set_q2(float value) {
  set_has_q2();
  q2_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.q2)
}

// required float q3 = 9;
inline bool CameraCalibration::has_q3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraCalibration::set_has_q3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraCalibration::clear_has_q3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraCalibration::clear_q3() {
  q3_ = 0;
  clear_has_q3();
}
inline float CameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.q3)
  return q3_;
}
inline void CameraCalibration::set_q3(float value) {
  set_has_q3();
  q3_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.q3)
}

// required float tx = 10;
inline bool CameraCalibration::has_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraCalibration::set_has_tx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraCalibration::clear_has_tx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraCalibration::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline float CameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.tx)
  return tx_;
}
inline void CameraCalibration::set_tx(float value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.tx)
}

// required float ty = 11;
inline bool CameraCalibration::has_ty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraCalibration::set_has_ty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraCalibration::clear_has_ty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraCalibration::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline float CameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.ty)
  return ty_;
}
inline void CameraCalibration::set_ty(float value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.ty)
}

// required float tz = 12;
inline bool CameraCalibration::has_tz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraCalibration::set_has_tz() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraCalibration::clear_has_tz() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraCalibration::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline float CameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.tz)
  return tz_;
}
inline void CameraCalibration::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
inline bool CameraCalibration::has_derived_camera_world_tx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraCalibration::set_has_derived_camera_world_tx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraCalibration::clear_has_derived_camera_world_tx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  clear_has_derived_camera_world_tx();
}
inline float CameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
inline void CameraCalibration::set_derived_camera_world_tx(float value) {
  set_has_derived_camera_world_tx();
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
inline bool CameraCalibration::has_derived_camera_world_ty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraCalibration::set_has_derived_camera_world_ty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraCalibration::clear_has_derived_camera_world_ty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  clear_has_derived_camera_world_ty();
}
inline float CameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
inline void CameraCalibration::set_derived_camera_world_ty(float value) {
  set_has_derived_camera_world_ty();
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
inline bool CameraCalibration::has_derived_camera_world_tz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraCalibration::set_has_derived_camera_world_tz() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraCalibration::clear_has_derived_camera_world_tz() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  clear_has_derived_camera_world_tz();
}
inline float CameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
inline void CameraCalibration::set_derived_camera_world_tz(float value) {
  set_has_derived_camera_world_tz();
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.derived_camera_world_tz)
}

// optional uint32 pixel_image_width = 16;
inline bool CameraCalibration::has_pixel_image_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraCalibration::set_has_pixel_image_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraCalibration::clear_has_pixel_image_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraCalibration::clear_pixel_image_width() {
  pixel_image_width_ = 0u;
  clear_has_pixel_image_width();
}
inline ::google::protobuf::uint32 CameraCalibration::pixel_image_width() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.pixel_image_width)
  return pixel_image_width_;
}
inline void CameraCalibration::set_pixel_image_width(::google::protobuf::uint32 value) {
  set_has_pixel_image_width();
  pixel_image_width_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.pixel_image_width)
}

// optional uint32 pixel_image_height = 17;
inline bool CameraCalibration::has_pixel_image_height() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CameraCalibration::set_has_pixel_image_height() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CameraCalibration::clear_has_pixel_image_height() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CameraCalibration::clear_pixel_image_height() {
  pixel_image_height_ = 0u;
  clear_has_pixel_image_height();
}
inline ::google::protobuf::uint32 CameraCalibration::pixel_image_height() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.CameraCalibration.pixel_image_height)
  return pixel_image_height_;
}
inline void CameraCalibration::set_pixel_image_height(::google::protobuf::uint32 value) {
  set_has_pixel_image_height();
  pixel_image_height_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.CameraCalibration.pixel_image_height)
}

// -------------------------------------------------------------------

// BallModelStraightTwoPhase

// required double acc_slide = 1;
inline bool BallModelStraightTwoPhase::has_acc_slide() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallModelStraightTwoPhase::set_has_acc_slide() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallModelStraightTwoPhase::clear_has_acc_slide() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallModelStraightTwoPhase::clear_acc_slide() {
  acc_slide_ = 0;
  clear_has_acc_slide();
}
inline double BallModelStraightTwoPhase::acc_slide() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelStraightTwoPhase.acc_slide)
  return acc_slide_;
}
inline void BallModelStraightTwoPhase::set_acc_slide(double value) {
  set_has_acc_slide();
  acc_slide_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelStraightTwoPhase.acc_slide)
}

// required double acc_roll = 2;
inline bool BallModelStraightTwoPhase::has_acc_roll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallModelStraightTwoPhase::set_has_acc_roll() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallModelStraightTwoPhase::clear_has_acc_roll() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallModelStraightTwoPhase::clear_acc_roll() {
  acc_roll_ = 0;
  clear_has_acc_roll();
}
inline double BallModelStraightTwoPhase::acc_roll() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelStraightTwoPhase.acc_roll)
  return acc_roll_;
}
inline void BallModelStraightTwoPhase::set_acc_roll(double value) {
  set_has_acc_roll();
  acc_roll_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelStraightTwoPhase.acc_roll)
}

// required double k_switch = 3;
inline bool BallModelStraightTwoPhase::has_k_switch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallModelStraightTwoPhase::set_has_k_switch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallModelStraightTwoPhase::clear_has_k_switch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallModelStraightTwoPhase::clear_k_switch() {
  k_switch_ = 0;
  clear_has_k_switch();
}
inline double BallModelStraightTwoPhase::k_switch() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelStraightTwoPhase.k_switch)
  return k_switch_;
}
inline void BallModelStraightTwoPhase::set_k_switch(double value) {
  set_has_k_switch();
  k_switch_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelStraightTwoPhase.k_switch)
}

// -------------------------------------------------------------------

// BallModelChipFixedLoss

// required double damping_xy_first_hop = 1;
inline bool BallModelChipFixedLoss::has_damping_xy_first_hop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallModelChipFixedLoss::set_has_damping_xy_first_hop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallModelChipFixedLoss::clear_has_damping_xy_first_hop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallModelChipFixedLoss::clear_damping_xy_first_hop() {
  damping_xy_first_hop_ = 0;
  clear_has_damping_xy_first_hop();
}
inline double BallModelChipFixedLoss::damping_xy_first_hop() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelChipFixedLoss.damping_xy_first_hop)
  return damping_xy_first_hop_;
}
inline void BallModelChipFixedLoss::set_damping_xy_first_hop(double value) {
  set_has_damping_xy_first_hop();
  damping_xy_first_hop_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelChipFixedLoss.damping_xy_first_hop)
}

// required double damping_xy_other_hops = 2;
inline bool BallModelChipFixedLoss::has_damping_xy_other_hops() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallModelChipFixedLoss::set_has_damping_xy_other_hops() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallModelChipFixedLoss::clear_has_damping_xy_other_hops() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallModelChipFixedLoss::clear_damping_xy_other_hops() {
  damping_xy_other_hops_ = 0;
  clear_has_damping_xy_other_hops();
}
inline double BallModelChipFixedLoss::damping_xy_other_hops() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelChipFixedLoss.damping_xy_other_hops)
  return damping_xy_other_hops_;
}
inline void BallModelChipFixedLoss::set_damping_xy_other_hops(double value) {
  set_has_damping_xy_other_hops();
  damping_xy_other_hops_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelChipFixedLoss.damping_xy_other_hops)
}

// required double damping_z = 3;
inline bool BallModelChipFixedLoss::has_damping_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallModelChipFixedLoss::set_has_damping_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallModelChipFixedLoss::clear_has_damping_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallModelChipFixedLoss::clear_damping_z() {
  damping_z_ = 0;
  clear_has_damping_z();
}
inline double BallModelChipFixedLoss::damping_z() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.BallModelChipFixedLoss.damping_z)
  return damping_z_;
}
inline void BallModelChipFixedLoss::set_damping_z(double value) {
  set_has_damping_z();
  damping_z_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.BallModelChipFixedLoss.damping_z)
}

// -------------------------------------------------------------------

// GeometryModels

// optional .ssl_protos.vision.BallModelStraightTwoPhase straight_two_phase = 1;
inline bool GeometryModels::has_straight_two_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeometryModels::set_has_straight_two_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeometryModels::clear_has_straight_two_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeometryModels::clear_straight_two_phase() {
  if (straight_two_phase_ != NULL) straight_two_phase_->Clear();
  clear_has_straight_two_phase();
}
inline const ::ssl_protos::vision::BallModelStraightTwoPhase& GeometryModels::_internal_straight_two_phase() const {
  return *straight_two_phase_;
}
inline const ::ssl_protos::vision::BallModelStraightTwoPhase& GeometryModels::straight_two_phase() const {
  const ::ssl_protos::vision::BallModelStraightTwoPhase* p = straight_two_phase_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.GeometryModels.straight_two_phase)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::BallModelStraightTwoPhase*>(
      &::ssl_protos::vision::_BallModelStraightTwoPhase_default_instance_);
}
inline ::ssl_protos::vision::BallModelStraightTwoPhase* GeometryModels::release_straight_two_phase() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.GeometryModels.straight_two_phase)
  clear_has_straight_two_phase();
  ::ssl_protos::vision::BallModelStraightTwoPhase* temp = straight_two_phase_;
  straight_two_phase_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::BallModelStraightTwoPhase* GeometryModels::mutable_straight_two_phase() {
  set_has_straight_two_phase();
  if (straight_two_phase_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::BallModelStraightTwoPhase>(GetArenaNoVirtual());
    straight_two_phase_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.GeometryModels.straight_two_phase)
  return straight_two_phase_;
}
inline void GeometryModels::set_allocated_straight_two_phase(::ssl_protos::vision::BallModelStraightTwoPhase* straight_two_phase) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete straight_two_phase_;
  }
  if (straight_two_phase) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      straight_two_phase = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, straight_two_phase, submessage_arena);
    }
    set_has_straight_two_phase();
  } else {
    clear_has_straight_two_phase();
  }
  straight_two_phase_ = straight_two_phase;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.GeometryModels.straight_two_phase)
}

// optional .ssl_protos.vision.BallModelChipFixedLoss chip_fixed_loss = 2;
inline bool GeometryModels::has_chip_fixed_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeometryModels::set_has_chip_fixed_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeometryModels::clear_has_chip_fixed_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeometryModels::clear_chip_fixed_loss() {
  if (chip_fixed_loss_ != NULL) chip_fixed_loss_->Clear();
  clear_has_chip_fixed_loss();
}
inline const ::ssl_protos::vision::BallModelChipFixedLoss& GeometryModels::_internal_chip_fixed_loss() const {
  return *chip_fixed_loss_;
}
inline const ::ssl_protos::vision::BallModelChipFixedLoss& GeometryModels::chip_fixed_loss() const {
  const ::ssl_protos::vision::BallModelChipFixedLoss* p = chip_fixed_loss_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.GeometryModels.chip_fixed_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::BallModelChipFixedLoss*>(
      &::ssl_protos::vision::_BallModelChipFixedLoss_default_instance_);
}
inline ::ssl_protos::vision::BallModelChipFixedLoss* GeometryModels::release_chip_fixed_loss() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.GeometryModels.chip_fixed_loss)
  clear_has_chip_fixed_loss();
  ::ssl_protos::vision::BallModelChipFixedLoss* temp = chip_fixed_loss_;
  chip_fixed_loss_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::BallModelChipFixedLoss* GeometryModels::mutable_chip_fixed_loss() {
  set_has_chip_fixed_loss();
  if (chip_fixed_loss_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::BallModelChipFixedLoss>(GetArenaNoVirtual());
    chip_fixed_loss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.GeometryModels.chip_fixed_loss)
  return chip_fixed_loss_;
}
inline void GeometryModels::set_allocated_chip_fixed_loss(::ssl_protos::vision::BallModelChipFixedLoss* chip_fixed_loss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chip_fixed_loss_;
  }
  if (chip_fixed_loss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chip_fixed_loss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chip_fixed_loss, submessage_arena);
    }
    set_has_chip_fixed_loss();
  } else {
    clear_has_chip_fixed_loss();
  }
  chip_fixed_loss_ = chip_fixed_loss;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.GeometryModels.chip_fixed_loss)
}

// -------------------------------------------------------------------

// Geometry

// required .ssl_protos.vision.FieldSize field = 1;
inline bool Geometry::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry::clear_field() {
  if (field_ != NULL) field_->Clear();
  clear_has_field();
}
inline const ::ssl_protos::vision::FieldSize& Geometry::_internal_field() const {
  return *field_;
}
inline const ::ssl_protos::vision::FieldSize& Geometry::field() const {
  const ::ssl_protos::vision::FieldSize* p = field_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.Geometry.field)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::FieldSize*>(
      &::ssl_protos::vision::_FieldSize_default_instance_);
}
inline ::ssl_protos::vision::FieldSize* Geometry::release_field() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.Geometry.field)
  clear_has_field();
  ::ssl_protos::vision::FieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::FieldSize* Geometry::mutable_field() {
  set_has_field();
  if (field_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::FieldSize>(GetArenaNoVirtual());
    field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.Geometry.field)
  return field_;
}
inline void Geometry::set_allocated_field(::ssl_protos::vision::FieldSize* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete field_;
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    set_has_field();
  } else {
    clear_has_field();
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.Geometry.field)
}

// repeated .ssl_protos.vision.CameraCalibration calib = 2;
inline int Geometry::calib_size() const {
  return calib_.size();
}
inline void Geometry::clear_calib() {
  calib_.Clear();
}
inline ::ssl_protos::vision::CameraCalibration* Geometry::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.Geometry.calib)
  return calib_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::CameraCalibration >*
Geometry::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.Geometry.calib)
  return &calib_;
}
inline const ::ssl_protos::vision::CameraCalibration& Geometry::calib(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.Geometry.calib)
  return calib_.Get(index);
}
inline ::ssl_protos::vision::CameraCalibration* Geometry::add_calib() {
  // @@protoc_insertion_point(field_add:ssl_protos.vision.Geometry.calib)
  return calib_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::CameraCalibration >&
Geometry::calib() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.Geometry.calib)
  return calib_;
}

// optional .ssl_protos.vision.GeometryModels models = 3;
inline bool Geometry::has_models() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geometry::set_has_models() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geometry::clear_has_models() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geometry::clear_models() {
  if (models_ != NULL) models_->Clear();
  clear_has_models();
}
inline const ::ssl_protos::vision::GeometryModels& Geometry::_internal_models() const {
  return *models_;
}
inline const ::ssl_protos::vision::GeometryModels& Geometry::models() const {
  const ::ssl_protos::vision::GeometryModels* p = models_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.Geometry.models)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::GeometryModels*>(
      &::ssl_protos::vision::_GeometryModels_default_instance_);
}
inline ::ssl_protos::vision::GeometryModels* Geometry::release_models() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.Geometry.models)
  clear_has_models();
  ::ssl_protos::vision::GeometryModels* temp = models_;
  models_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::GeometryModels* Geometry::mutable_models() {
  set_has_models();
  if (models_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::GeometryModels>(GetArenaNoVirtual());
    models_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.Geometry.models)
  return models_;
}
inline void Geometry::set_allocated_models(::ssl_protos::vision::GeometryModels* models) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete models_;
  }
  if (models) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      models = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, models, submessage_arena);
    }
    set_has_models();
  } else {
    clear_has_models();
  }
  models_ = models;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.Geometry.models)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace ssl_protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssl_protos::vision::FieldShapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::vision::FieldShapeType>() {
  return ::ssl_protos::vision::FieldShapeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vision_5fgeometry_2eproto
