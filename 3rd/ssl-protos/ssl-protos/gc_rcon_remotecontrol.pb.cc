// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_rcon_remotecontrol.proto

#include "gc_rcon_remotecontrol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5frcon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signature;
}  // namespace protobuf_gc_5frcon_2eproto
namespace ssl_protos {
namespace gc {
class RemoteControlRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlRegistration>
      _instance;
} _RemoteControlRegistration_default_instance_;
class RemoteControlToControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlToController>
      _instance;
  int request_;
  ::google::protobuf::int32 desired_keeper_;
  bool substitute_bot_;
  bool timeout_;
  bool emergency_stop_;
} _RemoteControlToController_default_instance_;
class ControllerToRemoteControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerToRemoteControl>
      _instance;
} _ControllerToRemoteControl_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5frcon_5fremotecontrol_2eproto {
static void InitDefaultsRemoteControlRegistration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_RemoteControlRegistration_default_instance_;
    new (ptr) ::ssl_protos::gc::RemoteControlRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::RemoteControlRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteControlRegistration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteControlRegistration}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsRemoteControlToController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_RemoteControlToController_default_instance_;
    new (ptr) ::ssl_protos::gc::RemoteControlToController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::RemoteControlToController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteControlToController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteControlToController}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsControllerToRemoteControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_ControllerToRemoteControl_default_instance_;
    new (ptr) ::ssl_protos::gc::ControllerToRemoteControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::ControllerToRemoteControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerToRemoteControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerToRemoteControl}, {
      &protobuf_gc_5frcon_2eproto::scc_info_ControllerReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteControlRegistration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteControlToController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerToRemoteControl.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlRegistration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlRegistration, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlRegistration, signature_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlToController, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlToController, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlToController, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlToController, signature_),
  offsetof(::ssl_protos::gc::RemoteControlToControllerDefaultTypeInternal, request_),
  offsetof(::ssl_protos::gc::RemoteControlToControllerDefaultTypeInternal, desired_keeper_),
  offsetof(::ssl_protos::gc::RemoteControlToControllerDefaultTypeInternal, substitute_bot_),
  offsetof(::ssl_protos::gc::RemoteControlToControllerDefaultTypeInternal, timeout_),
  offsetof(::ssl_protos::gc::RemoteControlToControllerDefaultTypeInternal, emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::RemoteControlToController, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, controller_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, keeper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, substitute_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, emergency_stop_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToRemoteControl, challenge_flag_),
  0,
  1,
  3,
  4,
  2,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssl_protos::gc::RemoteControlRegistration)},
  { 9, 21, sizeof(::ssl_protos::gc::RemoteControlToController)},
  { 27, 39, sizeof(::ssl_protos::gc::ControllerToRemoteControl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_RemoteControlRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_RemoteControlToController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_ControllerToRemoteControl_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_rcon_remotecontrol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033gc_rcon_remotecontrol.proto\022\rssl_proto"
      "s.gc\032\017gc_common.proto\032\rgc_rcon.proto\"k\n\031"
      "RemoteControlRegistration\022!\n\004team\030\001 \002(\0162"
      "\023.ssl_protos.gc.Team\022+\n\tsignature\030\002 \001(\0132"
      "\030.ssl_protos.gc.Signature\"\272\002\n\031RemoteCont"
      "rolToController\022+\n\tsignature\030\001 \001(\0132\030.ssl"
      "_protos.gc.Signature\022C\n\007request\030\002 \001(\01620."
      "ssl_protos.gc.RemoteControlToController."
      "RequestH\000\022\030\n\016desired_keeper\030\003 \001(\005H\000\022\030\n\016s"
      "ubstitute_bot\030\004 \001(\010H\000\022\021\n\007timeout\030\005 \001(\010H\000"
      "\022\030\n\016emergency_stop\030\006 \001(\010H\000\"C\n\007Request\022\013\n"
      "\007UNKNOWN\020\000\022\010\n\004PING\020\001\022\r\n\tGET_STATE\020\002\022\022\n\016C"
      "HALLENGE_FLAG\020\003B\005\n\003msg\"\331\001\n\031ControllerToR"
      "emoteControl\0228\n\020controller_reply\030\001 \001(\0132\036"
      ".ssl_protos.gc.ControllerReply\022\016\n\006keeper"
      "\030\002 \001(\005\022\026\n\016substitute_bot\030\003 \001(\010\022\026\n\016emerge"
      "ncy_stop\030\004 \001(\010\022\031\n\021emergency_stop_in\030\005 \001("
      "\002\022\017\n\007timeout\030\006 \001(\010\022\026\n\016challenge_flag\030\007 \001"
      "(\010B>Z<github.com/RoboCup-SSL/ssl-game-co"
      "ntroller/internal/app/rcon"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_rcon_remotecontrol.proto", &protobuf_RegisterTypes);
  ::protobuf_gc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_gc_5frcon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5frcon_5fremotecontrol_2eproto
namespace ssl_protos {
namespace gc {
const ::google::protobuf::EnumDescriptor* RemoteControlToController_Request_descriptor() {
  protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_enum_descriptors[0];
}
bool RemoteControlToController_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteControlToController_Request RemoteControlToController::UNKNOWN;
const RemoteControlToController_Request RemoteControlToController::PING;
const RemoteControlToController_Request RemoteControlToController::GET_STATE;
const RemoteControlToController_Request RemoteControlToController::CHALLENGE_FLAG;
const RemoteControlToController_Request RemoteControlToController::Request_MIN;
const RemoteControlToController_Request RemoteControlToController::Request_MAX;
const int RemoteControlToController::Request_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RemoteControlRegistration::InitAsDefaultInstance() {
  ::ssl_protos::gc::_RemoteControlRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
}
void RemoteControlRegistration::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlRegistration::kTeamFieldNumber;
const int RemoteControlRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlRegistration::RemoteControlRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlRegistration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.RemoteControlRegistration)
}
RemoteControlRegistration::RemoteControlRegistration(const RemoteControlRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.RemoteControlRegistration)
}

void RemoteControlRegistration::SharedCtor() {
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(team_));
}

RemoteControlRegistration::~RemoteControlRegistration() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.RemoteControlRegistration)
  SharedDtor();
}

void RemoteControlRegistration::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
}

void RemoteControlRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteControlRegistration::descriptor() {
  ::protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlRegistration& RemoteControlRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlRegistration.base);
  return *internal_default_instance();
}


void RemoteControlRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != NULL);
    signature_->Clear();
  }
  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.RemoteControlRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ssl_protos.gc.Team team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.RemoteControlRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.RemoteControlRegistration)
  return false;
#undef DO_
}

void RemoteControlRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ssl_protos.gc.Team team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.RemoteControlRegistration)
}

::google::protobuf::uint8* RemoteControlRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ssl_protos.gc.Team team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_signature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.RemoteControlRegistration)
  return target;
}

size_t RemoteControlRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.RemoteControlRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ssl_protos.gc.Team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }
  // optional .ssl_protos.gc.Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteControlRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.RemoteControlRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.RemoteControlRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.RemoteControlRegistration)
    MergeFrom(*source);
  }
}

void RemoteControlRegistration::MergeFrom(const RemoteControlRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.RemoteControlRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteControlRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.RemoteControlRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlRegistration::CopyFrom(const RemoteControlRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.RemoteControlRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlRegistration::Swap(RemoteControlRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlRegistration::InternalSwap(RemoteControlRegistration* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteControlRegistration::GetMetadata() const {
  protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteControlToController::InitAsDefaultInstance() {
  ::ssl_protos::gc::_RemoteControlToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
  ::ssl_protos::gc::_RemoteControlToController_default_instance_.request_ = 0;
  ::ssl_protos::gc::_RemoteControlToController_default_instance_.desired_keeper_ = 0;
  ::ssl_protos::gc::_RemoteControlToController_default_instance_.substitute_bot_ = false;
  ::ssl_protos::gc::_RemoteControlToController_default_instance_.timeout_ = false;
  ::ssl_protos::gc::_RemoteControlToController_default_instance_.emergency_stop_ = false;
}
void RemoteControlToController::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlToController::kSignatureFieldNumber;
const int RemoteControlToController::kRequestFieldNumber;
const int RemoteControlToController::kDesiredKeeperFieldNumber;
const int RemoteControlToController::kSubstituteBotFieldNumber;
const int RemoteControlToController::kTimeoutFieldNumber;
const int RemoteControlToController::kEmergencyStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlToController::RemoteControlToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlToController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.RemoteControlToController)
}
RemoteControlToController::RemoteControlToController(const RemoteControlToController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kSubstituteBot: {
      set_substitute_bot(from.substitute_bot());
      break;
    }
    case kTimeout: {
      set_timeout(from.timeout());
      break;
    }
    case kEmergencyStop: {
      set_emergency_stop(from.emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.RemoteControlToController)
}

void RemoteControlToController::SharedCtor() {
  signature_ = NULL;
  clear_has_msg();
}

RemoteControlToController::~RemoteControlToController() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.RemoteControlToController)
  SharedDtor();
}

void RemoteControlToController::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void RemoteControlToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteControlToController::descriptor() {
  ::protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlToController& RemoteControlToController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlToController.base);
  return *internal_default_instance();
}


void RemoteControlToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ssl_protos.gc.RemoteControlToController)
  switch (msg_case()) {
    case kRequest: {
      // No need to clear
      break;
    }
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kTimeout: {
      // No need to clear
      break;
    }
    case kEmergencyStop: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RemoteControlToController::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != NULL);
    signature_->Clear();
  }
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.RemoteControlToController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Signature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.RemoteControlToController.Request request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::RemoteControlToController_Request_IsValid(value)) {
            set_request(static_cast< ::ssl_protos::gc::RemoteControlToController_Request >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 desired_keeper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_.desired_keeper_)));
          set_has_desired_keeper();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool substitute_bot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.substitute_bot_)));
          set_has_substitute_bot();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool timeout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool emergency_stop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.emergency_stop_)));
          set_has_emergency_stop();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.RemoteControlToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.RemoteControlToController)
  return false;
#undef DO_
}

void RemoteControlToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_signature(), output);
  }

  switch (msg_case()) {
    case kRequest:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->request(), output);
      break;
    case kDesiredKeeper:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desired_keeper(), output);
      break;
    case kSubstituteBot:
      ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->substitute_bot(), output);
      break;
    case kTimeout:
      ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->timeout(), output);
      break;
    case kEmergencyStop:
      ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->emergency_stop(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.RemoteControlToController)
}

::google::protobuf::uint8* RemoteControlToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_signature(), deterministic, target);
  }

  switch (msg_case()) {
    case kRequest:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->request(), target);
      break;
    case kDesiredKeeper:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desired_keeper(), target);
      break;
    case kSubstituteBot:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->substitute_bot(), target);
      break;
    case kTimeout:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->timeout(), target);
      break;
    case kEmergencyStop:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->emergency_stop(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.RemoteControlToController)
  return target;
}

size_t RemoteControlToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.RemoteControlToController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Signature signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  switch (msg_case()) {
    // optional .ssl_protos.gc.RemoteControlToController.Request request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request());
      break;
    }
    // optional int32 desired_keeper = 3;
    case kDesiredKeeper: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desired_keeper());
      break;
    }
    // optional bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // optional bool timeout = 5;
    case kTimeout: {
      total_size += 1 + 1;
      break;
    }
    // optional bool emergency_stop = 6;
    case kEmergencyStop: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteControlToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.RemoteControlToController)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlToController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.RemoteControlToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.RemoteControlToController)
    MergeFrom(*source);
  }
}

void RemoteControlToController::MergeFrom(const RemoteControlToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.RemoteControlToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
  }
  switch (from.msg_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kSubstituteBot: {
      set_substitute_bot(from.substitute_bot());
      break;
    }
    case kTimeout: {
      set_timeout(from.timeout());
      break;
    }
    case kEmergencyStop: {
      set_emergency_stop(from.emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void RemoteControlToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.RemoteControlToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlToController::CopyFrom(const RemoteControlToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.RemoteControlToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlToController::IsInitialized() const {
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlToController::Swap(RemoteControlToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlToController::InternalSwap(RemoteControlToController* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteControlToController::GetMetadata() const {
  protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerToRemoteControl::InitAsDefaultInstance() {
  ::ssl_protos::gc::_ControllerToRemoteControl_default_instance_._instance.get_mutable()->controller_reply_ = const_cast< ::ssl_protos::gc::ControllerReply*>(
      ::ssl_protos::gc::ControllerReply::internal_default_instance());
}
void ControllerToRemoteControl::clear_controller_reply() {
  if (controller_reply_ != NULL) controller_reply_->Clear();
  clear_has_controller_reply();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToRemoteControl::kControllerReplyFieldNumber;
const int ControllerToRemoteControl::kKeeperFieldNumber;
const int ControllerToRemoteControl::kSubstituteBotFieldNumber;
const int ControllerToRemoteControl::kEmergencyStopFieldNumber;
const int ControllerToRemoteControl::kEmergencyStopInFieldNumber;
const int ControllerToRemoteControl::kTimeoutFieldNumber;
const int ControllerToRemoteControl::kChallengeFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToRemoteControl::ControllerToRemoteControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_ControllerToRemoteControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.ControllerToRemoteControl)
}
ControllerToRemoteControl::ControllerToRemoteControl(const ControllerToRemoteControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controller_reply()) {
    controller_reply_ = new ::ssl_protos::gc::ControllerReply(*from.controller_reply_);
  } else {
    controller_reply_ = NULL;
  }
  ::memcpy(&keeper_, &from.keeper_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_flag_) -
    reinterpret_cast<char*>(&keeper_)) + sizeof(challenge_flag_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.ControllerToRemoteControl)
}

void ControllerToRemoteControl::SharedCtor() {
  ::memset(&controller_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_flag_) -
      reinterpret_cast<char*>(&controller_reply_)) + sizeof(challenge_flag_));
}

ControllerToRemoteControl::~ControllerToRemoteControl() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.ControllerToRemoteControl)
  SharedDtor();
}

void ControllerToRemoteControl::SharedDtor() {
  if (this != internal_default_instance()) delete controller_reply_;
}

void ControllerToRemoteControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerToRemoteControl::descriptor() {
  ::protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerToRemoteControl& ControllerToRemoteControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fremotecontrol_2eproto::scc_info_ControllerToRemoteControl.base);
  return *internal_default_instance();
}


void ControllerToRemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(controller_reply_ != NULL);
    controller_reply_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&keeper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_flag_) -
        reinterpret_cast<char*>(&keeper_)) + sizeof(challenge_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerToRemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.ControllerToRemoteControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keeper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_keeper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keeper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool substitute_bot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_substitute_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &substitute_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool emergency_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_emergency_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float emergency_stop_in = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_emergency_stop_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &emergency_stop_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool timeout = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool challenge_flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_challenge_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &challenge_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.ControllerToRemoteControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.ControllerToRemoteControl)
  return false;
#undef DO_
}

void ControllerToRemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_reply(), output);
  }

  // optional int32 keeper = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->keeper(), output);
  }

  // optional bool substitute_bot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->substitute_bot(), output);
  }

  // optional bool emergency_stop = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->emergency_stop(), output);
  }

  // optional float emergency_stop_in = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->emergency_stop_in(), output);
  }

  // optional bool timeout = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->timeout(), output);
  }

  // optional bool challenge_flag = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->challenge_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.ControllerToRemoteControl)
}

::google::protobuf::uint8* ControllerToRemoteControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_reply(), deterministic, target);
  }

  // optional int32 keeper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->keeper(), target);
  }

  // optional bool substitute_bot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->substitute_bot(), target);
  }

  // optional bool emergency_stop = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->emergency_stop(), target);
  }

  // optional float emergency_stop_in = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->emergency_stop_in(), target);
  }

  // optional bool timeout = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->timeout(), target);
  }

  // optional bool challenge_flag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->challenge_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.ControllerToRemoteControl)
  return target;
}

size_t ControllerToRemoteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.ControllerToRemoteControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
    if (has_controller_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_reply_);
    }

    // optional int32 keeper = 2;
    if (has_keeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keeper());
    }

    // optional float emergency_stop_in = 5;
    if (has_emergency_stop_in()) {
      total_size += 1 + 4;
    }

    // optional bool substitute_bot = 3;
    if (has_substitute_bot()) {
      total_size += 1 + 1;
    }

    // optional bool emergency_stop = 4;
    if (has_emergency_stop()) {
      total_size += 1 + 1;
    }

    // optional bool timeout = 6;
    if (has_timeout()) {
      total_size += 1 + 1;
    }

    // optional bool challenge_flag = 7;
    if (has_challenge_flag()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToRemoteControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.ControllerToRemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToRemoteControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToRemoteControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.ControllerToRemoteControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.ControllerToRemoteControl)
    MergeFrom(*source);
  }
}

void ControllerToRemoteControl::MergeFrom(const ControllerToRemoteControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.ControllerToRemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_controller_reply()->::ssl_protos::gc::ControllerReply::MergeFrom(from.controller_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      keeper_ = from.keeper_;
    }
    if (cached_has_bits & 0x00000004u) {
      emergency_stop_in_ = from.emergency_stop_in_;
    }
    if (cached_has_bits & 0x00000008u) {
      substitute_bot_ = from.substitute_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      emergency_stop_ = from.emergency_stop_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_flag_ = from.challenge_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerToRemoteControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.ControllerToRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToRemoteControl::CopyFrom(const ControllerToRemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.ControllerToRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToRemoteControl::IsInitialized() const {
  return true;
}

void ControllerToRemoteControl::Swap(ControllerToRemoteControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToRemoteControl::InternalSwap(ControllerToRemoteControl* other) {
  using std::swap;
  swap(controller_reply_, other->controller_reply_);
  swap(keeper_, other->keeper_);
  swap(emergency_stop_in_, other->emergency_stop_in_);
  swap(substitute_bot_, other->substitute_bot_);
  swap(emergency_stop_, other->emergency_stop_);
  swap(timeout_, other->timeout_);
  swap(challenge_flag_, other->challenge_flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerToRemoteControl::GetMetadata() const {
  protobuf_gc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::RemoteControlRegistration* Arena::CreateMaybeMessage< ::ssl_protos::gc::RemoteControlRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::RemoteControlRegistration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::RemoteControlToController* Arena::CreateMaybeMessage< ::ssl_protos::gc::RemoteControlToController >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::RemoteControlToController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::ControllerToRemoteControl* Arena::CreateMaybeMessage< ::ssl_protos::gc::ControllerToRemoteControl >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::ControllerToRemoteControl >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
