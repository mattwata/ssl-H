// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_change.proto

#include "gc_change.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5fchange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AcceptProposalGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChangeStage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Continue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Revert;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartBallPlacement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SwitchColors;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YellowCardOver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<17> scc_info_Change;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddGameEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddPassiveGameEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddProposal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddRedCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AddYellowCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewGameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SetBallPlacementPos;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_UpdateTeamState;
}  // namespace protobuf_gc_5fchange_2eproto
namespace protobuf_gc_5fgame_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgame_5fevent_2eproto ::google::protobuf::internal::SCCInfo<38> scc_info_GameEvent;
}  // namespace protobuf_gc_5fgame_5fevent_2eproto
namespace protobuf_gc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
}  // namespace protobuf_gc_5fgeometry_2eproto
namespace protobuf_gc_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Command;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RedCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Foul;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Proposal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_YellowCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_State;
}  // namespace protobuf_gc_5fstate_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace ssl_protos {
namespace gc {
class StateChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateChange>
      _instance;
} _StateChange_default_instance_;
class ChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change>
      _instance;
  const ::ssl_protos::gc::NewCommand* new_command_;
  const ::ssl_protos::gc::ChangeStage* change_stage_;
  const ::ssl_protos::gc::SetBallPlacementPos* set_ball_placement_pos_;
  const ::ssl_protos::gc::AddYellowCard* add_yellow_card_;
  const ::ssl_protos::gc::AddRedCard* add_red_card_;
  const ::ssl_protos::gc::YellowCardOver* yellow_card_over_;
  const ::ssl_protos::gc::AddGameEvent* add_game_event_;
  const ::ssl_protos::gc::AddPassiveGameEvent* add_passive_game_event_;
  const ::ssl_protos::gc::AddProposal* add_proposal_;
  const ::ssl_protos::gc::StartBallPlacement* start_ball_placement_;
  const ::ssl_protos::gc::Continue* continue__;
  const ::ssl_protos::gc::UpdateConfig* update_config_;
  const ::ssl_protos::gc::UpdateTeamState* update_team_state_;
  const ::ssl_protos::gc::SwitchColors* switch_colors_;
  const ::ssl_protos::gc::Revert* revert_;
  const ::ssl_protos::gc::NewGameState* new_game_state_;
  const ::ssl_protos::gc::AcceptProposalGroup* accept_proposal_group_;
} _Change_default_instance_;
class NewCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewCommand>
      _instance;
} _NewCommand_default_instance_;
class ChangeStageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeStage>
      _instance;
} _ChangeStage_default_instance_;
class SetBallPlacementPosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetBallPlacementPos>
      _instance;
} _SetBallPlacementPos_default_instance_;
class AddYellowCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddYellowCard>
      _instance;
} _AddYellowCard_default_instance_;
class AddRedCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRedCard>
      _instance;
} _AddRedCard_default_instance_;
class YellowCardOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YellowCardOver>
      _instance;
} _YellowCardOver_default_instance_;
class AddGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddGameEvent>
      _instance;
} _AddGameEvent_default_instance_;
class AddPassiveGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPassiveGameEvent>
      _instance;
} _AddPassiveGameEvent_default_instance_;
class AddProposalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddProposal>
      _instance;
} _AddProposal_default_instance_;
class AcceptProposalGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcceptProposalGroup>
      _instance;
} _AcceptProposalGroup_default_instance_;
class StartBallPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartBallPlacement>
      _instance;
} _StartBallPlacement_default_instance_;
class ContinueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Continue>
      _instance;
} _Continue_default_instance_;
class UpdateConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateConfig>
      _instance;
} _UpdateConfig_default_instance_;
class UpdateTeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTeamState>
      _instance;
} _UpdateTeamState_default_instance_;
class SwitchColorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SwitchColors>
      _instance;
} _SwitchColors_default_instance_;
class RevertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Revert>
      _instance;
} _Revert_default_instance_;
class NewGameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewGameState>
      _instance;
} _NewGameState_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5fchange_2eproto {
static void InitDefaultsStateChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_StateChange_default_instance_;
    new (ptr) ::ssl_protos::gc::StateChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::StateChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StateChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStateChange}, {
      &protobuf_gc_5fstate_2eproto::scc_info_State.base,
      &protobuf_gc_5fchange_2eproto::scc_info_Change.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_Change_default_instance_;
    new (ptr) ::ssl_protos::gc::Change();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::Change::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<17> scc_info_Change =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 17, InitDefaultsChange}, {
      &protobuf_gc_5fchange_2eproto::scc_info_NewCommand.base,
      &protobuf_gc_5fchange_2eproto::scc_info_ChangeStage.base,
      &protobuf_gc_5fchange_2eproto::scc_info_SetBallPlacementPos.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AddYellowCard.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AddRedCard.base,
      &protobuf_gc_5fchange_2eproto::scc_info_YellowCardOver.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AddGameEvent.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AddPassiveGameEvent.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AddProposal.base,
      &protobuf_gc_5fchange_2eproto::scc_info_StartBallPlacement.base,
      &protobuf_gc_5fchange_2eproto::scc_info_Continue.base,
      &protobuf_gc_5fchange_2eproto::scc_info_UpdateConfig.base,
      &protobuf_gc_5fchange_2eproto::scc_info_UpdateTeamState.base,
      &protobuf_gc_5fchange_2eproto::scc_info_SwitchColors.base,
      &protobuf_gc_5fchange_2eproto::scc_info_Revert.base,
      &protobuf_gc_5fchange_2eproto::scc_info_NewGameState.base,
      &protobuf_gc_5fchange_2eproto::scc_info_AcceptProposalGroup.base,}};

static void InitDefaultsNewCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_NewCommand_default_instance_;
    new (ptr) ::ssl_protos::gc::NewCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::NewCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewCommand}, {
      &protobuf_gc_5fstate_2eproto::scc_info_Command.base,}};

static void InitDefaultsChangeStage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_ChangeStage_default_instance_;
    new (ptr) ::ssl_protos::gc::ChangeStage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::ChangeStage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeStage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeStage}, {}};

static void InitDefaultsSetBallPlacementPos() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_SetBallPlacementPos_default_instance_;
    new (ptr) ::ssl_protos::gc::SetBallPlacementPos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::SetBallPlacementPos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetBallPlacementPos =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetBallPlacementPos}, {
      &protobuf_gc_5fgeometry_2eproto::scc_info_Vector2.base,}};

static void InitDefaultsAddYellowCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AddYellowCard_default_instance_;
    new (ptr) ::ssl_protos::gc::AddYellowCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AddYellowCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddYellowCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddYellowCard}, {
      &protobuf_gc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsAddRedCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AddRedCard_default_instance_;
    new (ptr) ::ssl_protos::gc::AddRedCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AddRedCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddRedCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddRedCard}, {
      &protobuf_gc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsYellowCardOver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_YellowCardOver_default_instance_;
    new (ptr) ::ssl_protos::gc::YellowCardOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::YellowCardOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_YellowCardOver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYellowCardOver}, {}};

static void InitDefaultsAddGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AddGameEvent_default_instance_;
    new (ptr) ::ssl_protos::gc::AddGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AddGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddGameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddGameEvent}, {
      &protobuf_gc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsAddPassiveGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AddPassiveGameEvent_default_instance_;
    new (ptr) ::ssl_protos::gc::AddPassiveGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AddPassiveGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddPassiveGameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddPassiveGameEvent}, {
      &protobuf_gc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsAddProposal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AddProposal_default_instance_;
    new (ptr) ::ssl_protos::gc::AddProposal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AddProposal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddProposal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddProposal}, {
      &protobuf_gc_5fstate_2eproto::scc_info_Proposal.base,}};

static void InitDefaultsAcceptProposalGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AcceptProposalGroup_default_instance_;
    new (ptr) ::ssl_protos::gc::AcceptProposalGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AcceptProposalGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AcceptProposalGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcceptProposalGroup}, {}};

static void InitDefaultsStartBallPlacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_StartBallPlacement_default_instance_;
    new (ptr) ::ssl_protos::gc::StartBallPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::StartBallPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartBallPlacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartBallPlacement}, {}};

static void InitDefaultsContinue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_Continue_default_instance_;
    new (ptr) ::ssl_protos::gc::Continue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::Continue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Continue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContinue}, {}};

static void InitDefaultsUpdateConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_UpdateConfig_default_instance_;
    new (ptr) ::ssl_protos::gc::UpdateConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::UpdateConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateConfig}, {}};

static void InitDefaultsUpdateTeamState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_UpdateTeamState_default_instance_;
    new (ptr) ::ssl_protos::gc::UpdateTeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::UpdateTeamState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UpdateTeamState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUpdateTeamState}, {
      &protobuf_gc_5fstate_2eproto::scc_info_YellowCard.base,
      &protobuf_gc_5fstate_2eproto::scc_info_RedCard.base,
      &protobuf_gc_5fstate_2eproto::scc_info_Foul.base,}};

static void InitDefaultsSwitchColors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_SwitchColors_default_instance_;
    new (ptr) ::ssl_protos::gc::SwitchColors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::SwitchColors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SwitchColors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSwitchColors}, {}};

static void InitDefaultsRevert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_Revert_default_instance_;
    new (ptr) ::ssl_protos::gc::Revert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::Revert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Revert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRevert}, {}};

static void InitDefaultsNewGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_NewGameState_default_instance_;
    new (ptr) ::ssl_protos::gc::NewGameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::NewGameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewGameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewGameState}, {
      &protobuf_gc_5fstate_2eproto::scc_info_GameState.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StateChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeStage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetBallPlacementPos.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddYellowCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddRedCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_YellowCardOver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddGameEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddPassiveGameEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddProposal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcceptProposalGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartBallPlacement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Continue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTeamState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SwitchColors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Revert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewGameState.base);
}

::google::protobuf::Metadata file_level_metadata[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, state_pre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StateChange, timestamp_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, revertible_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, new_command_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, change_stage_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, set_ball_placement_pos_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, add_yellow_card_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, add_red_card_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, yellow_card_over_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, add_game_event_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, add_passive_game_event_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, add_proposal_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, start_ball_placement_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, continue__),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, update_config_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, update_team_state_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, switch_colors_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, revert_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, new_game_state_),
  offsetof(::ssl_protos::gc::ChangeDefaultTypeInternal, accept_proposal_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Change, change_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewCommand, command_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ChangeStage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ChangeStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ChangeStage, new_stage_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::SetBallPlacementPos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::SetBallPlacementPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::SetBallPlacementPos, pos_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddYellowCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddYellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddYellowCard, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddYellowCard, caused_by_game_event_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddRedCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddRedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddRedCard, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddRedCard, caused_by_game_event_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::YellowCardOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::YellowCardOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::YellowCardOver, for_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddGameEvent, game_event_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddPassiveGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddPassiveGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddPassiveGameEvent, game_event_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddProposal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AddProposal, proposal_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AcceptProposalGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AcceptProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AcceptProposalGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AcceptProposalGroup, accepted_by_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StartBallPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::StartBallPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Continue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Continue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateConfig, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateConfig, first_kickoff_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateConfig, auto_continue_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, goals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, goalkeeper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, timeouts_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, timeout_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, on_positive_half_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, ball_placement_failures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, can_place_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, challenge_flags_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, requests_bot_substitution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, requests_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, requests_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, requests_emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, yellow_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, red_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, foul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, remove_yellow_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, remove_red_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::UpdateTeamState, remove_foul_),
  5,
  0,
  6,
  7,
  8,
  1,
  10,
  9,
  11,
  19,
  12,
  13,
  17,
  18,
  4,
  2,
  3,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::SwitchColors, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::SwitchColors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Revert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Revert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::Revert, change_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewGameState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::NewGameState, game_state_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::ssl_protos::gc::StateChange)},
  { 15, 40, sizeof(::ssl_protos::gc::Change)},
  { 59, 65, sizeof(::ssl_protos::gc::NewCommand)},
  { 66, 72, sizeof(::ssl_protos::gc::ChangeStage)},
  { 73, 79, sizeof(::ssl_protos::gc::SetBallPlacementPos)},
  { 80, 87, sizeof(::ssl_protos::gc::AddYellowCard)},
  { 89, 96, sizeof(::ssl_protos::gc::AddRedCard)},
  { 98, 104, sizeof(::ssl_protos::gc::YellowCardOver)},
  { 105, 111, sizeof(::ssl_protos::gc::AddGameEvent)},
  { 112, 118, sizeof(::ssl_protos::gc::AddPassiveGameEvent)},
  { 119, 125, sizeof(::ssl_protos::gc::AddProposal)},
  { 126, 133, sizeof(::ssl_protos::gc::AcceptProposalGroup)},
  { 135, 140, sizeof(::ssl_protos::gc::StartBallPlacement)},
  { 140, 145, sizeof(::ssl_protos::gc::Continue)},
  { 145, 153, sizeof(::ssl_protos::gc::UpdateConfig)},
  { 156, 181, sizeof(::ssl_protos::gc::UpdateTeamState)},
  { 201, 206, sizeof(::ssl_protos::gc::SwitchColors)},
  { 206, 212, sizeof(::ssl_protos::gc::Revert)},
  { 213, 219, sizeof(::ssl_protos::gc::NewGameState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_StateChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_Change_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_NewCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_ChangeStage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_SetBallPlacementPos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AddYellowCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AddRedCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_YellowCardOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AddGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AddPassiveGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AddProposal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AcceptProposalGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_StartBallPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_Continue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_UpdateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_UpdateTeamState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_SwitchColors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_Revert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_NewGameState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_change.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017gc_change.proto\022\rssl_protos.gc\032\016gc_sta"
      "te.proto\032\017gc_common.proto\032\021gc_geometry.p"
      "roto\032\023gc_game_event.proto\032\030gc_referee_me"
      "ssage.proto\032\037google/protobuf/timestamp.p"
      "roto\"\275\001\n\013StateChange\022\n\n\002id\030\001 \001(\005\022\'\n\tstat"
      "e_pre\030\002 \001(\0132\024.ssl_protos.gc.State\022#\n\005sta"
      "te\030\003 \001(\0132\024.ssl_protos.gc.State\022%\n\006change"
      "\030\004 \001(\0132\025.ssl_protos.gc.Change\022-\n\ttimesta"
      "mp\030\005 \001(\0132\032.google.protobuf.Timestamp\"\370\007\n"
      "\006Change\022\016\n\006origin\030\001 \001(\t\022\022\n\nrevertible\030\020 "
      "\001(\010\0220\n\013new_command\030\002 \001(\0132\031.ssl_protos.gc"
      ".NewCommandH\000\0222\n\014change_stage\030\003 \001(\0132\032.ss"
      "l_protos.gc.ChangeStageH\000\022D\n\026set_ball_pl"
      "acement_pos\030\004 \001(\0132\".ssl_protos.gc.SetBal"
      "lPlacementPosH\000\0227\n\017add_yellow_card\030\005 \001(\013"
      "2\034.ssl_protos.gc.AddYellowCardH\000\0221\n\014add_"
      "red_card\030\006 \001(\0132\031.ssl_protos.gc.AddRedCar"
      "dH\000\0229\n\020yellow_card_over\030\007 \001(\0132\035.ssl_prot"
      "os.gc.YellowCardOverH\000\0225\n\016add_game_event"
      "\030\010 \001(\0132\033.ssl_protos.gc.AddGameEventH\000\022D\n"
      "\026add_passive_game_event\030\023 \001(\0132\".ssl_prot"
      "os.gc.AddPassiveGameEventH\000\0222\n\014add_propo"
      "sal\030\t \001(\0132\032.ssl_protos.gc.AddProposalH\000\022"
      "A\n\024start_ball_placement\030\n \001(\0132!.ssl_prot"
      "os.gc.StartBallPlacementH\000\022+\n\010continue\030\013"
      " \001(\0132\027.ssl_protos.gc.ContinueH\000\0224\n\rupdat"
      "e_config\030\014 \001(\0132\033.ssl_protos.gc.UpdateCon"
      "figH\000\022;\n\021update_team_state\030\r \001(\0132\036.ssl_p"
      "rotos.gc.UpdateTeamStateH\000\0224\n\rswitch_col"
      "ors\030\016 \001(\0132\033.ssl_protos.gc.SwitchColorsH\000"
      "\022\'\n\006revert\030\017 \001(\0132\025.ssl_protos.gc.RevertH"
      "\000\0225\n\016new_game_state\030\021 \001(\0132\033.ssl_protos.g"
      "c.NewGameStateH\000\022C\n\025accept_proposal_grou"
      "p\030\022 \001(\0132\".ssl_protos.gc.AcceptProposalGr"
      "oupH\000B\010\n\006change\"5\n\nNewCommand\022\'\n\007command"
      "\030\001 \001(\0132\026.ssl_protos.gc.Command\">\n\013Change"
      "Stage\022/\n\tnew_stage\030\001 \001(\0162\034.ssl_protos.gc"
      ".Referee.Stage\":\n\023SetBallPlacementPos\022#\n"
      "\003pos\030\001 \001(\0132\026.ssl_protos.gc.Vector2\"n\n\rAd"
      "dYellowCard\022%\n\010for_team\030\001 \001(\0162\023.ssl_prot"
      "os.gc.Team\0226\n\024caused_by_game_event\030\002 \001(\013"
      "2\030.ssl_protos.gc.GameEvent\"k\n\nAddRedCard"
      "\022%\n\010for_team\030\001 \001(\0162\023.ssl_protos.gc.Team\022"
      "6\n\024caused_by_game_event\030\002 \001(\0132\030.ssl_prot"
      "os.gc.GameEvent\"7\n\016YellowCardOver\022%\n\010for"
      "_team\030\001 \001(\0162\023.ssl_protos.gc.Team\"<\n\014AddG"
      "ameEvent\022,\n\ngame_event\030\001 \001(\0132\030.ssl_proto"
      "s.gc.GameEvent\"C\n\023AddPassiveGameEvent\022,\n"
      "\ngame_event\030\001 \001(\0132\030.ssl_protos.gc.GameEv"
      "ent\"8\n\013AddProposal\022)\n\010proposal\030\001 \001(\0132\027.s"
      "sl_protos.gc.Proposal\"<\n\023AcceptProposalG"
      "roup\022\020\n\010group_id\030\001 \001(\r\022\023\n\013accepted_by\030\002 "
      "\001(\t\"\024\n\022StartBallPlacement\"\n\n\010Continue\"\201\001"
      "\n\014UpdateConfig\022)\n\010division\030\001 \001(\0162\027.ssl_p"
      "rotos.gc.Division\022/\n\022first_kickoff_team\030"
      "\002 \001(\0162\023.ssl_protos.gc.Team\022\025\n\rauto_conti"
      "nue\030\003 \001(\010\"\322\004\n\017UpdateTeamState\022%\n\010for_tea"
      "m\030\001 \001(\0162\023.ssl_protos.gc.Team\022\021\n\tteam_nam"
      "e\030\002 \001(\t\022\r\n\005goals\030\003 \001(\005\022\022\n\ngoalkeeper\030\004 \001"
      "(\005\022\025\n\rtimeouts_left\030\005 \001(\005\022\031\n\021timeout_tim"
      "e_left\030\006 \001(\t\022\030\n\020on_positive_half\030\007 \001(\010\022\037"
      "\n\027ball_placement_failures\030\010 \001(\005\022\026\n\016can_p"
      "lace_ball\030\t \001(\010\022\034\n\024challenge_flags_left\030"
      "\025 \001(\005\022!\n\031requests_bot_substitution\030\n \001(\010"
      "\022\030\n\020requests_timeout\030\021 \001(\010\022\032\n\022requests_c"
      "hallenge\030\022 \001(\010\022\037\n\027requests_emergency_sto"
      "p\030\023 \001(\010\022.\n\013yellow_card\030\024 \001(\0132\031.ssl_proto"
      "s.gc.YellowCard\022(\n\010red_card\030\014 \001(\0132\026.ssl_"
      "protos.gc.RedCard\022!\n\004foul\030\r \001(\0132\023.ssl_pr"
      "otos.gc.Foul\022\032\n\022remove_yellow_card\030\016 \001(\r"
      "\022\027\n\017remove_red_card\030\017 \001(\r\022\023\n\013remove_foul"
      "\030\020 \001(\r\"\016\n\014SwitchColors\"\033\n\006Revert\022\021\n\tchan"
      "ge_id\030\001 \001(\005\"<\n\014NewGameState\022,\n\ngame_stat"
      "e\030\001 \001(\0132\030.ssl_protos.gc.GameStateBFZDgit"
      "hub.com/RoboCup-SSL/ssl-game-controller/"
      "internal/app/statemachine"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_change.proto", &protobuf_RegisterTypes);
  ::protobuf_gc_5fstate_2eproto::AddDescriptors();
  ::protobuf_gc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_gc_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_gc_5fgame_5fevent_2eproto::AddDescriptors();
  ::protobuf_gc_5freferee_5fmessage_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5fchange_2eproto
namespace ssl_protos {
namespace gc {

// ===================================================================

void StateChange::InitAsDefaultInstance() {
  ::ssl_protos::gc::_StateChange_default_instance_._instance.get_mutable()->state_pre_ = const_cast< ::ssl_protos::gc::State*>(
      ::ssl_protos::gc::State::internal_default_instance());
  ::ssl_protos::gc::_StateChange_default_instance_._instance.get_mutable()->state_ = const_cast< ::ssl_protos::gc::State*>(
      ::ssl_protos::gc::State::internal_default_instance());
  ::ssl_protos::gc::_StateChange_default_instance_._instance.get_mutable()->change_ = const_cast< ::ssl_protos::gc::Change*>(
      ::ssl_protos::gc::Change::internal_default_instance());
  ::ssl_protos::gc::_StateChange_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void StateChange::clear_state_pre() {
  if (state_pre_ != NULL) state_pre_->Clear();
  clear_has_state_pre();
}
void StateChange::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
void StateChange::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateChange::kIdFieldNumber;
const int StateChange::kStatePreFieldNumber;
const int StateChange::kStateFieldNumber;
const int StateChange::kChangeFieldNumber;
const int StateChange::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateChange::StateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_StateChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state_pre()) {
    state_pre_ = new ::ssl_protos::gc::State(*from.state_pre_);
  } else {
    state_pre_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::ssl_protos::gc::State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_change()) {
    change_ = new ::ssl_protos::gc::Change(*from.change_);
  } else {
    change_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.StateChange)
}

void StateChange::SharedCtor() {
  ::memset(&state_pre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&state_pre_)) + sizeof(id_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.StateChange)
  SharedDtor();
}

void StateChange::SharedDtor() {
  if (this != internal_default_instance()) delete state_pre_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete timestamp_;
}

void StateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateChange::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateChange& StateChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_StateChange.base);
  return *internal_default_instance();
}


void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_pre_ != NULL);
      state_pre_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(change_ != NULL);
      change_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.StateChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.State state_pre = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_pre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.State state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Change change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.StateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.StateChange)
  return false;
#undef DO_
}

void StateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .ssl_protos.gc.State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state_pre(), output);
  }

  // optional .ssl_protos.gc.State state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_state(), output);
  }

  // optional .ssl_protos.gc.Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_change(), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.StateChange)
}

::google::protobuf::uint8* StateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .ssl_protos.gc.State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state_pre(), deterministic, target);
  }

  // optional .ssl_protos.gc.State state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_state(), deterministic, target);
  }

  // optional .ssl_protos.gc.Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_change(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timestamp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.StateChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ssl_protos.gc.State state_pre = 2;
    if (has_state_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_pre_);
    }

    // optional .ssl_protos.gc.State state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .ssl_protos.gc.Change change = 4;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_);
    }

    // optional .google.protobuf.Timestamp timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.StateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.StateChange)
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state_pre()->::ssl_protos::gc::State::MergeFrom(from.state_pre());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::ssl_protos::gc::State::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_change()->::ssl_protos::gc::Change::MergeFrom(from.change());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  if (has_state_pre()) {
    if (!this->state_pre_->IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  if (has_change()) {
    if (!this->change_->IsInitialized()) return false;
  }
  return true;
}

void StateChange::Swap(StateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  swap(state_pre_, other->state_pre_);
  swap(state_, other->state_);
  swap(change_, other->change_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateChange::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change::InitAsDefaultInstance() {
  ::ssl_protos::gc::_Change_default_instance_.new_command_ = const_cast< ::ssl_protos::gc::NewCommand*>(
      ::ssl_protos::gc::NewCommand::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.change_stage_ = const_cast< ::ssl_protos::gc::ChangeStage*>(
      ::ssl_protos::gc::ChangeStage::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.set_ball_placement_pos_ = const_cast< ::ssl_protos::gc::SetBallPlacementPos*>(
      ::ssl_protos::gc::SetBallPlacementPos::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.add_yellow_card_ = const_cast< ::ssl_protos::gc::AddYellowCard*>(
      ::ssl_protos::gc::AddYellowCard::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.add_red_card_ = const_cast< ::ssl_protos::gc::AddRedCard*>(
      ::ssl_protos::gc::AddRedCard::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.yellow_card_over_ = const_cast< ::ssl_protos::gc::YellowCardOver*>(
      ::ssl_protos::gc::YellowCardOver::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.add_game_event_ = const_cast< ::ssl_protos::gc::AddGameEvent*>(
      ::ssl_protos::gc::AddGameEvent::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.add_passive_game_event_ = const_cast< ::ssl_protos::gc::AddPassiveGameEvent*>(
      ::ssl_protos::gc::AddPassiveGameEvent::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.add_proposal_ = const_cast< ::ssl_protos::gc::AddProposal*>(
      ::ssl_protos::gc::AddProposal::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.start_ball_placement_ = const_cast< ::ssl_protos::gc::StartBallPlacement*>(
      ::ssl_protos::gc::StartBallPlacement::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.continue__ = const_cast< ::ssl_protos::gc::Continue*>(
      ::ssl_protos::gc::Continue::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.update_config_ = const_cast< ::ssl_protos::gc::UpdateConfig*>(
      ::ssl_protos::gc::UpdateConfig::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.update_team_state_ = const_cast< ::ssl_protos::gc::UpdateTeamState*>(
      ::ssl_protos::gc::UpdateTeamState::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.switch_colors_ = const_cast< ::ssl_protos::gc::SwitchColors*>(
      ::ssl_protos::gc::SwitchColors::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.revert_ = const_cast< ::ssl_protos::gc::Revert*>(
      ::ssl_protos::gc::Revert::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.new_game_state_ = const_cast< ::ssl_protos::gc::NewGameState*>(
      ::ssl_protos::gc::NewGameState::internal_default_instance());
  ::ssl_protos::gc::_Change_default_instance_.accept_proposal_group_ = const_cast< ::ssl_protos::gc::AcceptProposalGroup*>(
      ::ssl_protos::gc::AcceptProposalGroup::internal_default_instance());
}
void Change::set_allocated_new_command(::ssl_protos::gc::NewCommand* new_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (new_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_command, submessage_arena);
    }
    set_has_new_command();
    change_.new_command_ = new_command;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.new_command)
}
void Change::set_allocated_change_stage(::ssl_protos::gc::ChangeStage* change_stage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (change_stage) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_stage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_stage, submessage_arena);
    }
    set_has_change_stage();
    change_.change_stage_ = change_stage;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.change_stage)
}
void Change::set_allocated_set_ball_placement_pos(::ssl_protos::gc::SetBallPlacementPos* set_ball_placement_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (set_ball_placement_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_ball_placement_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_ball_placement_pos, submessage_arena);
    }
    set_has_set_ball_placement_pos();
    change_.set_ball_placement_pos_ = set_ball_placement_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.set_ball_placement_pos)
}
void Change::set_allocated_add_yellow_card(::ssl_protos::gc::AddYellowCard* add_yellow_card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_yellow_card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_yellow_card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_yellow_card, submessage_arena);
    }
    set_has_add_yellow_card();
    change_.add_yellow_card_ = add_yellow_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.add_yellow_card)
}
void Change::set_allocated_add_red_card(::ssl_protos::gc::AddRedCard* add_red_card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_red_card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_red_card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_red_card, submessage_arena);
    }
    set_has_add_red_card();
    change_.add_red_card_ = add_red_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.add_red_card)
}
void Change::set_allocated_yellow_card_over(::ssl_protos::gc::YellowCardOver* yellow_card_over) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (yellow_card_over) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yellow_card_over = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yellow_card_over, submessage_arena);
    }
    set_has_yellow_card_over();
    change_.yellow_card_over_ = yellow_card_over;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.yellow_card_over)
}
void Change::set_allocated_add_game_event(::ssl_protos::gc::AddGameEvent* add_game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_game_event, submessage_arena);
    }
    set_has_add_game_event();
    change_.add_game_event_ = add_game_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.add_game_event)
}
void Change::set_allocated_add_passive_game_event(::ssl_protos::gc::AddPassiveGameEvent* add_passive_game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_passive_game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_passive_game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_passive_game_event, submessage_arena);
    }
    set_has_add_passive_game_event();
    change_.add_passive_game_event_ = add_passive_game_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.add_passive_game_event)
}
void Change::set_allocated_add_proposal(::ssl_protos::gc::AddProposal* add_proposal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_proposal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_proposal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_proposal, submessage_arena);
    }
    set_has_add_proposal();
    change_.add_proposal_ = add_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.add_proposal)
}
void Change::set_allocated_start_ball_placement(::ssl_protos::gc::StartBallPlacement* start_ball_placement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (start_ball_placement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_ball_placement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_ball_placement, submessage_arena);
    }
    set_has_start_ball_placement();
    change_.start_ball_placement_ = start_ball_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.start_ball_placement)
}
void Change::set_allocated_continue_(::ssl_protos::gc::Continue* continue_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (continue_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      continue_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, continue_, submessage_arena);
    }
    set_has_continue_();
    change_.continue__ = continue_;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.continue)
}
void Change::set_allocated_update_config(::ssl_protos::gc::UpdateConfig* update_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (update_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_config, submessage_arena);
    }
    set_has_update_config();
    change_.update_config_ = update_config;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.update_config)
}
void Change::set_allocated_update_team_state(::ssl_protos::gc::UpdateTeamState* update_team_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (update_team_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_team_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_team_state, submessage_arena);
    }
    set_has_update_team_state();
    change_.update_team_state_ = update_team_state;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.update_team_state)
}
void Change::set_allocated_switch_colors(::ssl_protos::gc::SwitchColors* switch_colors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (switch_colors) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      switch_colors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, switch_colors, submessage_arena);
    }
    set_has_switch_colors();
    change_.switch_colors_ = switch_colors;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.switch_colors)
}
void Change::set_allocated_revert(::ssl_protos::gc::Revert* revert) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (revert) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      revert = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revert, submessage_arena);
    }
    set_has_revert();
    change_.revert_ = revert;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.revert)
}
void Change::set_allocated_new_game_state(::ssl_protos::gc::NewGameState* new_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (new_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_game_state, submessage_arena);
    }
    set_has_new_game_state();
    change_.new_game_state_ = new_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.new_game_state)
}
void Change::set_allocated_accept_proposal_group(::ssl_protos::gc::AcceptProposalGroup* accept_proposal_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (accept_proposal_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_proposal_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_proposal_group, submessage_arena);
    }
    set_has_accept_proposal_group();
    change_.accept_proposal_group_ = accept_proposal_group;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Change.accept_proposal_group)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change::kOriginFieldNumber;
const int Change::kRevertibleFieldNumber;
const int Change::kNewCommandFieldNumber;
const int Change::kChangeStageFieldNumber;
const int Change::kSetBallPlacementPosFieldNumber;
const int Change::kAddYellowCardFieldNumber;
const int Change::kAddRedCardFieldNumber;
const int Change::kYellowCardOverFieldNumber;
const int Change::kAddGameEventFieldNumber;
const int Change::kAddPassiveGameEventFieldNumber;
const int Change::kAddProposalFieldNumber;
const int Change::kStartBallPlacementFieldNumber;
const int Change::kContinueFieldNumber;
const int Change::kUpdateConfigFieldNumber;
const int Change::kUpdateTeamStateFieldNumber;
const int Change::kSwitchColorsFieldNumber;
const int Change::kRevertFieldNumber;
const int Change::kNewGameStateFieldNumber;
const int Change::kAcceptProposalGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change::Change()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_Change.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.Change)
}
Change::Change(const Change& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  revertible_ = from.revertible_;
  clear_has_change();
  switch (from.change_case()) {
    case kNewCommand: {
      mutable_new_command()->::ssl_protos::gc::NewCommand::MergeFrom(from.new_command());
      break;
    }
    case kChangeStage: {
      mutable_change_stage()->::ssl_protos::gc::ChangeStage::MergeFrom(from.change_stage());
      break;
    }
    case kSetBallPlacementPos: {
      mutable_set_ball_placement_pos()->::ssl_protos::gc::SetBallPlacementPos::MergeFrom(from.set_ball_placement_pos());
      break;
    }
    case kAddYellowCard: {
      mutable_add_yellow_card()->::ssl_protos::gc::AddYellowCard::MergeFrom(from.add_yellow_card());
      break;
    }
    case kAddRedCard: {
      mutable_add_red_card()->::ssl_protos::gc::AddRedCard::MergeFrom(from.add_red_card());
      break;
    }
    case kYellowCardOver: {
      mutable_yellow_card_over()->::ssl_protos::gc::YellowCardOver::MergeFrom(from.yellow_card_over());
      break;
    }
    case kAddGameEvent: {
      mutable_add_game_event()->::ssl_protos::gc::AddGameEvent::MergeFrom(from.add_game_event());
      break;
    }
    case kAddPassiveGameEvent: {
      mutable_add_passive_game_event()->::ssl_protos::gc::AddPassiveGameEvent::MergeFrom(from.add_passive_game_event());
      break;
    }
    case kAddProposal: {
      mutable_add_proposal()->::ssl_protos::gc::AddProposal::MergeFrom(from.add_proposal());
      break;
    }
    case kStartBallPlacement: {
      mutable_start_ball_placement()->::ssl_protos::gc::StartBallPlacement::MergeFrom(from.start_ball_placement());
      break;
    }
    case kContinue: {
      mutable_continue_()->::ssl_protos::gc::Continue::MergeFrom(from.continue_());
      break;
    }
    case kUpdateConfig: {
      mutable_update_config()->::ssl_protos::gc::UpdateConfig::MergeFrom(from.update_config());
      break;
    }
    case kUpdateTeamState: {
      mutable_update_team_state()->::ssl_protos::gc::UpdateTeamState::MergeFrom(from.update_team_state());
      break;
    }
    case kSwitchColors: {
      mutable_switch_colors()->::ssl_protos::gc::SwitchColors::MergeFrom(from.switch_colors());
      break;
    }
    case kRevert: {
      mutable_revert()->::ssl_protos::gc::Revert::MergeFrom(from.revert());
      break;
    }
    case kNewGameState: {
      mutable_new_game_state()->::ssl_protos::gc::NewGameState::MergeFrom(from.new_game_state());
      break;
    }
    case kAcceptProposalGroup: {
      mutable_accept_proposal_group()->::ssl_protos::gc::AcceptProposalGroup::MergeFrom(from.accept_proposal_group());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.Change)
}

void Change::SharedCtor() {
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revertible_ = false;
  clear_has_change();
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.Change)
  SharedDtor();
}

void Change::SharedDtor() {
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_change()) {
    clear_change();
  }
}

void Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change& Change::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_Change.base);
  return *internal_default_instance();
}


void Change::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:ssl_protos.gc.Change)
  switch (change_case()) {
    case kNewCommand: {
      delete change_.new_command_;
      break;
    }
    case kChangeStage: {
      delete change_.change_stage_;
      break;
    }
    case kSetBallPlacementPos: {
      delete change_.set_ball_placement_pos_;
      break;
    }
    case kAddYellowCard: {
      delete change_.add_yellow_card_;
      break;
    }
    case kAddRedCard: {
      delete change_.add_red_card_;
      break;
    }
    case kYellowCardOver: {
      delete change_.yellow_card_over_;
      break;
    }
    case kAddGameEvent: {
      delete change_.add_game_event_;
      break;
    }
    case kAddPassiveGameEvent: {
      delete change_.add_passive_game_event_;
      break;
    }
    case kAddProposal: {
      delete change_.add_proposal_;
      break;
    }
    case kStartBallPlacement: {
      delete change_.start_ball_placement_;
      break;
    }
    case kContinue: {
      delete change_.continue__;
      break;
    }
    case kUpdateConfig: {
      delete change_.update_config_;
      break;
    }
    case kUpdateTeamState: {
      delete change_.update_team_state_;
      break;
    }
    case kSwitchColors: {
      delete change_.switch_colors_;
      break;
    }
    case kRevert: {
      delete change_.revert_;
      break;
    }
    case kNewGameState: {
      delete change_.new_game_state_;
      break;
    }
    case kAcceptProposalGroup: {
      delete change_.accept_proposal_group_;
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void Change::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmptyNoArena();
  }
  revertible_ = false;
  clear_change();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.Change)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.Change.origin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.NewCommand new_command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.ChangeStage change_stage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.SetBallPlacementPos set_ball_placement_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_ball_placement_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AddYellowCard add_yellow_card = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_yellow_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AddRedCard add_red_card = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_red_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.YellowCardOver yellow_card_over = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow_card_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AddGameEvent add_game_event = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AddProposal add_proposal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.StartBallPlacement start_ball_placement = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_ball_placement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Continue continue = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_continue_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.UpdateConfig update_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.UpdateTeamState update_team_state = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_team_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.SwitchColors switch_colors = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_switch_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Revert revert = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool revertible = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_revertible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revertible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.NewGameState new_game_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AcceptProposalGroup accept_proposal_group = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_proposal_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.AddPassiveGameEvent add_passive_game_event = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_passive_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.Change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.Change)
  return false;
#undef DO_
}

void Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.Change.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->origin(), output);
  }

  switch (change_case()) {
    case kNewCommand:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_new_command(), output);
      break;
    case kChangeStage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_change_stage(), output);
      break;
    case kSetBallPlacementPos:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_set_ball_placement_pos(), output);
      break;
    case kAddYellowCard:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_add_yellow_card(), output);
      break;
    case kAddRedCard:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_add_red_card(), output);
      break;
    case kYellowCardOver:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_yellow_card_over(), output);
      break;
    case kAddGameEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_add_game_event(), output);
      break;
    case kAddProposal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_add_proposal(), output);
      break;
    case kStartBallPlacement:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_start_ball_placement(), output);
      break;
    case kContinue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_continue_(), output);
      break;
    case kUpdateConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_update_config(), output);
      break;
    case kUpdateTeamState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_update_team_state(), output);
      break;
    case kSwitchColors:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_switch_colors(), output);
      break;
    case kRevert:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_revert(), output);
      break;
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->revertible(), output);
  }

  switch (change_case()) {
    case kNewGameState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_new_game_state(), output);
      break;
    case kAcceptProposalGroup:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_accept_proposal_group(), output);
      break;
    case kAddPassiveGameEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_add_passive_game_event(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.Change)
}

::google::protobuf::uint8* Change::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.Change.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->origin(), target);
  }

  switch (change_case()) {
    case kNewCommand:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_new_command(), deterministic, target);
      break;
    case kChangeStage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_change_stage(), deterministic, target);
      break;
    case kSetBallPlacementPos:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_set_ball_placement_pos(), deterministic, target);
      break;
    case kAddYellowCard:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_add_yellow_card(), deterministic, target);
      break;
    case kAddRedCard:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_add_red_card(), deterministic, target);
      break;
    case kYellowCardOver:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_yellow_card_over(), deterministic, target);
      break;
    case kAddGameEvent:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_add_game_event(), deterministic, target);
      break;
    case kAddProposal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_add_proposal(), deterministic, target);
      break;
    case kStartBallPlacement:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_start_ball_placement(), deterministic, target);
      break;
    case kContinue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_continue_(), deterministic, target);
      break;
    case kUpdateConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_update_config(), deterministic, target);
      break;
    case kUpdateTeamState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_update_team_state(), deterministic, target);
      break;
    case kSwitchColors:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_switch_colors(), deterministic, target);
      break;
    case kRevert:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_revert(), deterministic, target);
      break;
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->revertible(), target);
  }

  switch (change_case()) {
    case kNewGameState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_new_game_state(), deterministic, target);
      break;
    case kAcceptProposalGroup:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_accept_proposal_group(), deterministic, target);
      break;
    case kAddPassiveGameEvent:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_add_passive_game_event(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.Change)
  return target;
}

size_t Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.Change)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional bool revertible = 16;
    if (has_revertible()) {
      total_size += 2 + 1;
    }

  }
  switch (change_case()) {
    // optional .ssl_protos.gc.NewCommand new_command = 2;
    case kNewCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.new_command_);
      break;
    }
    // optional .ssl_protos.gc.ChangeStage change_stage = 3;
    case kChangeStage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.change_stage_);
      break;
    }
    // optional .ssl_protos.gc.SetBallPlacementPos set_ball_placement_pos = 4;
    case kSetBallPlacementPos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.set_ball_placement_pos_);
      break;
    }
    // optional .ssl_protos.gc.AddYellowCard add_yellow_card = 5;
    case kAddYellowCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_yellow_card_);
      break;
    }
    // optional .ssl_protos.gc.AddRedCard add_red_card = 6;
    case kAddRedCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_red_card_);
      break;
    }
    // optional .ssl_protos.gc.YellowCardOver yellow_card_over = 7;
    case kYellowCardOver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.yellow_card_over_);
      break;
    }
    // optional .ssl_protos.gc.AddGameEvent add_game_event = 8;
    case kAddGameEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_game_event_);
      break;
    }
    // optional .ssl_protos.gc.AddPassiveGameEvent add_passive_game_event = 19;
    case kAddPassiveGameEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_passive_game_event_);
      break;
    }
    // optional .ssl_protos.gc.AddProposal add_proposal = 9;
    case kAddProposal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_proposal_);
      break;
    }
    // optional .ssl_protos.gc.StartBallPlacement start_ball_placement = 10;
    case kStartBallPlacement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.start_ball_placement_);
      break;
    }
    // optional .ssl_protos.gc.Continue continue = 11;
    case kContinue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.continue__);
      break;
    }
    // optional .ssl_protos.gc.UpdateConfig update_config = 12;
    case kUpdateConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.update_config_);
      break;
    }
    // optional .ssl_protos.gc.UpdateTeamState update_team_state = 13;
    case kUpdateTeamState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.update_team_state_);
      break;
    }
    // optional .ssl_protos.gc.SwitchColors switch_colors = 14;
    case kSwitchColors: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.switch_colors_);
      break;
    }
    // optional .ssl_protos.gc.Revert revert = 15;
    case kRevert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.revert_);
      break;
    }
    // optional .ssl_protos.gc.NewGameState new_game_state = 17;
    case kNewGameState: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.new_game_state_);
      break;
    }
    // optional .ssl_protos.gc.AcceptProposalGroup accept_proposal_group = 18;
    case kAcceptProposalGroup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.accept_proposal_group_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const Change* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.Change)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.Change)
    MergeFrom(*source);
  }
}

void Change::MergeFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_origin();
      origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000002u) {
      revertible_ = from.revertible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.change_case()) {
    case kNewCommand: {
      mutable_new_command()->::ssl_protos::gc::NewCommand::MergeFrom(from.new_command());
      break;
    }
    case kChangeStage: {
      mutable_change_stage()->::ssl_protos::gc::ChangeStage::MergeFrom(from.change_stage());
      break;
    }
    case kSetBallPlacementPos: {
      mutable_set_ball_placement_pos()->::ssl_protos::gc::SetBallPlacementPos::MergeFrom(from.set_ball_placement_pos());
      break;
    }
    case kAddYellowCard: {
      mutable_add_yellow_card()->::ssl_protos::gc::AddYellowCard::MergeFrom(from.add_yellow_card());
      break;
    }
    case kAddRedCard: {
      mutable_add_red_card()->::ssl_protos::gc::AddRedCard::MergeFrom(from.add_red_card());
      break;
    }
    case kYellowCardOver: {
      mutable_yellow_card_over()->::ssl_protos::gc::YellowCardOver::MergeFrom(from.yellow_card_over());
      break;
    }
    case kAddGameEvent: {
      mutable_add_game_event()->::ssl_protos::gc::AddGameEvent::MergeFrom(from.add_game_event());
      break;
    }
    case kAddPassiveGameEvent: {
      mutable_add_passive_game_event()->::ssl_protos::gc::AddPassiveGameEvent::MergeFrom(from.add_passive_game_event());
      break;
    }
    case kAddProposal: {
      mutable_add_proposal()->::ssl_protos::gc::AddProposal::MergeFrom(from.add_proposal());
      break;
    }
    case kStartBallPlacement: {
      mutable_start_ball_placement()->::ssl_protos::gc::StartBallPlacement::MergeFrom(from.start_ball_placement());
      break;
    }
    case kContinue: {
      mutable_continue_()->::ssl_protos::gc::Continue::MergeFrom(from.continue_());
      break;
    }
    case kUpdateConfig: {
      mutable_update_config()->::ssl_protos::gc::UpdateConfig::MergeFrom(from.update_config());
      break;
    }
    case kUpdateTeamState: {
      mutable_update_team_state()->::ssl_protos::gc::UpdateTeamState::MergeFrom(from.update_team_state());
      break;
    }
    case kSwitchColors: {
      mutable_switch_colors()->::ssl_protos::gc::SwitchColors::MergeFrom(from.switch_colors());
      break;
    }
    case kRevert: {
      mutable_revert()->::ssl_protos::gc::Revert::MergeFrom(from.revert());
      break;
    }
    case kNewGameState: {
      mutable_new_game_state()->::ssl_protos::gc::NewGameState::MergeFrom(from.new_game_state());
      break;
    }
    case kAcceptProposalGroup: {
      mutable_accept_proposal_group()->::ssl_protos::gc::AcceptProposalGroup::MergeFrom(from.accept_proposal_group());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void Change::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change::CopyFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {
  switch (change_case()) {
    case kNewCommand: {
      if (has_new_command()) {
        if (!this->new_command().IsInitialized()) return false;
      }
      break;
    }
    case kChangeStage: {
      break;
    }
    case kSetBallPlacementPos: {
      if (has_set_ball_placement_pos()) {
        if (!this->set_ball_placement_pos().IsInitialized()) return false;
      }
      break;
    }
    case kAddYellowCard: {
      if (has_add_yellow_card()) {
        if (!this->add_yellow_card().IsInitialized()) return false;
      }
      break;
    }
    case kAddRedCard: {
      if (has_add_red_card()) {
        if (!this->add_red_card().IsInitialized()) return false;
      }
      break;
    }
    case kYellowCardOver: {
      break;
    }
    case kAddGameEvent: {
      if (has_add_game_event()) {
        if (!this->add_game_event().IsInitialized()) return false;
      }
      break;
    }
    case kAddPassiveGameEvent: {
      if (has_add_passive_game_event()) {
        if (!this->add_passive_game_event().IsInitialized()) return false;
      }
      break;
    }
    case kAddProposal: {
      if (has_add_proposal()) {
        if (!this->add_proposal().IsInitialized()) return false;
      }
      break;
    }
    case kStartBallPlacement: {
      break;
    }
    case kContinue: {
      break;
    }
    case kUpdateConfig: {
      break;
    }
    case kUpdateTeamState: {
      if (has_update_team_state()) {
        if (!this->update_team_state().IsInitialized()) return false;
      }
      break;
    }
    case kSwitchColors: {
      break;
    }
    case kRevert: {
      break;
    }
    case kNewGameState: {
      if (has_new_game_state()) {
        if (!this->new_game_state().IsInitialized()) return false;
      }
      break;
    }
    case kAcceptProposalGroup: {
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Change::Swap(Change* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change::InternalSwap(Change* other) {
  using std::swap;
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(revertible_, other->revertible_);
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewCommand::InitAsDefaultInstance() {
  ::ssl_protos::gc::_NewCommand_default_instance_._instance.get_mutable()->command_ = const_cast< ::ssl_protos::gc::Command*>(
      ::ssl_protos::gc::Command::internal_default_instance());
}
void NewCommand::clear_command() {
  if (command_ != NULL) command_->Clear();
  clear_has_command();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewCommand::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewCommand::NewCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_NewCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.NewCommand)
}
NewCommand::NewCommand(const NewCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::ssl_protos::gc::Command(*from.command_);
  } else {
    command_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.NewCommand)
}

void NewCommand::SharedCtor() {
  command_ = NULL;
}

NewCommand::~NewCommand() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.NewCommand)
  SharedDtor();
}

void NewCommand::SharedDtor() {
  if (this != internal_default_instance()) delete command_;
}

void NewCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewCommand::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewCommand& NewCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_NewCommand.base);
  return *internal_default_instance();
}


void NewCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_ != NULL);
    command_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.NewCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.NewCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.NewCommand)
  return false;
#undef DO_
}

void NewCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.NewCommand)
}

::google::protobuf::uint8* NewCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_command(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.NewCommand)
  return target;
}

size_t NewCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.NewCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Command command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const NewCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.NewCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.NewCommand)
    MergeFrom(*source);
  }
}

void NewCommand::MergeFrom(const NewCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command()) {
    mutable_command()->::ssl_protos::gc::Command::MergeFrom(from.command());
  }
}

void NewCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewCommand::CopyFrom(const NewCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCommand::IsInitialized() const {
  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  return true;
}

void NewCommand::Swap(NewCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewCommand::InternalSwap(NewCommand* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewCommand::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeStage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeStage::kNewStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStage::ChangeStage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_ChangeStage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.ChangeStage)
}
ChangeStage::ChangeStage(const ChangeStage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_stage_ = from.new_stage_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.ChangeStage)
}

void ChangeStage::SharedCtor() {
  new_stage_ = 0;
}

ChangeStage::~ChangeStage() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.ChangeStage)
  SharedDtor();
}

void ChangeStage::SharedDtor() {
}

void ChangeStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeStage::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeStage& ChangeStage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_ChangeStage.base);
  return *internal_default_instance();
}


void ChangeStage::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_stage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.ChangeStage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Referee.Stage new_stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Referee_Stage_IsValid(value)) {
            set_new_stage(static_cast< ::ssl_protos::gc::Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.ChangeStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.ChangeStage)
  return false;
#undef DO_
}

void ChangeStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->new_stage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.ChangeStage)
}

::google::protobuf::uint8* ChangeStage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->new_stage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.ChangeStage)
  return target;
}

size_t ChangeStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.ChangeStage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Referee.Stage new_stage = 1;
  if (has_new_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_stage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeStage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.ChangeStage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.ChangeStage)
    MergeFrom(*source);
  }
}

void ChangeStage::MergeFrom(const ChangeStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_stage()) {
    set_new_stage(from.new_stage());
  }
}

void ChangeStage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStage::CopyFrom(const ChangeStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStage::IsInitialized() const {
  return true;
}

void ChangeStage::Swap(ChangeStage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStage::InternalSwap(ChangeStage* other) {
  using std::swap;
  swap(new_stage_, other->new_stage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeStage::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetBallPlacementPos::InitAsDefaultInstance() {
  ::ssl_protos::gc::_SetBallPlacementPos_default_instance_._instance.get_mutable()->pos_ = const_cast< ::ssl_protos::gc::Vector2*>(
      ::ssl_protos::gc::Vector2::internal_default_instance());
}
void SetBallPlacementPos::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetBallPlacementPos::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetBallPlacementPos::SetBallPlacementPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_SetBallPlacementPos.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.SetBallPlacementPos)
}
SetBallPlacementPos::SetBallPlacementPos(const SetBallPlacementPos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::ssl_protos::gc::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.SetBallPlacementPos)
}

void SetBallPlacementPos::SharedCtor() {
  pos_ = NULL;
}

SetBallPlacementPos::~SetBallPlacementPos() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.SetBallPlacementPos)
  SharedDtor();
}

void SetBallPlacementPos::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void SetBallPlacementPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetBallPlacementPos::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetBallPlacementPos& SetBallPlacementPos::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_SetBallPlacementPos.base);
  return *internal_default_instance();
}


void SetBallPlacementPos::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetBallPlacementPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.SetBallPlacementPos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Vector2 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.SetBallPlacementPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.SetBallPlacementPos)
  return false;
#undef DO_
}

void SetBallPlacementPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.SetBallPlacementPos)
}

::google::protobuf::uint8* SetBallPlacementPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.SetBallPlacementPos)
  return target;
}

size_t SetBallPlacementPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.SetBallPlacementPos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Vector2 pos = 1;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBallPlacementPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBallPlacementPos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetBallPlacementPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.SetBallPlacementPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.SetBallPlacementPos)
    MergeFrom(*source);
  }
}

void SetBallPlacementPos::MergeFrom(const SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::ssl_protos::gc::Vector2::MergeFrom(from.pos());
  }
}

void SetBallPlacementPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBallPlacementPos::CopyFrom(const SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBallPlacementPos::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void SetBallPlacementPos::Swap(SetBallPlacementPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetBallPlacementPos::InternalSwap(SetBallPlacementPos* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetBallPlacementPos::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddYellowCard::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AddYellowCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::ssl_protos::gc::GameEvent*>(
      ::ssl_protos::gc::GameEvent::internal_default_instance());
}
void AddYellowCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddYellowCard::kForTeamFieldNumber;
const int AddYellowCard::kCausedByGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddYellowCard::AddYellowCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AddYellowCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AddYellowCard)
}
AddYellowCard::AddYellowCard(const AddYellowCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::ssl_protos::gc::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AddYellowCard)
}

void AddYellowCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

AddYellowCard::~AddYellowCard() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AddYellowCard)
  SharedDtor();
}

void AddYellowCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void AddYellowCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddYellowCard::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddYellowCard& AddYellowCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AddYellowCard.base);
  return *internal_default_instance();
}


void AddYellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != NULL);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddYellowCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AddYellowCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_for_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AddYellowCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AddYellowCard)
  return false;
#undef DO_
}

void AddYellowCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AddYellowCard)
}

::google::protobuf::uint8* AddYellowCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AddYellowCard)
  return target;
}

size_t AddYellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AddYellowCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .ssl_protos.gc.Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddYellowCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  const AddYellowCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddYellowCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AddYellowCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AddYellowCard)
    MergeFrom(*source);
  }
}

void AddYellowCard::MergeFrom(const AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::ssl_protos::gc::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddYellowCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddYellowCard::CopyFrom(const AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddYellowCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void AddYellowCard::Swap(AddYellowCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddYellowCard::InternalSwap(AddYellowCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddYellowCard::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddRedCard::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AddRedCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::ssl_protos::gc::GameEvent*>(
      ::ssl_protos::gc::GameEvent::internal_default_instance());
}
void AddRedCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRedCard::kForTeamFieldNumber;
const int AddRedCard::kCausedByGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRedCard::AddRedCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AddRedCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AddRedCard)
}
AddRedCard::AddRedCard(const AddRedCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::ssl_protos::gc::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AddRedCard)
}

void AddRedCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

AddRedCard::~AddRedCard() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AddRedCard)
  SharedDtor();
}

void AddRedCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void AddRedCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddRedCard::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRedCard& AddRedCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AddRedCard.base);
  return *internal_default_instance();
}


void AddRedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != NULL);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddRedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AddRedCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_for_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AddRedCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AddRedCard)
  return false;
#undef DO_
}

void AddRedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AddRedCard)
}

::google::protobuf::uint8* AddRedCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AddRedCard)
  return target;
}

size_t AddRedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AddRedCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .ssl_protos.gc.Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRedCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRedCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRedCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AddRedCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AddRedCard)
    MergeFrom(*source);
  }
}

void AddRedCard::MergeFrom(const AddRedCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::ssl_protos::gc::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddRedCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRedCard::CopyFrom(const AddRedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRedCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void AddRedCard::Swap(AddRedCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRedCard::InternalSwap(AddRedCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddRedCard::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YellowCardOver::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YellowCardOver::kForTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YellowCardOver::YellowCardOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_YellowCardOver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.YellowCardOver)
}
YellowCardOver::YellowCardOver(const YellowCardOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.YellowCardOver)
}

void YellowCardOver::SharedCtor() {
  for_team_ = 0;
}

YellowCardOver::~YellowCardOver() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.YellowCardOver)
  SharedDtor();
}

void YellowCardOver::SharedDtor() {
}

void YellowCardOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YellowCardOver::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YellowCardOver& YellowCardOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_YellowCardOver.base);
  return *internal_default_instance();
}


void YellowCardOver::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YellowCardOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.YellowCardOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_for_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.YellowCardOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.YellowCardOver)
  return false;
#undef DO_
}

void YellowCardOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.YellowCardOver)
}

::google::protobuf::uint8* YellowCardOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.YellowCardOver)
  return target;
}

size_t YellowCardOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.YellowCardOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Team for_team = 1;
  if (has_for_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YellowCardOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  const YellowCardOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YellowCardOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.YellowCardOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.YellowCardOver)
    MergeFrom(*source);
  }
}

void YellowCardOver::MergeFrom(const YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_for_team()) {
    set_for_team(from.for_team());
  }
}

void YellowCardOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YellowCardOver::CopyFrom(const YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowCardOver::IsInitialized() const {
  return true;
}

void YellowCardOver::Swap(YellowCardOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YellowCardOver::InternalSwap(YellowCardOver* other) {
  using std::swap;
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YellowCardOver::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddGameEvent::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AddGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::ssl_protos::gc::GameEvent*>(
      ::ssl_protos::gc::GameEvent::internal_default_instance());
}
void AddGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGameEvent::AddGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AddGameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AddGameEvent)
}
AddGameEvent::AddGameEvent(const AddGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_event()) {
    game_event_ = new ::ssl_protos::gc::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AddGameEvent)
}

void AddGameEvent::SharedCtor() {
  game_event_ = NULL;
}

AddGameEvent::~AddGameEvent() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AddGameEvent)
  SharedDtor();
}

void AddGameEvent::SharedDtor() {
  if (this != internal_default_instance()) delete game_event_;
}

void AddGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddGameEvent::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddGameEvent& AddGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AddGameEvent.base);
  return *internal_default_instance();
}


void AddGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != NULL);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AddGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.GameEvent game_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AddGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AddGameEvent)
  return false;
#undef DO_
}

void AddGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AddGameEvent)
}

::google::protobuf::uint8* AddGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AddGameEvent)
  return target;
}

size_t AddGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AddGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (has_game_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AddGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AddGameEvent)
    MergeFrom(*source);
  }
}

void AddGameEvent::MergeFrom(const AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_event()) {
    mutable_game_event()->::ssl_protos::gc::GameEvent::MergeFrom(from.game_event());
  }
}

void AddGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGameEvent::CopyFrom(const AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGameEvent::IsInitialized() const {
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void AddGameEvent::Swap(AddGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGameEvent::InternalSwap(AddGameEvent* other) {
  using std::swap;
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddGameEvent::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPassiveGameEvent::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AddPassiveGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::ssl_protos::gc::GameEvent*>(
      ::ssl_protos::gc::GameEvent::internal_default_instance());
}
void AddPassiveGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPassiveGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPassiveGameEvent::AddPassiveGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AddPassiveGameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AddPassiveGameEvent)
}
AddPassiveGameEvent::AddPassiveGameEvent(const AddPassiveGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_event()) {
    game_event_ = new ::ssl_protos::gc::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AddPassiveGameEvent)
}

void AddPassiveGameEvent::SharedCtor() {
  game_event_ = NULL;
}

AddPassiveGameEvent::~AddPassiveGameEvent() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AddPassiveGameEvent)
  SharedDtor();
}

void AddPassiveGameEvent::SharedDtor() {
  if (this != internal_default_instance()) delete game_event_;
}

void AddPassiveGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddPassiveGameEvent::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPassiveGameEvent& AddPassiveGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AddPassiveGameEvent.base);
  return *internal_default_instance();
}


void AddPassiveGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != NULL);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddPassiveGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AddPassiveGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.GameEvent game_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AddPassiveGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AddPassiveGameEvent)
  return false;
#undef DO_
}

void AddPassiveGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AddPassiveGameEvent)
}

::google::protobuf::uint8* AddPassiveGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AddPassiveGameEvent)
  return target;
}

size_t AddPassiveGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AddPassiveGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.GameEvent game_event = 1;
  if (has_game_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPassiveGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPassiveGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPassiveGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AddPassiveGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AddPassiveGameEvent)
    MergeFrom(*source);
  }
}

void AddPassiveGameEvent::MergeFrom(const AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_event()) {
    mutable_game_event()->::ssl_protos::gc::GameEvent::MergeFrom(from.game_event());
  }
}

void AddPassiveGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPassiveGameEvent::CopyFrom(const AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPassiveGameEvent::IsInitialized() const {
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void AddPassiveGameEvent::Swap(AddPassiveGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPassiveGameEvent::InternalSwap(AddPassiveGameEvent* other) {
  using std::swap;
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddPassiveGameEvent::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddProposal::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AddProposal_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::ssl_protos::gc::Proposal*>(
      ::ssl_protos::gc::Proposal::internal_default_instance());
}
void AddProposal::clear_proposal() {
  if (proposal_ != NULL) proposal_->Clear();
  clear_has_proposal();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddProposal::kProposalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddProposal::AddProposal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AddProposal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AddProposal)
}
AddProposal::AddProposal(const AddProposal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proposal()) {
    proposal_ = new ::ssl_protos::gc::Proposal(*from.proposal_);
  } else {
    proposal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AddProposal)
}

void AddProposal::SharedCtor() {
  proposal_ = NULL;
}

AddProposal::~AddProposal() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AddProposal)
  SharedDtor();
}

void AddProposal::SharedDtor() {
  if (this != internal_default_instance()) delete proposal_;
}

void AddProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddProposal::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddProposal& AddProposal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AddProposal.base);
  return *internal_default_instance();
}


void AddProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proposal_ != NULL);
    proposal_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddProposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AddProposal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Proposal proposal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AddProposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AddProposal)
  return false;
#undef DO_
}

void AddProposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_proposal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AddProposal)
}

::google::protobuf::uint8* AddProposal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_proposal(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AddProposal)
  return target;
}

size_t AddProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AddProposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.Proposal proposal = 1;
  if (has_proposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddProposal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const AddProposal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddProposal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AddProposal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AddProposal)
    MergeFrom(*source);
  }
}

void AddProposal::MergeFrom(const AddProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proposal()) {
    mutable_proposal()->::ssl_protos::gc::Proposal::MergeFrom(from.proposal());
  }
}

void AddProposal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddProposal::CopyFrom(const AddProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddProposal::IsInitialized() const {
  if (has_proposal()) {
    if (!this->proposal_->IsInitialized()) return false;
  }
  return true;
}

void AddProposal::Swap(AddProposal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddProposal::InternalSwap(AddProposal* other) {
  using std::swap;
  swap(proposal_, other->proposal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddProposal::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcceptProposalGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptProposalGroup::kGroupIdFieldNumber;
const int AcceptProposalGroup::kAcceptedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptProposalGroup::AcceptProposalGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_AcceptProposalGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AcceptProposalGroup)
}
AcceptProposalGroup::AcceptProposalGroup(const AcceptProposalGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accepted_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accepted_by()) {
    accepted_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accepted_by_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AcceptProposalGroup)
}

void AcceptProposalGroup::SharedCtor() {
  accepted_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
}

AcceptProposalGroup::~AcceptProposalGroup() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AcceptProposalGroup)
  SharedDtor();
}

void AcceptProposalGroup::SharedDtor() {
  accepted_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceptProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AcceptProposalGroup::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptProposalGroup& AcceptProposalGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_AcceptProposalGroup.base);
  return *internal_default_instance();
}


void AcceptProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    accepted_by_.ClearNonDefaultToEmptyNoArena();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcceptProposalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AcceptProposalGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string accepted_by = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accepted_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.AcceptProposalGroup.accepted_by");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AcceptProposalGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AcceptProposalGroup)
  return false;
#undef DO_
}

void AcceptProposalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.AcceptProposalGroup.accepted_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accepted_by(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AcceptProposalGroup)
}

::google::protobuf::uint8* AcceptProposalGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.AcceptProposalGroup.accepted_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accepted_by(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AcceptProposalGroup)
  return target;
}

size_t AcceptProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AcceptProposalGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string accepted_by = 2;
    if (has_accepted_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accepted_by());
    }

    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptProposalGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptProposalGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptProposalGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AcceptProposalGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AcceptProposalGroup)
    MergeFrom(*source);
  }
}

void AcceptProposalGroup::MergeFrom(const AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accepted_by();
      accepted_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accepted_by_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptProposalGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptProposalGroup::CopyFrom(const AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptProposalGroup::IsInitialized() const {
  return true;
}

void AcceptProposalGroup::Swap(AcceptProposalGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptProposalGroup::InternalSwap(AcceptProposalGroup* other) {
  using std::swap;
  accepted_by_.Swap(&other->accepted_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AcceptProposalGroup::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartBallPlacement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartBallPlacement::StartBallPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_StartBallPlacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.StartBallPlacement)
}
StartBallPlacement::StartBallPlacement(const StartBallPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.StartBallPlacement)
}

void StartBallPlacement::SharedCtor() {
}

StartBallPlacement::~StartBallPlacement() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.StartBallPlacement)
  SharedDtor();
}

void StartBallPlacement::SharedDtor() {
}

void StartBallPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartBallPlacement::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartBallPlacement& StartBallPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_StartBallPlacement.base);
  return *internal_default_instance();
}


void StartBallPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.StartBallPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartBallPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.StartBallPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.StartBallPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.StartBallPlacement)
  return false;
#undef DO_
}

void StartBallPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.StartBallPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.StartBallPlacement)
}

::google::protobuf::uint8* StartBallPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.StartBallPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.StartBallPlacement)
  return target;
}

size_t StartBallPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.StartBallPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartBallPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.StartBallPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const StartBallPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartBallPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.StartBallPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.StartBallPlacement)
    MergeFrom(*source);
  }
}

void StartBallPlacement::MergeFrom(const StartBallPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.StartBallPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartBallPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.StartBallPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartBallPlacement::CopyFrom(const StartBallPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.StartBallPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBallPlacement::IsInitialized() const {
  return true;
}

void StartBallPlacement::Swap(StartBallPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartBallPlacement::InternalSwap(StartBallPlacement* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartBallPlacement::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Continue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Continue::Continue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_Continue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.Continue)
}
Continue::Continue(const Continue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.Continue)
}

void Continue::SharedCtor() {
}

Continue::~Continue() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.Continue)
  SharedDtor();
}

void Continue::SharedDtor() {
}

void Continue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Continue::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Continue& Continue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_Continue.base);
  return *internal_default_instance();
}


void Continue::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.Continue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Continue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.Continue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.Continue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.Continue)
  return false;
#undef DO_
}

void Continue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.Continue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.Continue)
}

::google::protobuf::uint8* Continue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.Continue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.Continue)
  return target;
}

size_t Continue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.Continue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Continue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.Continue)
  GOOGLE_DCHECK_NE(&from, this);
  const Continue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Continue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.Continue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.Continue)
    MergeFrom(*source);
  }
}

void Continue::MergeFrom(const Continue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.Continue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Continue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.Continue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Continue::CopyFrom(const Continue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.Continue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Continue::IsInitialized() const {
  return true;
}

void Continue::Swap(Continue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Continue::InternalSwap(Continue* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Continue::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateConfig::kDivisionFieldNumber;
const int UpdateConfig::kFirstKickoffTeamFieldNumber;
const int UpdateConfig::kAutoContinueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateConfig::UpdateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_UpdateConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.UpdateConfig)
}
UpdateConfig::UpdateConfig(const UpdateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&division_, &from.division_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_continue_) -
    reinterpret_cast<char*>(&division_)) + sizeof(auto_continue_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.UpdateConfig)
}

void UpdateConfig::SharedCtor() {
  ::memset(&division_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_continue_) -
      reinterpret_cast<char*>(&division_)) + sizeof(auto_continue_));
}

UpdateConfig::~UpdateConfig() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.UpdateConfig)
  SharedDtor();
}

void UpdateConfig::SharedDtor() {
}

void UpdateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateConfig::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateConfig& UpdateConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_UpdateConfig.base);
  return *internal_default_instance();
}


void UpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_continue_) -
        reinterpret_cast<char*>(&division_)) + sizeof(auto_continue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.UpdateConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Division division = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Division_IsValid(value)) {
            set_division(static_cast< ::ssl_protos::gc::Division >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Team first_kickoff_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_first_kickoff_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool auto_continue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_auto_continue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_continue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.UpdateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.UpdateConfig)
  return false;
#undef DO_
}

void UpdateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Division division = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->division(), output);
  }

  // optional .ssl_protos.gc.Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->first_kickoff_team(), output);
  }

  // optional bool auto_continue = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_continue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.UpdateConfig)
}

::google::protobuf::uint8* UpdateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Division division = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->division(), target);
  }

  // optional .ssl_protos.gc.Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->first_kickoff_team(), target);
  }

  // optional bool auto_continue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_continue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.UpdateConfig)
  return target;
}

size_t UpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.UpdateConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ssl_protos.gc.Division division = 1;
    if (has_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->division());
    }

    // optional .ssl_protos.gc.Team first_kickoff_team = 2;
    if (has_first_kickoff_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->first_kickoff_team());
    }

    // optional bool auto_continue = 3;
    if (has_auto_continue()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.UpdateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.UpdateConfig)
    MergeFrom(*source);
  }
}

void UpdateConfig::MergeFrom(const UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      division_ = from.division_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_kickoff_team_ = from.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_continue_ = from.auto_continue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfig::CopyFrom(const UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfig::IsInitialized() const {
  return true;
}

void UpdateConfig::Swap(UpdateConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateConfig::InternalSwap(UpdateConfig* other) {
  using std::swap;
  swap(division_, other->division_);
  swap(first_kickoff_team_, other->first_kickoff_team_);
  swap(auto_continue_, other->auto_continue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateConfig::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateTeamState::InitAsDefaultInstance() {
  ::ssl_protos::gc::_UpdateTeamState_default_instance_._instance.get_mutable()->yellow_card_ = const_cast< ::ssl_protos::gc::YellowCard*>(
      ::ssl_protos::gc::YellowCard::internal_default_instance());
  ::ssl_protos::gc::_UpdateTeamState_default_instance_._instance.get_mutable()->red_card_ = const_cast< ::ssl_protos::gc::RedCard*>(
      ::ssl_protos::gc::RedCard::internal_default_instance());
  ::ssl_protos::gc::_UpdateTeamState_default_instance_._instance.get_mutable()->foul_ = const_cast< ::ssl_protos::gc::Foul*>(
      ::ssl_protos::gc::Foul::internal_default_instance());
}
void UpdateTeamState::clear_yellow_card() {
  if (yellow_card_ != NULL) yellow_card_->Clear();
  clear_has_yellow_card();
}
void UpdateTeamState::clear_red_card() {
  if (red_card_ != NULL) red_card_->Clear();
  clear_has_red_card();
}
void UpdateTeamState::clear_foul() {
  if (foul_ != NULL) foul_->Clear();
  clear_has_foul();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTeamState::kForTeamFieldNumber;
const int UpdateTeamState::kTeamNameFieldNumber;
const int UpdateTeamState::kGoalsFieldNumber;
const int UpdateTeamState::kGoalkeeperFieldNumber;
const int UpdateTeamState::kTimeoutsLeftFieldNumber;
const int UpdateTeamState::kTimeoutTimeLeftFieldNumber;
const int UpdateTeamState::kOnPositiveHalfFieldNumber;
const int UpdateTeamState::kBallPlacementFailuresFieldNumber;
const int UpdateTeamState::kCanPlaceBallFieldNumber;
const int UpdateTeamState::kChallengeFlagsLeftFieldNumber;
const int UpdateTeamState::kRequestsBotSubstitutionFieldNumber;
const int UpdateTeamState::kRequestsTimeoutFieldNumber;
const int UpdateTeamState::kRequestsChallengeFieldNumber;
const int UpdateTeamState::kRequestsEmergencyStopFieldNumber;
const int UpdateTeamState::kYellowCardFieldNumber;
const int UpdateTeamState::kRedCardFieldNumber;
const int UpdateTeamState::kFoulFieldNumber;
const int UpdateTeamState::kRemoveYellowCardFieldNumber;
const int UpdateTeamState::kRemoveRedCardFieldNumber;
const int UpdateTeamState::kRemoveFoulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTeamState::UpdateTeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_UpdateTeamState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.UpdateTeamState)
}
UpdateTeamState::UpdateTeamState(const UpdateTeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  timeout_time_left_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timeout_time_left()) {
    timeout_time_left_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeout_time_left_);
  }
  if (from.has_red_card()) {
    red_card_ = new ::ssl_protos::gc::RedCard(*from.red_card_);
  } else {
    red_card_ = NULL;
  }
  if (from.has_foul()) {
    foul_ = new ::ssl_protos::gc::Foul(*from.foul_);
  } else {
    foul_ = NULL;
  }
  if (from.has_yellow_card()) {
    yellow_card_ = new ::ssl_protos::gc::YellowCard(*from.yellow_card_);
  } else {
    yellow_card_ = NULL;
  }
  ::memcpy(&for_team_, &from.for_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_flags_left_) -
    reinterpret_cast<char*>(&for_team_)) + sizeof(challenge_flags_left_));
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.UpdateTeamState)
}

void UpdateTeamState::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_time_left_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&red_card_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_flags_left_) -
      reinterpret_cast<char*>(&red_card_)) + sizeof(challenge_flags_left_));
}

UpdateTeamState::~UpdateTeamState() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.UpdateTeamState)
  SharedDtor();
}

void UpdateTeamState::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_time_left_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete red_card_;
  if (this != internal_default_instance()) delete foul_;
  if (this != internal_default_instance()) delete yellow_card_;
}

void UpdateTeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateTeamState::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateTeamState& UpdateTeamState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_UpdateTeamState.base);
  return *internal_default_instance();
}


void UpdateTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_time_left_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(red_card_ != NULL);
      red_card_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(foul_ != NULL);
      foul_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(yellow_card_ != NULL);
      yellow_card_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&for_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goalkeeper_) -
        reinterpret_cast<char*>(&for_team_)) + sizeof(goalkeeper_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&timeouts_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remove_red_card_) -
        reinterpret_cast<char*>(&timeouts_left_)) + sizeof(remove_red_card_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&remove_foul_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_flags_left_) -
        reinterpret_cast<char*>(&remove_foul_)) + sizeof(challenge_flags_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateTeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.UpdateTeamState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ssl_protos::gc::Team_IsValid(value)) {
            set_for_team(static_cast< ::ssl_protos::gc::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.UpdateTeamState.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_goals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goalkeeper = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_goalkeeper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goalkeeper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeouts_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timeouts_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeouts_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timeout_time_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeout_time_left()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timeout_time_left().data(), static_cast<int>(this->timeout_time_left().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.UpdateTeamState.timeout_time_left");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool on_positive_half = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_on_positive_half();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_positive_half_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ball_placement_failures = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ball_placement_failures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_placement_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_place_ball = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_can_place_ball();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_place_ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requests_bot_substitution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_requests_bot_substitution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requests_bot_substitution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.RedCard red_card = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Foul foul = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_foul()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remove_yellow_card = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_remove_yellow_card();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_yellow_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remove_red_card = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_remove_red_card();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_red_card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remove_foul = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_remove_foul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_foul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requests_timeout = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_requests_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requests_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requests_challenge = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_requests_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requests_challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requests_emergency_stop = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_requests_emergency_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requests_emergency_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.YellowCard yellow_card = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_flags_left = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_challenge_flags_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_flags_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.UpdateTeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.UpdateTeamState)
  return false;
#undef DO_
}

void UpdateTeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.UpdateTeamState.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional int32 goals = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goals(), output);
  }

  // optional int32 goalkeeper = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goalkeeper(), output);
  }

  // optional int32 timeouts_left = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeouts_left(), output);
  }

  // optional string timeout_time_left = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeout_time_left().data(), static_cast<int>(this->timeout_time_left().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.UpdateTeamState.timeout_time_left");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timeout_time_left(), output);
  }

  // optional bool on_positive_half = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->on_positive_half(), output);
  }

  // optional int32 ball_placement_failures = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ball_placement_failures(), output);
  }

  // optional bool can_place_ball = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->can_place_ball(), output);
  }

  // optional bool requests_bot_substitution = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->requests_bot_substitution(), output);
  }

  // optional .ssl_protos.gc.RedCard red_card = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_red_card(), output);
  }

  // optional .ssl_protos.gc.Foul foul = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_foul(), output);
  }

  // optional uint32 remove_yellow_card = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->remove_yellow_card(), output);
  }

  // optional uint32 remove_red_card = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->remove_red_card(), output);
  }

  // optional uint32 remove_foul = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->remove_foul(), output);
  }

  // optional bool requests_timeout = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->requests_timeout(), output);
  }

  // optional bool requests_challenge = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->requests_challenge(), output);
  }

  // optional bool requests_emergency_stop = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->requests_emergency_stop(), output);
  }

  // optional .ssl_protos.gc.YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_yellow_card(), output);
  }

  // optional int32 challenge_flags_left = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->challenge_flags_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.UpdateTeamState)
}

::google::protobuf::uint8* UpdateTeamState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Team for_team = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.UpdateTeamState.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional int32 goals = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goals(), target);
  }

  // optional int32 goalkeeper = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goalkeeper(), target);
  }

  // optional int32 timeouts_left = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeouts_left(), target);
  }

  // optional string timeout_time_left = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeout_time_left().data(), static_cast<int>(this->timeout_time_left().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.UpdateTeamState.timeout_time_left");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timeout_time_left(), target);
  }

  // optional bool on_positive_half = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->on_positive_half(), target);
  }

  // optional int32 ball_placement_failures = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->can_place_ball(), target);
  }

  // optional bool requests_bot_substitution = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->requests_bot_substitution(), target);
  }

  // optional .ssl_protos.gc.RedCard red_card = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_red_card(), deterministic, target);
  }

  // optional .ssl_protos.gc.Foul foul = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_foul(), deterministic, target);
  }

  // optional uint32 remove_yellow_card = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->remove_yellow_card(), target);
  }

  // optional uint32 remove_red_card = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->remove_red_card(), target);
  }

  // optional uint32 remove_foul = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->remove_foul(), target);
  }

  // optional bool requests_timeout = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->requests_timeout(), target);
  }

  // optional bool requests_challenge = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->requests_challenge(), target);
  }

  // optional bool requests_emergency_stop = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->requests_emergency_stop(), target);
  }

  // optional .ssl_protos.gc.YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_yellow_card(), deterministic, target);
  }

  // optional int32 challenge_flags_left = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->challenge_flags_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.UpdateTeamState)
  return target;
}

size_t UpdateTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.UpdateTeamState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string timeout_time_left = 6;
    if (has_timeout_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeout_time_left());
    }

    // optional .ssl_protos.gc.RedCard red_card = 12;
    if (has_red_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *red_card_);
    }

    // optional .ssl_protos.gc.Foul foul = 13;
    if (has_foul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *foul_);
    }

    // optional .ssl_protos.gc.YellowCard yellow_card = 20;
    if (has_yellow_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yellow_card_);
    }

    // optional .ssl_protos.gc.Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

    // optional int32 goals = 3;
    if (has_goals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goals());
    }

    // optional int32 goalkeeper = 4;
    if (has_goalkeeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goalkeeper());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 timeouts_left = 5;
    if (has_timeouts_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeouts_left());
    }

    // optional int32 ball_placement_failures = 8;
    if (has_ball_placement_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_placement_failures());
    }

    // optional bool on_positive_half = 7;
    if (has_on_positive_half()) {
      total_size += 1 + 1;
    }

    // optional bool can_place_ball = 9;
    if (has_can_place_ball()) {
      total_size += 1 + 1;
    }

    // optional bool requests_bot_substitution = 10;
    if (has_requests_bot_substitution()) {
      total_size += 1 + 1;
    }

    // optional bool requests_timeout = 17;
    if (has_requests_timeout()) {
      total_size += 2 + 1;
    }

    // optional uint32 remove_yellow_card = 14;
    if (has_remove_yellow_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remove_yellow_card());
    }

    // optional uint32 remove_red_card = 15;
    if (has_remove_red_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remove_red_card());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 remove_foul = 16;
    if (has_remove_foul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remove_foul());
    }

    // optional bool requests_challenge = 18;
    if (has_requests_challenge()) {
      total_size += 2 + 1;
    }

    // optional bool requests_emergency_stop = 19;
    if (has_requests_emergency_stop()) {
      total_size += 2 + 1;
    }

    // optional int32 challenge_flags_left = 21;
    if (has_challenge_flags_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_flags_left());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTeamState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateTeamState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.UpdateTeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.UpdateTeamState)
    MergeFrom(*source);
  }
}

void UpdateTeamState::MergeFrom(const UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timeout_time_left();
      timeout_time_left_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeout_time_left_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_red_card()->::ssl_protos::gc::RedCard::MergeFrom(from.red_card());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_foul()->::ssl_protos::gc::Foul::MergeFrom(from.foul());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_yellow_card()->::ssl_protos::gc::YellowCard::MergeFrom(from.yellow_card());
    }
    if (cached_has_bits & 0x00000020u) {
      for_team_ = from.for_team_;
    }
    if (cached_has_bits & 0x00000040u) {
      goals_ = from.goals_;
    }
    if (cached_has_bits & 0x00000080u) {
      goalkeeper_ = from.goalkeeper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      timeouts_left_ = from.timeouts_left_;
    }
    if (cached_has_bits & 0x00000200u) {
      ball_placement_failures_ = from.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000400u) {
      on_positive_half_ = from.on_positive_half_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_place_ball_ = from.can_place_ball_;
    }
    if (cached_has_bits & 0x00001000u) {
      requests_bot_substitution_ = from.requests_bot_substitution_;
    }
    if (cached_has_bits & 0x00002000u) {
      requests_timeout_ = from.requests_timeout_;
    }
    if (cached_has_bits & 0x00004000u) {
      remove_yellow_card_ = from.remove_yellow_card_;
    }
    if (cached_has_bits & 0x00008000u) {
      remove_red_card_ = from.remove_red_card_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      remove_foul_ = from.remove_foul_;
    }
    if (cached_has_bits & 0x00020000u) {
      requests_challenge_ = from.requests_challenge_;
    }
    if (cached_has_bits & 0x00040000u) {
      requests_emergency_stop_ = from.requests_emergency_stop_;
    }
    if (cached_has_bits & 0x00080000u) {
      challenge_flags_left_ = from.challenge_flags_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateTeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTeamState::CopyFrom(const UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTeamState::IsInitialized() const {
  if (has_red_card()) {
    if (!this->red_card_->IsInitialized()) return false;
  }
  if (has_foul()) {
    if (!this->foul_->IsInitialized()) return false;
  }
  if (has_yellow_card()) {
    if (!this->yellow_card_->IsInitialized()) return false;
  }
  return true;
}

void UpdateTeamState::Swap(UpdateTeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateTeamState::InternalSwap(UpdateTeamState* other) {
  using std::swap;
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  timeout_time_left_.Swap(&other->timeout_time_left_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(red_card_, other->red_card_);
  swap(foul_, other->foul_);
  swap(yellow_card_, other->yellow_card_);
  swap(for_team_, other->for_team_);
  swap(goals_, other->goals_);
  swap(goalkeeper_, other->goalkeeper_);
  swap(timeouts_left_, other->timeouts_left_);
  swap(ball_placement_failures_, other->ball_placement_failures_);
  swap(on_positive_half_, other->on_positive_half_);
  swap(can_place_ball_, other->can_place_ball_);
  swap(requests_bot_substitution_, other->requests_bot_substitution_);
  swap(requests_timeout_, other->requests_timeout_);
  swap(remove_yellow_card_, other->remove_yellow_card_);
  swap(remove_red_card_, other->remove_red_card_);
  swap(remove_foul_, other->remove_foul_);
  swap(requests_challenge_, other->requests_challenge_);
  swap(requests_emergency_stop_, other->requests_emergency_stop_);
  swap(challenge_flags_left_, other->challenge_flags_left_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateTeamState::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SwitchColors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchColors::SwitchColors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_SwitchColors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.SwitchColors)
}
SwitchColors::SwitchColors(const SwitchColors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.SwitchColors)
}

void SwitchColors::SharedCtor() {
}

SwitchColors::~SwitchColors() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.SwitchColors)
  SharedDtor();
}

void SwitchColors::SharedDtor() {
}

void SwitchColors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SwitchColors::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SwitchColors& SwitchColors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_SwitchColors.base);
  return *internal_default_instance();
}


void SwitchColors::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SwitchColors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.SwitchColors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.SwitchColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.SwitchColors)
  return false;
#undef DO_
}

void SwitchColors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.SwitchColors)
}

::google::protobuf::uint8* SwitchColors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.SwitchColors)
  return target;
}

size_t SwitchColors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.SwitchColors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchColors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchColors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchColors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.SwitchColors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.SwitchColors)
    MergeFrom(*source);
  }
}

void SwitchColors::MergeFrom(const SwitchColors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SwitchColors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchColors::CopyFrom(const SwitchColors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchColors::IsInitialized() const {
  return true;
}

void SwitchColors::Swap(SwitchColors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchColors::InternalSwap(SwitchColors* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SwitchColors::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Revert::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Revert::kChangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Revert::Revert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_Revert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.Revert)
}
Revert::Revert(const Revert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_id_ = from.change_id_;
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.Revert)
}

void Revert::SharedCtor() {
  change_id_ = 0;
}

Revert::~Revert() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.Revert)
  SharedDtor();
}

void Revert::SharedDtor() {
}

void Revert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Revert::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Revert& Revert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_Revert.base);
  return *internal_default_instance();
}


void Revert::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Revert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.Revert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 change_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_change_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.Revert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.Revert)
  return false;
#undef DO_
}

void Revert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->change_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.Revert)
}

::google::protobuf::uint8* Revert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->change_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.Revert)
  return target;
}

size_t Revert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.Revert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 change_id = 1;
  if (has_change_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Revert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  const Revert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Revert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.Revert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.Revert)
    MergeFrom(*source);
  }
}

void Revert::MergeFrom(const Revert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_id()) {
    set_change_id(from.change_id());
  }
}

void Revert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Revert::CopyFrom(const Revert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Revert::IsInitialized() const {
  return true;
}

void Revert::Swap(Revert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Revert::InternalSwap(Revert* other) {
  using std::swap;
  swap(change_id_, other->change_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Revert::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewGameState::InitAsDefaultInstance() {
  ::ssl_protos::gc::_NewGameState_default_instance_._instance.get_mutable()->game_state_ = const_cast< ::ssl_protos::gc::GameState*>(
      ::ssl_protos::gc::GameState::internal_default_instance());
}
void NewGameState::clear_game_state() {
  if (game_state_ != NULL) game_state_->Clear();
  clear_has_game_state();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewGameState::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewGameState::NewGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5fchange_2eproto::scc_info_NewGameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.NewGameState)
}
NewGameState::NewGameState(const NewGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_state()) {
    game_state_ = new ::ssl_protos::gc::GameState(*from.game_state_);
  } else {
    game_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.NewGameState)
}

void NewGameState::SharedCtor() {
  game_state_ = NULL;
}

NewGameState::~NewGameState() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.NewGameState)
  SharedDtor();
}

void NewGameState::SharedDtor() {
  if (this != internal_default_instance()) delete game_state_;
}

void NewGameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewGameState::descriptor() {
  ::protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewGameState& NewGameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5fchange_2eproto::scc_info_NewGameState.base);
  return *internal_default_instance();
}


void NewGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_state_ != NULL);
    game_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.NewGameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.GameState game_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.NewGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.NewGameState)
  return false;
#undef DO_
}

void NewGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.NewGameState)
}

::google::protobuf::uint8* NewGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.NewGameState)
  return target;
}

size_t NewGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.NewGameState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .ssl_protos.gc.GameState game_state = 1;
  if (has_game_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const NewGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.NewGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.NewGameState)
    MergeFrom(*source);
  }
}

void NewGameState::MergeFrom(const NewGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_state()) {
    mutable_game_state()->::ssl_protos::gc::GameState::MergeFrom(from.game_state());
  }
}

void NewGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGameState::CopyFrom(const NewGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGameState::IsInitialized() const {
  if (has_game_state()) {
    if (!this->game_state_->IsInitialized()) return false;
  }
  return true;
}

void NewGameState::Swap(NewGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewGameState::InternalSwap(NewGameState* other) {
  using std::swap;
  swap(game_state_, other->game_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewGameState::GetMetadata() const {
  protobuf_gc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::StateChange* Arena::CreateMaybeMessage< ::ssl_protos::gc::StateChange >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::StateChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::Change* Arena::CreateMaybeMessage< ::ssl_protos::gc::Change >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::Change >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::NewCommand* Arena::CreateMaybeMessage< ::ssl_protos::gc::NewCommand >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::NewCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::ChangeStage* Arena::CreateMaybeMessage< ::ssl_protos::gc::ChangeStage >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::ChangeStage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::SetBallPlacementPos* Arena::CreateMaybeMessage< ::ssl_protos::gc::SetBallPlacementPos >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::SetBallPlacementPos >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AddYellowCard* Arena::CreateMaybeMessage< ::ssl_protos::gc::AddYellowCard >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AddYellowCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AddRedCard* Arena::CreateMaybeMessage< ::ssl_protos::gc::AddRedCard >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AddRedCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::YellowCardOver* Arena::CreateMaybeMessage< ::ssl_protos::gc::YellowCardOver >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::YellowCardOver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AddGameEvent* Arena::CreateMaybeMessage< ::ssl_protos::gc::AddGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AddGameEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AddPassiveGameEvent* Arena::CreateMaybeMessage< ::ssl_protos::gc::AddPassiveGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AddPassiveGameEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AddProposal* Arena::CreateMaybeMessage< ::ssl_protos::gc::AddProposal >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AddProposal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AcceptProposalGroup* Arena::CreateMaybeMessage< ::ssl_protos::gc::AcceptProposalGroup >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AcceptProposalGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::StartBallPlacement* Arena::CreateMaybeMessage< ::ssl_protos::gc::StartBallPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::StartBallPlacement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::Continue* Arena::CreateMaybeMessage< ::ssl_protos::gc::Continue >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::Continue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::UpdateConfig* Arena::CreateMaybeMessage< ::ssl_protos::gc::UpdateConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::UpdateConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::UpdateTeamState* Arena::CreateMaybeMessage< ::ssl_protos::gc::UpdateTeamState >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::UpdateTeamState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::SwitchColors* Arena::CreateMaybeMessage< ::ssl_protos::gc::SwitchColors >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::SwitchColors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::Revert* Arena::CreateMaybeMessage< ::ssl_protos::gc::Revert >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::Revert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::NewGameState* Arena::CreateMaybeMessage< ::ssl_protos::gc::NewGameState >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::NewGameState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
