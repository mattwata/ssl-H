// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grsim_command.proto

#ifndef PROTOBUF_INCLUDED_grsim_5fcommand_2eproto
#define PROTOBUF_INCLUDED_grsim_5fcommand_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_grsim_5fcommand_2eproto 

namespace protobuf_grsim_5fcommand_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_grsim_5fcommand_2eproto
namespace ssl_protos {
namespace grsim {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
}  // namespace grsim
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::grsim::Command* Arena::CreateMaybeMessage<::ssl_protos::grsim::Command>(Arena*);
template<> ::ssl_protos::grsim::Commands* Arena::CreateMaybeMessage<::ssl_protos::grsim::Commands>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace grsim {

// ===================================================================

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.grsim.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required float kickspeedx = 2;
  bool has_kickspeedx() const;
  void clear_kickspeedx();
  static const int kKickspeedxFieldNumber = 2;
  float kickspeedx() const;
  void set_kickspeedx(float value);

  // required float kickspeedz = 3;
  bool has_kickspeedz() const;
  void clear_kickspeedz();
  static const int kKickspeedzFieldNumber = 3;
  float kickspeedz() const;
  void set_kickspeedz(float value);

  // required float veltangent = 4;
  bool has_veltangent() const;
  void clear_veltangent();
  static const int kVeltangentFieldNumber = 4;
  float veltangent() const;
  void set_veltangent(float value);

  // required float velnormal = 5;
  bool has_velnormal() const;
  void clear_velnormal();
  static const int kVelnormalFieldNumber = 5;
  float velnormal() const;
  void set_velnormal(float value);

  // required float velangular = 6;
  bool has_velangular() const;
  void clear_velangular();
  static const int kVelangularFieldNumber = 6;
  float velangular() const;
  void set_velangular(float value);

  // required bool spinner = 7;
  bool has_spinner() const;
  void clear_spinner();
  static const int kSpinnerFieldNumber = 7;
  bool spinner() const;
  void set_spinner(bool value);

  // required bool wheelsspeed = 8;
  bool has_wheelsspeed() const;
  void clear_wheelsspeed();
  static const int kWheelsspeedFieldNumber = 8;
  bool wheelsspeed() const;
  void set_wheelsspeed(bool value);

  // optional float wheel1 = 9;
  bool has_wheel1() const;
  void clear_wheel1();
  static const int kWheel1FieldNumber = 9;
  float wheel1() const;
  void set_wheel1(float value);

  // optional float wheel2 = 10;
  bool has_wheel2() const;
  void clear_wheel2();
  static const int kWheel2FieldNumber = 10;
  float wheel2() const;
  void set_wheel2(float value);

  // optional float wheel3 = 11;
  bool has_wheel3() const;
  void clear_wheel3();
  static const int kWheel3FieldNumber = 11;
  float wheel3() const;
  void set_wheel3(float value);

  // optional float wheel4 = 12;
  bool has_wheel4() const;
  void clear_wheel4();
  static const int kWheel4FieldNumber = 12;
  float wheel4() const;
  void set_wheel4(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.grsim.Command)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_kickspeedx();
  void clear_has_kickspeedx();
  void set_has_kickspeedz();
  void clear_has_kickspeedz();
  void set_has_veltangent();
  void clear_has_veltangent();
  void set_has_velnormal();
  void clear_has_velnormal();
  void set_has_velangular();
  void clear_has_velangular();
  void set_has_spinner();
  void clear_has_spinner();
  void set_has_wheelsspeed();
  void clear_has_wheelsspeed();
  void set_has_wheel1();
  void clear_has_wheel1();
  void set_has_wheel2();
  void clear_has_wheel2();
  void set_has_wheel3();
  void clear_has_wheel3();
  void set_has_wheel4();
  void clear_has_wheel4();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  float kickspeedx_;
  float kickspeedz_;
  float veltangent_;
  float velnormal_;
  float velangular_;
  bool spinner_;
  bool wheelsspeed_;
  float wheel1_;
  float wheel2_;
  float wheel3_;
  float wheel4_;
  friend struct ::protobuf_grsim_5fcommand_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Commands : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.grsim.Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Commands* other);
  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(NULL);
  }

  Commands* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.grsim.Command robot_commands = 3;
  int robot_commands_size() const;
  void clear_robot_commands();
  static const int kRobotCommandsFieldNumber = 3;
  ::ssl_protos::grsim::Command* mutable_robot_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::grsim::Command >*
      mutable_robot_commands();
  const ::ssl_protos::grsim::Command& robot_commands(int index) const;
  ::ssl_protos::grsim::Command* add_robot_commands();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::grsim::Command >&
      robot_commands() const;

  // required double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // required bool isteamyellow = 2;
  bool has_isteamyellow() const;
  void clear_isteamyellow();
  static const int kIsteamyellowFieldNumber = 2;
  bool isteamyellow() const;
  void set_isteamyellow(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.grsim.Commands)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_isteamyellow();
  void clear_has_isteamyellow();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::grsim::Command > robot_commands_;
  double timestamp_;
  bool isteamyellow_;
  friend struct ::protobuf_grsim_5fcommand_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// required uint32 id = 1;
inline bool Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Command::id() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.id)
  return id_;
}
inline void Command::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.id)
}

// required float kickspeedx = 2;
inline bool Command::has_kickspeedx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_kickspeedx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_kickspeedx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_kickspeedx() {
  kickspeedx_ = 0;
  clear_has_kickspeedx();
}
inline float Command::kickspeedx() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.kickspeedx)
  return kickspeedx_;
}
inline void Command::set_kickspeedx(float value) {
  set_has_kickspeedx();
  kickspeedx_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.kickspeedx)
}

// required float kickspeedz = 3;
inline bool Command::has_kickspeedz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_kickspeedz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_kickspeedz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_kickspeedz() {
  kickspeedz_ = 0;
  clear_has_kickspeedz();
}
inline float Command::kickspeedz() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.kickspeedz)
  return kickspeedz_;
}
inline void Command::set_kickspeedz(float value) {
  set_has_kickspeedz();
  kickspeedz_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.kickspeedz)
}

// required float veltangent = 4;
inline bool Command::has_veltangent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_veltangent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_veltangent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_veltangent() {
  veltangent_ = 0;
  clear_has_veltangent();
}
inline float Command::veltangent() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.veltangent)
  return veltangent_;
}
inline void Command::set_veltangent(float value) {
  set_has_veltangent();
  veltangent_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.veltangent)
}

// required float velnormal = 5;
inline bool Command::has_velnormal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_velnormal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_velnormal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_velnormal() {
  velnormal_ = 0;
  clear_has_velnormal();
}
inline float Command::velnormal() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.velnormal)
  return velnormal_;
}
inline void Command::set_velnormal(float value) {
  set_has_velnormal();
  velnormal_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.velnormal)
}

// required float velangular = 6;
inline bool Command::has_velangular() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Command::set_has_velangular() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Command::clear_has_velangular() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Command::clear_velangular() {
  velangular_ = 0;
  clear_has_velangular();
}
inline float Command::velangular() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.velangular)
  return velangular_;
}
inline void Command::set_velangular(float value) {
  set_has_velangular();
  velangular_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.velangular)
}

// required bool spinner = 7;
inline bool Command::has_spinner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Command::set_has_spinner() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Command::clear_has_spinner() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Command::clear_spinner() {
  spinner_ = false;
  clear_has_spinner();
}
inline bool Command::spinner() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.spinner)
  return spinner_;
}
inline void Command::set_spinner(bool value) {
  set_has_spinner();
  spinner_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.spinner)
}

// required bool wheelsspeed = 8;
inline bool Command::has_wheelsspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Command::set_has_wheelsspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Command::clear_has_wheelsspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Command::clear_wheelsspeed() {
  wheelsspeed_ = false;
  clear_has_wheelsspeed();
}
inline bool Command::wheelsspeed() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.wheelsspeed)
  return wheelsspeed_;
}
inline void Command::set_wheelsspeed(bool value) {
  set_has_wheelsspeed();
  wheelsspeed_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.wheelsspeed)
}

// optional float wheel1 = 9;
inline bool Command::has_wheel1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Command::set_has_wheel1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Command::clear_has_wheel1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Command::clear_wheel1() {
  wheel1_ = 0;
  clear_has_wheel1();
}
inline float Command::wheel1() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.wheel1)
  return wheel1_;
}
inline void Command::set_wheel1(float value) {
  set_has_wheel1();
  wheel1_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.wheel1)
}

// optional float wheel2 = 10;
inline bool Command::has_wheel2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Command::set_has_wheel2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Command::clear_has_wheel2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Command::clear_wheel2() {
  wheel2_ = 0;
  clear_has_wheel2();
}
inline float Command::wheel2() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.wheel2)
  return wheel2_;
}
inline void Command::set_wheel2(float value) {
  set_has_wheel2();
  wheel2_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.wheel2)
}

// optional float wheel3 = 11;
inline bool Command::has_wheel3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Command::set_has_wheel3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Command::clear_has_wheel3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Command::clear_wheel3() {
  wheel3_ = 0;
  clear_has_wheel3();
}
inline float Command::wheel3() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.wheel3)
  return wheel3_;
}
inline void Command::set_wheel3(float value) {
  set_has_wheel3();
  wheel3_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.wheel3)
}

// optional float wheel4 = 12;
inline bool Command::has_wheel4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Command::set_has_wheel4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Command::clear_has_wheel4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Command::clear_wheel4() {
  wheel4_ = 0;
  clear_has_wheel4();
}
inline float Command::wheel4() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Command.wheel4)
  return wheel4_;
}
inline void Command::set_wheel4(float value) {
  set_has_wheel4();
  wheel4_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Command.wheel4)
}

// -------------------------------------------------------------------

// Commands

// required double timestamp = 1;
inline bool Commands::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Commands::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Commands::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Commands::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Commands::timestamp() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Commands.timestamp)
  return timestamp_;
}
inline void Commands::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Commands.timestamp)
}

// required bool isteamyellow = 2;
inline bool Commands::has_isteamyellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Commands::set_has_isteamyellow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Commands::clear_has_isteamyellow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Commands::clear_isteamyellow() {
  isteamyellow_ = false;
  clear_has_isteamyellow();
}
inline bool Commands::isteamyellow() const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Commands.isteamyellow)
  return isteamyellow_;
}
inline void Commands::set_isteamyellow(bool value) {
  set_has_isteamyellow();
  isteamyellow_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.grsim.Commands.isteamyellow)
}

// repeated .ssl_protos.grsim.Command robot_commands = 3;
inline int Commands::robot_commands_size() const {
  return robot_commands_.size();
}
inline void Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
inline ::ssl_protos::grsim::Command* Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.grsim.Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::grsim::Command >*
Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.grsim.Commands.robot_commands)
  return &robot_commands_;
}
inline const ::ssl_protos::grsim::Command& Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.grsim.Commands.robot_commands)
  return robot_commands_.Get(index);
}
inline ::ssl_protos::grsim::Command* Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:ssl_protos.grsim.Commands.robot_commands)
  return robot_commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::grsim::Command >&
Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:ssl_protos.grsim.Commands.robot_commands)
  return robot_commands_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grsim
}  // namespace ssl_protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_grsim_5fcommand_2eproto
