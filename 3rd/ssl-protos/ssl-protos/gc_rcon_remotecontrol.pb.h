// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_rcon_remotecontrol.proto

#ifndef PROTOBUF_INCLUDED_gc_5frcon_5fremotecontrol_2eproto
#define PROTOBUF_INCLUDED_gc_5frcon_5fremotecontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gc_common.pb.h"
#include "gc_rcon.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_5fremotecontrol_2eproto 

namespace protobuf_gc_5frcon_5fremotecontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gc_5frcon_5fremotecontrol_2eproto
namespace ssl_protos {
namespace gc {
class ControllerToRemoteControl;
class ControllerToRemoteControlDefaultTypeInternal;
extern ControllerToRemoteControlDefaultTypeInternal _ControllerToRemoteControl_default_instance_;
class RemoteControlRegistration;
class RemoteControlRegistrationDefaultTypeInternal;
extern RemoteControlRegistrationDefaultTypeInternal _RemoteControlRegistration_default_instance_;
class RemoteControlToController;
class RemoteControlToControllerDefaultTypeInternal;
extern RemoteControlToControllerDefaultTypeInternal _RemoteControlToController_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::gc::ControllerToRemoteControl* Arena::CreateMaybeMessage<::ssl_protos::gc::ControllerToRemoteControl>(Arena*);
template<> ::ssl_protos::gc::RemoteControlRegistration* Arena::CreateMaybeMessage<::ssl_protos::gc::RemoteControlRegistration>(Arena*);
template<> ::ssl_protos::gc::RemoteControlToController* Arena::CreateMaybeMessage<::ssl_protos::gc::RemoteControlToController>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace gc {

enum RemoteControlToController_Request {
  RemoteControlToController_Request_UNKNOWN = 0,
  RemoteControlToController_Request_PING = 1,
  RemoteControlToController_Request_GET_STATE = 2,
  RemoteControlToController_Request_CHALLENGE_FLAG = 3
};
bool RemoteControlToController_Request_IsValid(int value);
const RemoteControlToController_Request RemoteControlToController_Request_Request_MIN = RemoteControlToController_Request_UNKNOWN;
const RemoteControlToController_Request RemoteControlToController_Request_Request_MAX = RemoteControlToController_Request_CHALLENGE_FLAG;
const int RemoteControlToController_Request_Request_ARRAYSIZE = RemoteControlToController_Request_Request_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteControlToController_Request_descriptor();
inline const ::std::string& RemoteControlToController_Request_Name(RemoteControlToController_Request value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteControlToController_Request_descriptor(), value);
}
inline bool RemoteControlToController_Request_Parse(
    const ::std::string& name, RemoteControlToController_Request* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteControlToController_Request>(
    RemoteControlToController_Request_descriptor(), name, value);
}
// ===================================================================

class RemoteControlRegistration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.RemoteControlRegistration) */ {
 public:
  RemoteControlRegistration();
  virtual ~RemoteControlRegistration();

  RemoteControlRegistration(const RemoteControlRegistration& from);

  inline RemoteControlRegistration& operator=(const RemoteControlRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteControlRegistration(RemoteControlRegistration&& from) noexcept
    : RemoteControlRegistration() {
    *this = ::std::move(from);
  }

  inline RemoteControlRegistration& operator=(RemoteControlRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteControlRegistration* internal_default_instance() {
    return reinterpret_cast<const RemoteControlRegistration*>(
               &_RemoteControlRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RemoteControlRegistration* other);
  friend void swap(RemoteControlRegistration& a, RemoteControlRegistration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteControlRegistration* New() const final {
    return CreateMaybeMessage<RemoteControlRegistration>(NULL);
  }

  RemoteControlRegistration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteControlRegistration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteControlRegistration& from);
  void MergeFrom(const RemoteControlRegistration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Signature& _internal_signature() const;
  public:
  const ::ssl_protos::gc::Signature& signature() const;
  ::ssl_protos::gc::Signature* release_signature();
  ::ssl_protos::gc::Signature* mutable_signature();
  void set_allocated_signature(::ssl_protos::gc::Signature* signature);

  // required .ssl_protos.gc.Team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::ssl_protos::gc::Team team() const;
  void set_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.RemoteControlRegistration)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Signature* signature_;
  int team_;
  friend struct ::protobuf_gc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoteControlToController : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.RemoteControlToController) */ {
 public:
  RemoteControlToController();
  virtual ~RemoteControlToController();

  RemoteControlToController(const RemoteControlToController& from);

  inline RemoteControlToController& operator=(const RemoteControlToController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteControlToController(RemoteControlToController&& from) noexcept
    : RemoteControlToController() {
    *this = ::std::move(from);
  }

  inline RemoteControlToController& operator=(RemoteControlToController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlToController& default_instance();

  enum MsgCase {
    kRequest = 2,
    kDesiredKeeper = 3,
    kSubstituteBot = 4,
    kTimeout = 5,
    kEmergencyStop = 6,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteControlToController* internal_default_instance() {
    return reinterpret_cast<const RemoteControlToController*>(
               &_RemoteControlToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RemoteControlToController* other);
  friend void swap(RemoteControlToController& a, RemoteControlToController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteControlToController* New() const final {
    return CreateMaybeMessage<RemoteControlToController>(NULL);
  }

  RemoteControlToController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteControlToController>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteControlToController& from);
  void MergeFrom(const RemoteControlToController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlToController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteControlToController_Request Request;
  static const Request UNKNOWN =
    RemoteControlToController_Request_UNKNOWN;
  static const Request PING =
    RemoteControlToController_Request_PING;
  static const Request GET_STATE =
    RemoteControlToController_Request_GET_STATE;
  static const Request CHALLENGE_FLAG =
    RemoteControlToController_Request_CHALLENGE_FLAG;
  static inline bool Request_IsValid(int value) {
    return RemoteControlToController_Request_IsValid(value);
  }
  static const Request Request_MIN =
    RemoteControlToController_Request_Request_MIN;
  static const Request Request_MAX =
    RemoteControlToController_Request_Request_MAX;
  static const int Request_ARRAYSIZE =
    RemoteControlToController_Request_Request_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Request_descriptor() {
    return RemoteControlToController_Request_descriptor();
  }
  static inline const ::std::string& Request_Name(Request value) {
    return RemoteControlToController_Request_Name(value);
  }
  static inline bool Request_Parse(const ::std::string& name,
      Request* value) {
    return RemoteControlToController_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  private:
  const ::ssl_protos::gc::Signature& _internal_signature() const;
  public:
  const ::ssl_protos::gc::Signature& signature() const;
  ::ssl_protos::gc::Signature* release_signature();
  ::ssl_protos::gc::Signature* mutable_signature();
  void set_allocated_signature(::ssl_protos::gc::Signature* signature);

  // optional .ssl_protos.gc.RemoteControlToController.Request request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  ::ssl_protos::gc::RemoteControlToController_Request request() const;
  void set_request(::ssl_protos::gc::RemoteControlToController_Request value);

  // optional int32 desired_keeper = 3;
  bool has_desired_keeper() const;
  void clear_desired_keeper();
  static const int kDesiredKeeperFieldNumber = 3;
  ::google::protobuf::int32 desired_keeper() const;
  void set_desired_keeper(::google::protobuf::int32 value);

  // optional bool substitute_bot = 4;
  bool has_substitute_bot() const;
  void clear_substitute_bot();
  static const int kSubstituteBotFieldNumber = 4;
  bool substitute_bot() const;
  void set_substitute_bot(bool value);

  // optional bool timeout = 5;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 5;
  bool timeout() const;
  void set_timeout(bool value);

  // optional bool emergency_stop = 6;
  bool has_emergency_stop() const;
  void clear_emergency_stop();
  static const int kEmergencyStopFieldNumber = 6;
  bool emergency_stop() const;
  void set_emergency_stop(bool value);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ssl_protos.gc.RemoteControlToController)
 private:
  void set_has_signature();
  void clear_has_signature();
  void set_has_request();
  void set_has_desired_keeper();
  void set_has_substitute_bot();
  void set_has_timeout();
  void set_has_emergency_stop();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Signature* signature_;
  union MsgUnion {
    MsgUnion() {}
    int request_;
    ::google::protobuf::int32 desired_keeper_;
    bool substitute_bot_;
    bool timeout_;
    bool emergency_stop_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerToRemoteControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.ControllerToRemoteControl) */ {
 public:
  ControllerToRemoteControl();
  virtual ~ControllerToRemoteControl();

  ControllerToRemoteControl(const ControllerToRemoteControl& from);

  inline ControllerToRemoteControl& operator=(const ControllerToRemoteControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerToRemoteControl(ControllerToRemoteControl&& from) noexcept
    : ControllerToRemoteControl() {
    *this = ::std::move(from);
  }

  inline ControllerToRemoteControl& operator=(ControllerToRemoteControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerToRemoteControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerToRemoteControl* internal_default_instance() {
    return reinterpret_cast<const ControllerToRemoteControl*>(
               &_ControllerToRemoteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControllerToRemoteControl* other);
  friend void swap(ControllerToRemoteControl& a, ControllerToRemoteControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerToRemoteControl* New() const final {
    return CreateMaybeMessage<ControllerToRemoteControl>(NULL);
  }

  ControllerToRemoteControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToRemoteControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerToRemoteControl& from);
  void MergeFrom(const ControllerToRemoteControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToRemoteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  void clear_controller_reply();
  static const int kControllerReplyFieldNumber = 1;
  private:
  const ::ssl_protos::gc::ControllerReply& _internal_controller_reply() const;
  public:
  const ::ssl_protos::gc::ControllerReply& controller_reply() const;
  ::ssl_protos::gc::ControllerReply* release_controller_reply();
  ::ssl_protos::gc::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ssl_protos::gc::ControllerReply* controller_reply);

  // optional int32 keeper = 2;
  bool has_keeper() const;
  void clear_keeper();
  static const int kKeeperFieldNumber = 2;
  ::google::protobuf::int32 keeper() const;
  void set_keeper(::google::protobuf::int32 value);

  // optional float emergency_stop_in = 5;
  bool has_emergency_stop_in() const;
  void clear_emergency_stop_in();
  static const int kEmergencyStopInFieldNumber = 5;
  float emergency_stop_in() const;
  void set_emergency_stop_in(float value);

  // optional bool substitute_bot = 3;
  bool has_substitute_bot() const;
  void clear_substitute_bot();
  static const int kSubstituteBotFieldNumber = 3;
  bool substitute_bot() const;
  void set_substitute_bot(bool value);

  // optional bool emergency_stop = 4;
  bool has_emergency_stop() const;
  void clear_emergency_stop();
  static const int kEmergencyStopFieldNumber = 4;
  bool emergency_stop() const;
  void set_emergency_stop(bool value);

  // optional bool timeout = 6;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  bool timeout() const;
  void set_timeout(bool value);

  // optional bool challenge_flag = 7;
  bool has_challenge_flag() const;
  void clear_challenge_flag();
  static const int kChallengeFlagFieldNumber = 7;
  bool challenge_flag() const;
  void set_challenge_flag(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.ControllerToRemoteControl)
 private:
  void set_has_controller_reply();
  void clear_has_controller_reply();
  void set_has_keeper();
  void clear_has_keeper();
  void set_has_substitute_bot();
  void clear_has_substitute_bot();
  void set_has_emergency_stop();
  void clear_has_emergency_stop();
  void set_has_emergency_stop_in();
  void clear_has_emergency_stop_in();
  void set_has_timeout();
  void clear_has_timeout();
  void set_has_challenge_flag();
  void clear_has_challenge_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::ControllerReply* controller_reply_;
  ::google::protobuf::int32 keeper_;
  float emergency_stop_in_;
  bool substitute_bot_;
  bool emergency_stop_;
  bool timeout_;
  bool challenge_flag_;
  friend struct ::protobuf_gc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteControlRegistration

// required .ssl_protos.gc.Team team = 1;
inline bool RemoteControlRegistration::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControlRegistration::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControlRegistration::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControlRegistration::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::ssl_protos::gc::Team RemoteControlRegistration::team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlRegistration.team)
  return static_cast< ::ssl_protos::gc::Team >(team_);
}
inline void RemoteControlRegistration::set_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlRegistration.team)
}

// optional .ssl_protos.gc.Signature signature = 2;
inline bool RemoteControlRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Signature& RemoteControlRegistration::_internal_signature() const {
  return *signature_;
}
inline const ::ssl_protos::gc::Signature& RemoteControlRegistration::signature() const {
  const ::ssl_protos::gc::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlRegistration.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Signature*>(
      &::ssl_protos::gc::_Signature_default_instance_);
}
inline ::ssl_protos::gc::Signature* RemoteControlRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.RemoteControlRegistration.signature)
  clear_has_signature();
  ::ssl_protos::gc::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Signature* RemoteControlRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.RemoteControlRegistration.signature)
  return signature_;
}
inline void RemoteControlRegistration::set_allocated_signature(::ssl_protos::gc::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.RemoteControlRegistration.signature)
}

// -------------------------------------------------------------------

// RemoteControlToController

// optional .ssl_protos.gc.Signature signature = 1;
inline bool RemoteControlToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Signature& RemoteControlToController::_internal_signature() const {
  return *signature_;
}
inline const ::ssl_protos::gc::Signature& RemoteControlToController::signature() const {
  const ::ssl_protos::gc::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Signature*>(
      &::ssl_protos::gc::_Signature_default_instance_);
}
inline ::ssl_protos::gc::Signature* RemoteControlToController::release_signature() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.RemoteControlToController.signature)
  clear_has_signature();
  ::ssl_protos::gc::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Signature* RemoteControlToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.RemoteControlToController.signature)
  return signature_;
}
inline void RemoteControlToController::set_allocated_signature(::ssl_protos::gc::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.RemoteControlToController.signature)
}

// optional .ssl_protos.gc.RemoteControlToController.Request request = 2;
inline bool RemoteControlToController::has_request() const {
  return msg_case() == kRequest;
}
inline void RemoteControlToController::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void RemoteControlToController::clear_request() {
  if (has_request()) {
    msg_.request_ = 0;
    clear_has_msg();
  }
}
inline ::ssl_protos::gc::RemoteControlToController_Request RemoteControlToController::request() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.request)
  if (has_request()) {
    return static_cast< ::ssl_protos::gc::RemoteControlToController_Request >(msg_.request_);
  }
  return static_cast< ::ssl_protos::gc::RemoteControlToController_Request >(0);
}
inline void RemoteControlToController::set_request(::ssl_protos::gc::RemoteControlToController_Request value) {
  assert(::ssl_protos::gc::RemoteControlToController_Request_IsValid(value));
  if (!has_request()) {
    clear_msg();
    set_has_request();
  }
  msg_.request_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlToController.request)
}

// optional int32 desired_keeper = 3;
inline bool RemoteControlToController::has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline void RemoteControlToController::set_has_desired_keeper() {
  _oneof_case_[0] = kDesiredKeeper;
}
inline void RemoteControlToController::clear_desired_keeper() {
  if (has_desired_keeper()) {
    msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline ::google::protobuf::int32 RemoteControlToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.desired_keeper)
  if (has_desired_keeper()) {
    return msg_.desired_keeper_;
  }
  return 0;
}
inline void RemoteControlToController::set_desired_keeper(::google::protobuf::int32 value) {
  if (!has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  msg_.desired_keeper_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlToController.desired_keeper)
}

// optional bool substitute_bot = 4;
inline bool RemoteControlToController::has_substitute_bot() const {
  return msg_case() == kSubstituteBot;
}
inline void RemoteControlToController::set_has_substitute_bot() {
  _oneof_case_[0] = kSubstituteBot;
}
inline void RemoteControlToController::clear_substitute_bot() {
  if (has_substitute_bot()) {
    msg_.substitute_bot_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::substitute_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.substitute_bot)
  if (has_substitute_bot()) {
    return msg_.substitute_bot_;
  }
  return false;
}
inline void RemoteControlToController::set_substitute_bot(bool value) {
  if (!has_substitute_bot()) {
    clear_msg();
    set_has_substitute_bot();
  }
  msg_.substitute_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlToController.substitute_bot)
}

// optional bool timeout = 5;
inline bool RemoteControlToController::has_timeout() const {
  return msg_case() == kTimeout;
}
inline void RemoteControlToController::set_has_timeout() {
  _oneof_case_[0] = kTimeout;
}
inline void RemoteControlToController::clear_timeout() {
  if (has_timeout()) {
    msg_.timeout_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::timeout() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.timeout)
  if (has_timeout()) {
    return msg_.timeout_;
  }
  return false;
}
inline void RemoteControlToController::set_timeout(bool value) {
  if (!has_timeout()) {
    clear_msg();
    set_has_timeout();
  }
  msg_.timeout_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlToController.timeout)
}

// optional bool emergency_stop = 6;
inline bool RemoteControlToController::has_emergency_stop() const {
  return msg_case() == kEmergencyStop;
}
inline void RemoteControlToController::set_has_emergency_stop() {
  _oneof_case_[0] = kEmergencyStop;
}
inline void RemoteControlToController::clear_emergency_stop() {
  if (has_emergency_stop()) {
    msg_.emergency_stop_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::emergency_stop() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RemoteControlToController.emergency_stop)
  if (has_emergency_stop()) {
    return msg_.emergency_stop_;
  }
  return false;
}
inline void RemoteControlToController::set_emergency_stop(bool value) {
  if (!has_emergency_stop()) {
    clear_msg();
    set_has_emergency_stop();
  }
  msg_.emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RemoteControlToController.emergency_stop)
}

inline bool RemoteControlToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RemoteControlToController::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline RemoteControlToController::MsgCase RemoteControlToController::msg_case() const {
  return RemoteControlToController::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToRemoteControl

// optional .ssl_protos.gc.ControllerReply controller_reply = 1;
inline bool ControllerToRemoteControl::has_controller_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerToRemoteControl::set_has_controller_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerToRemoteControl::clear_has_controller_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::ControllerReply& ControllerToRemoteControl::_internal_controller_reply() const {
  return *controller_reply_;
}
inline const ::ssl_protos::gc::ControllerReply& ControllerToRemoteControl::controller_reply() const {
  const ::ssl_protos::gc::ControllerReply* p = controller_reply_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.controller_reply)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::ControllerReply*>(
      &::ssl_protos::gc::_ControllerReply_default_instance_);
}
inline ::ssl_protos::gc::ControllerReply* ControllerToRemoteControl::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.ControllerToRemoteControl.controller_reply)
  clear_has_controller_reply();
  ::ssl_protos::gc::ControllerReply* temp = controller_reply_;
  controller_reply_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::ControllerReply* ControllerToRemoteControl::mutable_controller_reply() {
  set_has_controller_reply();
  if (controller_reply_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::ControllerReply>(GetArenaNoVirtual());
    controller_reply_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.ControllerToRemoteControl.controller_reply)
  return controller_reply_;
}
inline void ControllerToRemoteControl::set_allocated_controller_reply(::ssl_protos::gc::ControllerReply* controller_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controller_reply_);
  }
  if (controller_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
  } else {
    clear_has_controller_reply();
  }
  controller_reply_ = controller_reply;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.ControllerToRemoteControl.controller_reply)
}

// optional int32 keeper = 2;
inline bool ControllerToRemoteControl::has_keeper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerToRemoteControl::set_has_keeper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllerToRemoteControl::clear_has_keeper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllerToRemoteControl::clear_keeper() {
  keeper_ = 0;
  clear_has_keeper();
}
inline ::google::protobuf::int32 ControllerToRemoteControl::keeper() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.keeper)
  return keeper_;
}
inline void ControllerToRemoteControl::set_keeper(::google::protobuf::int32 value) {
  set_has_keeper();
  keeper_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.keeper)
}

// optional bool substitute_bot = 3;
inline bool ControllerToRemoteControl::has_substitute_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControllerToRemoteControl::set_has_substitute_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ControllerToRemoteControl::clear_has_substitute_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ControllerToRemoteControl::clear_substitute_bot() {
  substitute_bot_ = false;
  clear_has_substitute_bot();
}
inline bool ControllerToRemoteControl::substitute_bot() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.substitute_bot)
  return substitute_bot_;
}
inline void ControllerToRemoteControl::set_substitute_bot(bool value) {
  set_has_substitute_bot();
  substitute_bot_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.substitute_bot)
}

// optional bool emergency_stop = 4;
inline bool ControllerToRemoteControl::has_emergency_stop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ControllerToRemoteControl::set_has_emergency_stop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ControllerToRemoteControl::clear_has_emergency_stop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ControllerToRemoteControl::clear_emergency_stop() {
  emergency_stop_ = false;
  clear_has_emergency_stop();
}
inline bool ControllerToRemoteControl::emergency_stop() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.emergency_stop)
  return emergency_stop_;
}
inline void ControllerToRemoteControl::set_emergency_stop(bool value) {
  set_has_emergency_stop();
  emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.emergency_stop)
}

// optional float emergency_stop_in = 5;
inline bool ControllerToRemoteControl::has_emergency_stop_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControllerToRemoteControl::set_has_emergency_stop_in() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControllerToRemoteControl::clear_has_emergency_stop_in() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControllerToRemoteControl::clear_emergency_stop_in() {
  emergency_stop_in_ = 0;
  clear_has_emergency_stop_in();
}
inline float ControllerToRemoteControl::emergency_stop_in() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.emergency_stop_in)
  return emergency_stop_in_;
}
inline void ControllerToRemoteControl::set_emergency_stop_in(float value) {
  set_has_emergency_stop_in();
  emergency_stop_in_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.emergency_stop_in)
}

// optional bool timeout = 6;
inline bool ControllerToRemoteControl::has_timeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ControllerToRemoteControl::set_has_timeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ControllerToRemoteControl::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ControllerToRemoteControl::clear_timeout() {
  timeout_ = false;
  clear_has_timeout();
}
inline bool ControllerToRemoteControl::timeout() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.timeout)
  return timeout_;
}
inline void ControllerToRemoteControl::set_timeout(bool value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.timeout)
}

// optional bool challenge_flag = 7;
inline bool ControllerToRemoteControl::has_challenge_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ControllerToRemoteControl::set_has_challenge_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ControllerToRemoteControl::clear_has_challenge_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ControllerToRemoteControl::clear_challenge_flag() {
  challenge_flag_ = false;
  clear_has_challenge_flag();
}
inline bool ControllerToRemoteControl::challenge_flag() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ControllerToRemoteControl.challenge_flag)
  return challenge_flag_;
}
inline void ControllerToRemoteControl::set_challenge_flag(bool value) {
  set_has_challenge_flag();
  challenge_flag_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ControllerToRemoteControl.challenge_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gc
}  // namespace ssl_protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssl_protos::gc::RemoteControlToController_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::gc::RemoteControlToController_Request>() {
  return ::ssl_protos::gc::RemoteControlToController_Request_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gc_5frcon_5fremotecontrol_2eproto
