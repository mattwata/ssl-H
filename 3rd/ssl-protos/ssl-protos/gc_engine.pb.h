// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_engine.proto

#ifndef PROTOBUF_INCLUDED_gc_5fengine_2eproto
#define PROTOBUF_INCLUDED_gc_5fengine_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gc_geometry.pb.h"
#include "gc_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fengine_2eproto 

namespace protobuf_gc_5fengine_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gc_5fengine_2eproto
namespace ssl_protos {
namespace gc {
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class GcState;
class GcStateDefaultTypeInternal;
extern GcStateDefaultTypeInternal _GcState_default_instance_;
class GcStateAutoRef;
class GcStateAutoRefDefaultTypeInternal;
extern GcStateAutoRefDefaultTypeInternal _GcStateAutoRef_default_instance_;
class GcStateTeam;
class GcStateTeamDefaultTypeInternal;
extern GcStateTeamDefaultTypeInternal _GcStateTeam_default_instance_;
class GcStateTracker;
class GcStateTrackerDefaultTypeInternal;
extern GcStateTrackerDefaultTypeInternal _GcStateTracker_default_instance_;
class GcState_AutoRefStateEntry_DoNotUse;
class GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TeamStateEntry_DoNotUse;
class GcState_TeamStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_TeamStateEntry_DoNotUseDefaultTypeInternal _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_TrackerStateEntry_DoNotUse;
class GcState_TrackerStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_TrackerStateEntry_DoNotUseDefaultTypeInternal _GcState_TrackerStateEntry_DoNotUse_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::gc::Ball* Arena::CreateMaybeMessage<::ssl_protos::gc::Ball>(Arena*);
template<> ::ssl_protos::gc::GcState* Arena::CreateMaybeMessage<::ssl_protos::gc::GcState>(Arena*);
template<> ::ssl_protos::gc::GcStateAutoRef* Arena::CreateMaybeMessage<::ssl_protos::gc::GcStateAutoRef>(Arena*);
template<> ::ssl_protos::gc::GcStateTeam* Arena::CreateMaybeMessage<::ssl_protos::gc::GcStateTeam>(Arena*);
template<> ::ssl_protos::gc::GcStateTracker* Arena::CreateMaybeMessage<::ssl_protos::gc::GcStateTracker>(Arena*);
template<> ::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage<::ssl_protos::gc::GcState_AutoRefStateEntry_DoNotUse>(Arena*);
template<> ::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage<::ssl_protos::gc::GcState_TeamStateEntry_DoNotUse>(Arena*);
template<> ::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse* Arena::CreateMaybeMessage<::ssl_protos::gc::GcState_TrackerStateEntry_DoNotUse>(Arena*);
template<> ::ssl_protos::gc::Robot* Arena::CreateMaybeMessage<::ssl_protos::gc::Robot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace gc {

// ===================================================================

class GcState_TeamStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateTeam,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateTeam,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GcState_TeamStateEntry_DoNotUse();
  GcState_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_TeamStateEntry_DoNotUse& other);
  static const GcState_TeamStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TeamStateEntry_DoNotUse*>(&_GcState_TeamStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState_AutoRefStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateAutoRef,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateAutoRef,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GcState_AutoRefStateEntry_DoNotUse();
  GcState_AutoRefStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other);
  static const GcState_AutoRefStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_AutoRefStateEntry_DoNotUse*>(&_GcState_AutoRefStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState_TrackerStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_TrackerStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateTracker,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_TrackerStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::GcStateTracker,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GcState_TrackerStateEntry_DoNotUse();
  GcState_TrackerStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_TrackerStateEntry_DoNotUse& other);
  static const GcState_TrackerStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TrackerStateEntry_DoNotUse*>(&_GcState_TrackerStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GcState) */ {
 public:
  GcState();
  virtual ~GcState();

  GcState(const GcState& from);

  inline GcState& operator=(const GcState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcState(GcState&& from) noexcept
    : GcState() {
    *this = ::std::move(from);
  }

  inline GcState& operator=(GcState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcState* internal_default_instance() {
    return reinterpret_cast<const GcState*>(
               &_GcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GcState* other);
  friend void swap(GcState& a, GcState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcState* New() const final {
    return CreateMaybeMessage<GcState>(NULL);
  }

  GcState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcState& from);
  void MergeFrom(const GcState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
  int team_state_size() const;
  void clear_team_state();
  static const int kTeamStateFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >&
      team_state() const;
  ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >*
      mutable_team_state();

  // map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
  int auto_ref_state_size() const;
  void clear_auto_ref_state();
  static const int kAutoRefStateFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >&
      auto_ref_state() const;
  ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >*
      mutable_auto_ref_state();

  // map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
  int tracker_state_size() const;
  void clear_tracker_state();
  static const int kTrackerStateFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >&
      tracker_state() const;
  ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >*
      mutable_tracker_state();

  // optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
  bool has_tracker_state_gc() const;
  void clear_tracker_state_gc();
  static const int kTrackerStateGcFieldNumber = 4;
  private:
  const ::ssl_protos::gc::GcStateTracker& _internal_tracker_state_gc() const;
  public:
  const ::ssl_protos::gc::GcStateTracker& tracker_state_gc() const;
  ::ssl_protos::gc::GcStateTracker* release_tracker_state_gc();
  ::ssl_protos::gc::GcStateTracker* mutable_tracker_state_gc();
  void set_allocated_tracker_state_gc(::ssl_protos::gc::GcStateTracker* tracker_state_gc);

  // optional bool ready_to_continue = 5;
  bool has_ready_to_continue() const;
  void clear_ready_to_continue();
  static const int kReadyToContinueFieldNumber = 5;
  bool ready_to_continue() const;
  void set_ready_to_continue(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GcState)
 private:
  void set_has_tracker_state_gc();
  void clear_has_tracker_state_gc();
  void set_has_ready_to_continue();
  void clear_has_ready_to_continue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      GcState_TeamStateEntry_DoNotUse,
      ::std::string, ::ssl_protos::gc::GcStateTeam,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > team_state_;
  ::google::protobuf::internal::MapField<
      GcState_AutoRefStateEntry_DoNotUse,
      ::std::string, ::ssl_protos::gc::GcStateAutoRef,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > auto_ref_state_;
  ::google::protobuf::internal::MapField<
      GcState_TrackerStateEntry_DoNotUse,
      ::std::string, ::ssl_protos::gc::GcStateTracker,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tracker_state_;
  ::ssl_protos::gc::GcStateTracker* tracker_state_gc_;
  bool ready_to_continue_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GcStateTeam) */ {
 public:
  GcStateTeam();
  virtual ~GcStateTeam();

  GcStateTeam(const GcStateTeam& from);

  inline GcStateTeam& operator=(const GcStateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateTeam(GcStateTeam&& from) noexcept
    : GcStateTeam() {
    *this = ::std::move(from);
  }

  inline GcStateTeam& operator=(GcStateTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateTeam* internal_default_instance() {
    return reinterpret_cast<const GcStateTeam*>(
               &_GcStateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GcStateTeam* other);
  friend void swap(GcStateTeam& a, GcStateTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateTeam* New() const final {
    return CreateMaybeMessage<GcStateTeam>(NULL);
  }

  GcStateTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateTeam& from);
  void MergeFrom(const GcStateTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool connected = 1;
  bool has_connected() const;
  void clear_connected();
  static const int kConnectedFieldNumber = 1;
  bool connected() const;
  void set_connected(bool value);

  // optional bool connection_verified = 2;
  bool has_connection_verified() const;
  void clear_connection_verified();
  static const int kConnectionVerifiedFieldNumber = 2;
  bool connection_verified() const;
  void set_connection_verified(bool value);

  // optional bool remote_control_connected = 3;
  bool has_remote_control_connected() const;
  void clear_remote_control_connected();
  static const int kRemoteControlConnectedFieldNumber = 3;
  bool remote_control_connected() const;
  void set_remote_control_connected(bool value);

  // optional bool remote_control_connection_verified = 4;
  bool has_remote_control_connection_verified() const;
  void clear_remote_control_connection_verified();
  static const int kRemoteControlConnectionVerifiedFieldNumber = 4;
  bool remote_control_connection_verified() const;
  void set_remote_control_connection_verified(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GcStateTeam)
 private:
  void set_has_connected();
  void clear_has_connected();
  void set_has_connection_verified();
  void clear_has_connection_verified();
  void set_has_remote_control_connected();
  void clear_has_remote_control_connected();
  void set_has_remote_control_connection_verified();
  void clear_has_remote_control_connection_verified();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool connected_;
  bool connection_verified_;
  bool remote_control_connected_;
  bool remote_control_connection_verified_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateAutoRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GcStateAutoRef) */ {
 public:
  GcStateAutoRef();
  virtual ~GcStateAutoRef();

  GcStateAutoRef(const GcStateAutoRef& from);

  inline GcStateAutoRef& operator=(const GcStateAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateAutoRef(GcStateAutoRef&& from) noexcept
    : GcStateAutoRef() {
    *this = ::std::move(from);
  }

  inline GcStateAutoRef& operator=(GcStateAutoRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateAutoRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateAutoRef* internal_default_instance() {
    return reinterpret_cast<const GcStateAutoRef*>(
               &_GcStateAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GcStateAutoRef* other);
  friend void swap(GcStateAutoRef& a, GcStateAutoRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateAutoRef* New() const final {
    return CreateMaybeMessage<GcStateAutoRef>(NULL);
  }

  GcStateAutoRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateAutoRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateAutoRef& from);
  void MergeFrom(const GcStateAutoRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateAutoRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool connection_verified = 1;
  bool has_connection_verified() const;
  void clear_connection_verified();
  static const int kConnectionVerifiedFieldNumber = 1;
  bool connection_verified() const;
  void set_connection_verified(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GcStateAutoRef)
 private:
  void set_has_connection_verified();
  void clear_has_connection_verified();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool connection_verified_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateTracker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GcStateTracker) */ {
 public:
  GcStateTracker();
  virtual ~GcStateTracker();

  GcStateTracker(const GcStateTracker& from);

  inline GcStateTracker& operator=(const GcStateTracker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateTracker(GcStateTracker&& from) noexcept
    : GcStateTracker() {
    *this = ::std::move(from);
  }

  inline GcStateTracker& operator=(GcStateTracker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateTracker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateTracker* internal_default_instance() {
    return reinterpret_cast<const GcStateTracker*>(
               &_GcStateTracker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GcStateTracker* other);
  friend void swap(GcStateTracker& a, GcStateTracker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateTracker* New() const final {
    return CreateMaybeMessage<GcStateTracker>(NULL);
  }

  GcStateTracker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateTracker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateTracker& from);
  void MergeFrom(const GcStateTracker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTracker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.gc.Robot robots = 3;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 3;
  ::ssl_protos::gc::Robot* mutable_robots(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Robot >*
      mutable_robots();
  const ::ssl_protos::gc::Robot& robots(int index) const;
  ::ssl_protos::gc::Robot* add_robots();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Robot >&
      robots() const;

  // optional string source_name = 1;
  bool has_source_name() const;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 1;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  #if LANG_CXX11
  void set_source_name(::std::string&& value);
  #endif
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // optional string uuid = 4;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional .ssl_protos.gc.Ball ball = 2;
  bool has_ball() const;
  void clear_ball();
  static const int kBallFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Ball& _internal_ball() const;
  public:
  const ::ssl_protos::gc::Ball& ball() const;
  ::ssl_protos::gc::Ball* release_ball();
  ::ssl_protos::gc::Ball* mutable_ball();
  void set_allocated_ball(::ssl_protos::gc::Ball* ball);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GcStateTracker)
 private:
  void set_has_source_name();
  void clear_has_source_name();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_ball();
  void clear_has_ball();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Robot > robots_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::ssl_protos::gc::Ball* ball_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ball : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.Ball) */ {
 public:
  Ball();
  virtual ~Ball();

  Ball(const Ball& from);

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Ball* other);
  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(NULL);
  }

  Ball* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::ssl_protos::gc::Vector3& _internal_pos() const;
  public:
  const ::ssl_protos::gc::Vector3& pos() const;
  ::ssl_protos::gc::Vector3* release_pos();
  ::ssl_protos::gc::Vector3* mutable_pos();
  void set_allocated_pos(::ssl_protos::gc::Vector3* pos);

  // optional .ssl_protos.gc.Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector3& _internal_vel() const;
  public:
  const ::ssl_protos::gc::Vector3& vel() const;
  ::ssl_protos::gc::Vector3* release_vel();
  ::ssl_protos::gc::Vector3* mutable_vel();
  void set_allocated_vel(::ssl_protos::gc::Vector3* vel);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.Ball)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_vel();
  void clear_has_vel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector3* pos_;
  ::ssl_protos::gc::Vector3* vel_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.RobotId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::ssl_protos::gc::RobotId& _internal_id() const;
  public:
  const ::ssl_protos::gc::RobotId& id() const;
  ::ssl_protos::gc::RobotId* release_id();
  ::ssl_protos::gc::RobotId* mutable_id();
  void set_allocated_id(::ssl_protos::gc::RobotId* id);

  // optional .ssl_protos.gc.Vector2 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_pos() const;
  public:
  const ::ssl_protos::gc::Vector2& pos() const;
  ::ssl_protos::gc::Vector2* release_pos();
  ::ssl_protos::gc::Vector2* mutable_pos();
  void set_allocated_pos(::ssl_protos::gc::Vector2* pos);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.Robot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_pos();
  void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::RobotId* id_;
  ::ssl_protos::gc::Vector2* pos_;
  friend struct ::protobuf_gc_5fengine_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GcState

// map<string, .ssl_protos.gc.GcStateTeam> team_state = 1;
inline int GcState::team_state_size() const {
  return team_state_.size();
}
inline void GcState::clear_team_state() {
  team_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >&
GcState::team_state() const {
  // @@protoc_insertion_point(field_map:ssl_protos.gc.GcState.team_state)
  return team_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTeam >*
GcState::mutable_team_state() {
  // @@protoc_insertion_point(field_mutable_map:ssl_protos.gc.GcState.team_state)
  return team_state_.MutableMap();
}

// map<string, .ssl_protos.gc.GcStateAutoRef> auto_ref_state = 2;
inline int GcState::auto_ref_state_size() const {
  return auto_ref_state_.size();
}
inline void GcState::clear_auto_ref_state() {
  auto_ref_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >&
GcState::auto_ref_state() const {
  // @@protoc_insertion_point(field_map:ssl_protos.gc.GcState.auto_ref_state)
  return auto_ref_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateAutoRef >*
GcState::mutable_auto_ref_state() {
  // @@protoc_insertion_point(field_mutable_map:ssl_protos.gc.GcState.auto_ref_state)
  return auto_ref_state_.MutableMap();
}

// map<string, .ssl_protos.gc.GcStateTracker> tracker_state = 3;
inline int GcState::tracker_state_size() const {
  return tracker_state_.size();
}
inline void GcState::clear_tracker_state() {
  tracker_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >&
GcState::tracker_state() const {
  // @@protoc_insertion_point(field_map:ssl_protos.gc.GcState.tracker_state)
  return tracker_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::GcStateTracker >*
GcState::mutable_tracker_state() {
  // @@protoc_insertion_point(field_mutable_map:ssl_protos.gc.GcState.tracker_state)
  return tracker_state_.MutableMap();
}

// optional .ssl_protos.gc.GcStateTracker tracker_state_gc = 4;
inline bool GcState::has_tracker_state_gc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcState::set_has_tracker_state_gc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcState::clear_has_tracker_state_gc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcState::clear_tracker_state_gc() {
  if (tracker_state_gc_ != NULL) tracker_state_gc_->Clear();
  clear_has_tracker_state_gc();
}
inline const ::ssl_protos::gc::GcStateTracker& GcState::_internal_tracker_state_gc() const {
  return *tracker_state_gc_;
}
inline const ::ssl_protos::gc::GcStateTracker& GcState::tracker_state_gc() const {
  const ::ssl_protos::gc::GcStateTracker* p = tracker_state_gc_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcState.tracker_state_gc)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GcStateTracker*>(
      &::ssl_protos::gc::_GcStateTracker_default_instance_);
}
inline ::ssl_protos::gc::GcStateTracker* GcState::release_tracker_state_gc() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GcState.tracker_state_gc)
  clear_has_tracker_state_gc();
  ::ssl_protos::gc::GcStateTracker* temp = tracker_state_gc_;
  tracker_state_gc_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GcStateTracker* GcState::mutable_tracker_state_gc() {
  set_has_tracker_state_gc();
  if (tracker_state_gc_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GcStateTracker>(GetArenaNoVirtual());
    tracker_state_gc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GcState.tracker_state_gc)
  return tracker_state_gc_;
}
inline void GcState::set_allocated_tracker_state_gc(::ssl_protos::gc::GcStateTracker* tracker_state_gc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tracker_state_gc_;
  }
  if (tracker_state_gc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tracker_state_gc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tracker_state_gc, submessage_arena);
    }
    set_has_tracker_state_gc();
  } else {
    clear_has_tracker_state_gc();
  }
  tracker_state_gc_ = tracker_state_gc;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GcState.tracker_state_gc)
}

// optional bool ready_to_continue = 5;
inline bool GcState::has_ready_to_continue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GcState::set_has_ready_to_continue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GcState::clear_has_ready_to_continue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GcState::clear_ready_to_continue() {
  ready_to_continue_ = false;
  clear_has_ready_to_continue();
}
inline bool GcState::ready_to_continue() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcState.ready_to_continue)
  return ready_to_continue_;
}
inline void GcState::set_ready_to_continue(bool value) {
  set_has_ready_to_continue();
  ready_to_continue_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcState.ready_to_continue)
}

// -------------------------------------------------------------------

// GcStateTeam

// optional bool connected = 1;
inline bool GcStateTeam::has_connected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateTeam::set_has_connected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateTeam::clear_has_connected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateTeam::clear_connected() {
  connected_ = false;
  clear_has_connected();
}
inline bool GcStateTeam::connected() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTeam.connected)
  return connected_;
}
inline void GcStateTeam::set_connected(bool value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTeam.connected)
}

// optional bool connection_verified = 2;
inline bool GcStateTeam::has_connection_verified() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GcStateTeam::set_has_connection_verified() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GcStateTeam::clear_has_connection_verified() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GcStateTeam::clear_connection_verified() {
  connection_verified_ = false;
  clear_has_connection_verified();
}
inline bool GcStateTeam::connection_verified() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTeam.connection_verified)
  return connection_verified_;
}
inline void GcStateTeam::set_connection_verified(bool value) {
  set_has_connection_verified();
  connection_verified_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTeam.connection_verified)
}

// optional bool remote_control_connected = 3;
inline bool GcStateTeam::has_remote_control_connected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GcStateTeam::set_has_remote_control_connected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GcStateTeam::clear_has_remote_control_connected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GcStateTeam::clear_remote_control_connected() {
  remote_control_connected_ = false;
  clear_has_remote_control_connected();
}
inline bool GcStateTeam::remote_control_connected() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTeam.remote_control_connected)
  return remote_control_connected_;
}
inline void GcStateTeam::set_remote_control_connected(bool value) {
  set_has_remote_control_connected();
  remote_control_connected_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTeam.remote_control_connected)
}

// optional bool remote_control_connection_verified = 4;
inline bool GcStateTeam::has_remote_control_connection_verified() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GcStateTeam::set_has_remote_control_connection_verified() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GcStateTeam::clear_has_remote_control_connection_verified() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GcStateTeam::clear_remote_control_connection_verified() {
  remote_control_connection_verified_ = false;
  clear_has_remote_control_connection_verified();
}
inline bool GcStateTeam::remote_control_connection_verified() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTeam.remote_control_connection_verified)
  return remote_control_connection_verified_;
}
inline void GcStateTeam::set_remote_control_connection_verified(bool value) {
  set_has_remote_control_connection_verified();
  remote_control_connection_verified_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTeam.remote_control_connection_verified)
}

// -------------------------------------------------------------------

// GcStateAutoRef

// optional bool connection_verified = 1;
inline bool GcStateAutoRef::has_connection_verified() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateAutoRef::set_has_connection_verified() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateAutoRef::clear_has_connection_verified() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateAutoRef::clear_connection_verified() {
  connection_verified_ = false;
  clear_has_connection_verified();
}
inline bool GcStateAutoRef::connection_verified() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateAutoRef.connection_verified)
  return connection_verified_;
}
inline void GcStateAutoRef::set_connection_verified(bool value) {
  set_has_connection_verified();
  connection_verified_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateAutoRef.connection_verified)
}

// -------------------------------------------------------------------

// GcStateTracker

// optional string source_name = 1;
inline bool GcStateTracker::has_source_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateTracker::set_has_source_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateTracker::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateTracker::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_name();
}
inline const ::std::string& GcStateTracker::source_name() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTracker.source_name)
  return source_name_.GetNoArena();
}
inline void GcStateTracker::set_source_name(const ::std::string& value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTracker.source_name)
}
#if LANG_CXX11
inline void GcStateTracker::set_source_name(::std::string&& value) {
  set_has_source_name();
  source_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.GcStateTracker.source_name)
}
#endif
inline void GcStateTracker::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GcStateTracker.source_name)
}
inline void GcStateTracker::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GcStateTracker.source_name)
}
inline ::std::string* GcStateTracker::mutable_source_name() {
  set_has_source_name();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GcStateTracker.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcStateTracker::release_source_name() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GcStateTracker.source_name)
  if (!has_source_name()) {
    return NULL;
  }
  clear_has_source_name();
  return source_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcStateTracker::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    set_has_source_name();
  } else {
    clear_has_source_name();
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GcStateTracker.source_name)
}

// optional string uuid = 4;
inline bool GcStateTracker::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GcStateTracker::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GcStateTracker::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GcStateTracker::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& GcStateTracker::uuid() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTracker.uuid)
  return uuid_.GetNoArena();
}
inline void GcStateTracker::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GcStateTracker.uuid)
}
#if LANG_CXX11
inline void GcStateTracker::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.GcStateTracker.uuid)
}
#endif
inline void GcStateTracker::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.GcStateTracker.uuid)
}
inline void GcStateTracker::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.GcStateTracker.uuid)
}
inline ::std::string* GcStateTracker::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GcStateTracker.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcStateTracker::release_uuid() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GcStateTracker.uuid)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcStateTracker::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GcStateTracker.uuid)
}

// optional .ssl_protos.gc.Ball ball = 2;
inline bool GcStateTracker::has_ball() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GcStateTracker::set_has_ball() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GcStateTracker::clear_has_ball() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GcStateTracker::clear_ball() {
  if (ball_ != NULL) ball_->Clear();
  clear_has_ball();
}
inline const ::ssl_protos::gc::Ball& GcStateTracker::_internal_ball() const {
  return *ball_;
}
inline const ::ssl_protos::gc::Ball& GcStateTracker::ball() const {
  const ::ssl_protos::gc::Ball* p = ball_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTracker.ball)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Ball*>(
      &::ssl_protos::gc::_Ball_default_instance_);
}
inline ::ssl_protos::gc::Ball* GcStateTracker::release_ball() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.GcStateTracker.ball)
  clear_has_ball();
  ::ssl_protos::gc::Ball* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Ball* GcStateTracker::mutable_ball() {
  set_has_ball();
  if (ball_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Ball>(GetArenaNoVirtual());
    ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GcStateTracker.ball)
  return ball_;
}
inline void GcStateTracker::set_allocated_ball(::ssl_protos::gc::Ball* ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ball_;
  }
  if (ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    set_has_ball();
  } else {
    clear_has_ball();
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.GcStateTracker.ball)
}

// repeated .ssl_protos.gc.Robot robots = 3;
inline int GcStateTracker::robots_size() const {
  return robots_.size();
}
inline void GcStateTracker::clear_robots() {
  robots_.Clear();
}
inline ::ssl_protos::gc::Robot* GcStateTracker::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.GcStateTracker.robots)
  return robots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Robot >*
GcStateTracker::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.GcStateTracker.robots)
  return &robots_;
}
inline const ::ssl_protos::gc::Robot& GcStateTracker::robots(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GcStateTracker.robots)
  return robots_.Get(index);
}
inline ::ssl_protos::gc::Robot* GcStateTracker::add_robots() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.GcStateTracker.robots)
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Robot >&
GcStateTracker::robots() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.GcStateTracker.robots)
  return robots_;
}

// -------------------------------------------------------------------

// Ball

// optional .ssl_protos.gc.Vector3 pos = 1;
inline bool Ball::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector3& Ball::_internal_pos() const {
  return *pos_;
}
inline const ::ssl_protos::gc::Vector3& Ball::pos() const {
  const ::ssl_protos::gc::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Ball.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector3*>(
      &::ssl_protos::gc::_Vector3_default_instance_);
}
inline ::ssl_protos::gc::Vector3* Ball::release_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Ball.pos)
  clear_has_pos();
  ::ssl_protos::gc::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector3* Ball::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Ball.pos)
  return pos_;
}
inline void Ball::set_allocated_pos(::ssl_protos::gc::Vector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Ball.pos)
}

// optional .ssl_protos.gc.Vector3 vel = 2;
inline bool Ball::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector3& Ball::_internal_vel() const {
  return *vel_;
}
inline const ::ssl_protos::gc::Vector3& Ball::vel() const {
  const ::ssl_protos::gc::Vector3* p = vel_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Ball.vel)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector3*>(
      &::ssl_protos::gc::_Vector3_default_instance_);
}
inline ::ssl_protos::gc::Vector3* Ball::release_vel() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Ball.vel)
  clear_has_vel();
  ::ssl_protos::gc::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector3* Ball::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector3>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Ball.vel)
  return vel_;
}
inline void Ball::set_allocated_vel(::ssl_protos::gc::Vector3* vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_);
  }
  if (vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    set_has_vel();
  } else {
    clear_has_vel();
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Ball.vel)
}

// -------------------------------------------------------------------

// Robot

// optional .ssl_protos.gc.RobotId id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::RobotId& Robot::_internal_id() const {
  return *id_;
}
inline const ::ssl_protos::gc::RobotId& Robot::id() const {
  const ::ssl_protos::gc::RobotId* p = id_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Robot.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::RobotId*>(
      &::ssl_protos::gc::_RobotId_default_instance_);
}
inline ::ssl_protos::gc::RobotId* Robot::release_id() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Robot.id)
  clear_has_id();
  ::ssl_protos::gc::RobotId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::RobotId* Robot::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::RobotId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Robot.id)
  return id_;
}
inline void Robot::set_allocated_id(::ssl_protos::gc::RobotId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Robot.id)
}

// optional .ssl_protos.gc.Vector2 pos = 2;
inline bool Robot::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& Robot::_internal_pos() const {
  return *pos_;
}
inline const ::ssl_protos::gc::Vector2& Robot::pos() const {
  const ::ssl_protos::gc::Vector2* p = pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Robot.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* Robot::release_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Robot.pos)
  clear_has_pos();
  ::ssl_protos::gc::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* Robot::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Robot.pos)
  return pos_;
}
inline void Robot::set_allocated_pos(::ssl_protos::gc::Vector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Robot.pos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gc
}  // namespace ssl_protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gc_5fengine_2eproto
