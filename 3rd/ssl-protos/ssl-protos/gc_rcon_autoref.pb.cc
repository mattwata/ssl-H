// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_rcon_autoref.proto

#include "gc_rcon_autoref.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gc_5fgame_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fgame_5fevent_2eproto ::google::protobuf::internal::SCCInfo<38> scc_info_GameEvent;
}  // namespace protobuf_gc_5fgame_5fevent_2eproto
namespace protobuf_gc_5frcon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signature;
}  // namespace protobuf_gc_5frcon_2eproto
namespace ssl_protos {
namespace gc {
class AutoRefRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutoRefRegistration>
      _instance;
} _AutoRefRegistration_default_instance_;
class AutoRefToControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutoRefToController>
      _instance;
} _AutoRefToController_default_instance_;
class ControllerToAutoRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerToAutoRef>
      _instance;
  const ::ssl_protos::gc::ControllerReply* controller_reply_;
} _ControllerToAutoRef_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace protobuf_gc_5frcon_5fautoref_2eproto {
static void InitDefaultsAutoRefRegistration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AutoRefRegistration_default_instance_;
    new (ptr) ::ssl_protos::gc::AutoRefRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AutoRefRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AutoRefRegistration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAutoRefRegistration}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsAutoRefToController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_AutoRefToController_default_instance_;
    new (ptr) ::ssl_protos::gc::AutoRefToController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::AutoRefToController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AutoRefToController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAutoRefToController}, {
      &protobuf_gc_5frcon_2eproto::scc_info_Signature.base,
      &protobuf_gc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsControllerToAutoRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssl_protos::gc::_ControllerToAutoRef_default_instance_;
    new (ptr) ::ssl_protos::gc::ControllerToAutoRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssl_protos::gc::ControllerToAutoRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControllerToAutoRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControllerToAutoRef}, {
      &protobuf_gc_5frcon_2eproto::scc_info_ControllerReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AutoRefRegistration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutoRefToController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerToAutoRef.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefRegistration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefRegistration, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefRegistration, signature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefToController, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefToController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefToController, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::AutoRefToController, game_event_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToAutoRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToAutoRef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ssl_protos::gc::ControllerToAutoRefDefaultTypeInternal, controller_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssl_protos::gc::ControllerToAutoRef, msg_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ssl_protos::gc::AutoRefRegistration)},
  { 9, 16, sizeof(::ssl_protos::gc::AutoRefToController)},
  { 18, 25, sizeof(::ssl_protos::gc::ControllerToAutoRef)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AutoRefRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_AutoRefToController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssl_protos::gc::_ControllerToAutoRef_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gc_rcon_autoref.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025gc_rcon_autoref.proto\022\rssl_protos.gc\032\023"
      "gc_game_event.proto\032\rgc_rcon.proto\"V\n\023Au"
      "toRefRegistration\022\022\n\nidentifier\030\001 \002(\t\022+\n"
      "\tsignature\030\002 \001(\0132\030.ssl_protos.gc.Signatu"
      "re\"|\n\023AutoRefToController\022+\n\tsignature\030\001"
      " \001(\0132\030.ssl_protos.gc.Signature\022,\n\ngame_e"
      "vent\030\002 \001(\0132\030.ssl_protos.gc.GameEventJ\004\010\003"
      "\020\004J\004\010\004\020\005\"X\n\023ControllerToAutoRef\022:\n\020contr"
      "oller_reply\030\001 \001(\0132\036.ssl_protos.gc.Contro"
      "llerReplyH\000B\005\n\003msgB>Z<github.com/RoboCup"
      "-SSL/ssl-game-controller/internal/app/rc"
      "on"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gc_rcon_autoref.proto", &protobuf_RegisterTypes);
  ::protobuf_gc_5fgame_5fevent_2eproto::AddDescriptors();
  ::protobuf_gc_5frcon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gc_5frcon_5fautoref_2eproto
namespace ssl_protos {
namespace gc {

// ===================================================================

void AutoRefRegistration::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AutoRefRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
}
void AutoRefRegistration::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefRegistration::kIdentifierFieldNumber;
const int AutoRefRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefRegistration::AutoRefRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fautoref_2eproto::scc_info_AutoRefRegistration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AutoRefRegistration)
}
AutoRefRegistration::AutoRefRegistration(const AutoRefRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_identifier()) {
    identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AutoRefRegistration)
}

void AutoRefRegistration::SharedCtor() {
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = NULL;
}

AutoRefRegistration::~AutoRefRegistration() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AutoRefRegistration)
  SharedDtor();
}

void AutoRefRegistration::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void AutoRefRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AutoRefRegistration::descriptor() {
  ::protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefRegistration& AutoRefRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fautoref_2eproto::scc_info_AutoRefRegistration.base);
  return *internal_default_instance();
}


void AutoRefRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AutoRefRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AutoRefRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), static_cast<int>(this->identifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssl_protos.gc.AutoRefRegistration.identifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AutoRefRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AutoRefRegistration)
  return false;
#undef DO_
}

void AutoRefRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AutoRefRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.AutoRefRegistration.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AutoRefRegistration)
}

::google::protobuf::uint8* AutoRefRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AutoRefRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), static_cast<int>(this->identifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssl_protos.gc.AutoRefRegistration.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // optional .ssl_protos.gc.Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_signature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AutoRefRegistration)
  return target;
}

size_t AutoRefRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AutoRefRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  // optional .ssl_protos.gc.Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AutoRefRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AutoRefRegistration)
    MergeFrom(*source);
  }
}

void AutoRefRegistration::MergeFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
    }
  }
}

void AutoRefRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefRegistration::CopyFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefRegistration::Swap(AutoRefRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefRegistration::InternalSwap(AutoRefRegistration* other) {
  using std::swap;
  identifier_.Swap(&other->identifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AutoRefRegistration::GetMetadata() const {
  protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AutoRefToController::InitAsDefaultInstance() {
  ::ssl_protos::gc::_AutoRefToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::ssl_protos::gc::Signature*>(
      ::ssl_protos::gc::Signature::internal_default_instance());
  ::ssl_protos::gc::_AutoRefToController_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::ssl_protos::gc::GameEvent*>(
      ::ssl_protos::gc::GameEvent::internal_default_instance());
}
void AutoRefToController::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
void AutoRefToController::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoRefToController::kSignatureFieldNumber;
const int AutoRefToController::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoRefToController::AutoRefToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fautoref_2eproto::scc_info_AutoRefToController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.AutoRefToController)
}
AutoRefToController::AutoRefToController(const AutoRefToController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::ssl_protos::gc::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  if (from.has_game_event()) {
    game_event_ = new ::ssl_protos::gc::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.AutoRefToController)
}

void AutoRefToController::SharedCtor() {
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_event_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(game_event_));
}

AutoRefToController::~AutoRefToController() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.AutoRefToController)
  SharedDtor();
}

void AutoRefToController::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete game_event_;
}

void AutoRefToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AutoRefToController::descriptor() {
  ::protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoRefToController& AutoRefToController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fautoref_2eproto::scc_info_AutoRefToController.base);
  return *internal_default_instance();
}


void AutoRefToController::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.AutoRefToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(signature_ != NULL);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != NULL);
      game_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoRefToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.AutoRefToController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.Signature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssl_protos.gc.GameEvent game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.AutoRefToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.AutoRefToController)
  return false;
#undef DO_
}

void AutoRefToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.AutoRefToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_signature(), output);
  }

  // optional .ssl_protos.gc.GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.AutoRefToController)
}

::google::protobuf::uint8* AutoRefToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.AutoRefToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ssl_protos.gc.Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_signature(), deterministic, target);
  }

  // optional .ssl_protos.gc.GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.AutoRefToController)
  return target;
}

size_t AutoRefToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.AutoRefToController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ssl_protos.gc.Signature signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .ssl_protos.gc.GameEvent game_event = 2;
    if (has_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefToController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoRefToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.AutoRefToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.AutoRefToController)
    MergeFrom(*source);
  }
}

void AutoRefToController::MergeFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_signature()->::ssl_protos::gc::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_event()->::ssl_protos::gc::GameEvent::MergeFrom(from.game_event());
    }
  }
}

void AutoRefToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefToController::CopyFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefToController::IsInitialized() const {
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefToController::Swap(AutoRefToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoRefToController::InternalSwap(AutoRefToController* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AutoRefToController::GetMetadata() const {
  protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerToAutoRef::InitAsDefaultInstance() {
  ::ssl_protos::gc::_ControllerToAutoRef_default_instance_.controller_reply_ = const_cast< ::ssl_protos::gc::ControllerReply*>(
      ::ssl_protos::gc::ControllerReply::internal_default_instance());
}
void ControllerToAutoRef::set_allocated_controller_reply(::ssl_protos::gc::ControllerReply* controller_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (controller_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.ControllerToAutoRef.controller_reply)
}
void ControllerToAutoRef::clear_controller_reply() {
  if (has_controller_reply()) {
    delete msg_.controller_reply_;
    clear_has_msg();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToAutoRef::kControllerReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToAutoRef::ControllerToAutoRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gc_5frcon_5fautoref_2eproto::scc_info_ControllerToAutoRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssl_protos.gc.ControllerToAutoRef)
}
ControllerToAutoRef::ControllerToAutoRef(const ControllerToAutoRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ssl_protos::gc::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ssl_protos.gc.ControllerToAutoRef)
}

void ControllerToAutoRef::SharedCtor() {
  clear_has_msg();
}

ControllerToAutoRef::~ControllerToAutoRef() {
  // @@protoc_insertion_point(destructor:ssl_protos.gc.ControllerToAutoRef)
  SharedDtor();
}

void ControllerToAutoRef::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerToAutoRef::descriptor() {
  ::protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerToAutoRef& ControllerToAutoRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gc_5frcon_5fautoref_2eproto::scc_info_ControllerToAutoRef.base);
  return *internal_default_instance();
}


void ControllerToAutoRef::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ssl_protos.gc.ControllerToAutoRef)
  switch (msg_case()) {
    case kControllerReply: {
      delete msg_.controller_reply_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ssl_protos.gc.ControllerToAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerToAutoRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssl_protos.gc.ControllerToAutoRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssl_protos.gc.ControllerToAutoRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssl_protos.gc.ControllerToAutoRef)
  return false;
#undef DO_
}

void ControllerToAutoRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssl_protos.gc.ControllerToAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssl_protos.gc.ControllerToAutoRef)
}

::google::protobuf::uint8* ControllerToAutoRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssl_protos.gc.ControllerToAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
  if (has_controller_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_reply(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssl_protos.gc.ControllerToAutoRef)
  return target;
}

size_t ControllerToAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssl_protos.gc.ControllerToAutoRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (msg_case()) {
    // optional .ssl_protos.gc.ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToAutoRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssl_protos.gc.ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToAutoRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToAutoRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssl_protos.gc.ControllerToAutoRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssl_protos.gc.ControllerToAutoRef)
    MergeFrom(*source);
  }
}

void ControllerToAutoRef::MergeFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssl_protos.gc.ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      mutable_controller_reply()->::ssl_protos::gc::ControllerReply::MergeFrom(from.controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToAutoRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssl_protos.gc.ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToAutoRef::CopyFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssl_protos.gc.ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToAutoRef::IsInitialized() const {
  return true;
}

void ControllerToAutoRef::Swap(ControllerToAutoRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToAutoRef::InternalSwap(ControllerToAutoRef* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerToAutoRef::GetMetadata() const {
  protobuf_gc_5frcon_5fautoref_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gc_5frcon_5fautoref_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AutoRefRegistration* Arena::CreateMaybeMessage< ::ssl_protos::gc::AutoRefRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AutoRefRegistration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::AutoRefToController* Arena::CreateMaybeMessage< ::ssl_protos::gc::AutoRefToController >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::AutoRefToController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssl_protos::gc::ControllerToAutoRef* Arena::CreateMaybeMessage< ::ssl_protos::gc::ControllerToAutoRef >(Arena* arena) {
  return Arena::CreateInternal< ::ssl_protos::gc::ControllerToAutoRef >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
