// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gc_state.proto

#ifndef PROTOBUF_INCLUDED_gc_5fstate_2eproto
#define PROTOBUF_INCLUDED_gc_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gc_common.pb.h"
#include "gc_geometry.pb.h"
#include "gc_game_event.pb.h"
#include "gc_referee_message.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gc_5fstate_2eproto 

namespace protobuf_gc_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gc_5fstate_2eproto
namespace ssl_protos {
namespace gc {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Foul;
class FoulDefaultTypeInternal;
extern FoulDefaultTypeInternal _Foul_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Proposal;
class ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class ProposalGroup;
class ProposalGroupDefaultTypeInternal;
extern ProposalGroupDefaultTypeInternal _ProposalGroup_default_instance_;
class RedCard;
class RedCardDefaultTypeInternal;
extern RedCardDefaultTypeInternal _RedCard_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_TeamStateEntry_DoNotUse;
class State_TeamStateEntry_DoNotUseDefaultTypeInternal;
extern State_TeamStateEntry_DoNotUseDefaultTypeInternal _State_TeamStateEntry_DoNotUse_default_instance_;
class TeamInfo;
class TeamInfoDefaultTypeInternal;
extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;
class YellowCard;
class YellowCardDefaultTypeInternal;
extern YellowCardDefaultTypeInternal _YellowCard_default_instance_;
}  // namespace gc
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::gc::Command* Arena::CreateMaybeMessage<::ssl_protos::gc::Command>(Arena*);
template<> ::ssl_protos::gc::Foul* Arena::CreateMaybeMessage<::ssl_protos::gc::Foul>(Arena*);
template<> ::ssl_protos::gc::GameState* Arena::CreateMaybeMessage<::ssl_protos::gc::GameState>(Arena*);
template<> ::ssl_protos::gc::Proposal* Arena::CreateMaybeMessage<::ssl_protos::gc::Proposal>(Arena*);
template<> ::ssl_protos::gc::ProposalGroup* Arena::CreateMaybeMessage<::ssl_protos::gc::ProposalGroup>(Arena*);
template<> ::ssl_protos::gc::RedCard* Arena::CreateMaybeMessage<::ssl_protos::gc::RedCard>(Arena*);
template<> ::ssl_protos::gc::State* Arena::CreateMaybeMessage<::ssl_protos::gc::State>(Arena*);
template<> ::ssl_protos::gc::State_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage<::ssl_protos::gc::State_TeamStateEntry_DoNotUse>(Arena*);
template<> ::ssl_protos::gc::TeamInfo* Arena::CreateMaybeMessage<::ssl_protos::gc::TeamInfo>(Arena*);
template<> ::ssl_protos::gc::YellowCard* Arena::CreateMaybeMessage<::ssl_protos::gc::YellowCard>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace gc {

enum Command_Type {
  Command_Type_UNKNOWN = 0,
  Command_Type_HALT = 1,
  Command_Type_STOP = 2,
  Command_Type_NORMAL_START = 3,
  Command_Type_FORCE_START = 4,
  Command_Type_DIRECT = 5,
  Command_Type_INDIRECT = 6,
  Command_Type_KICKOFF = 7,
  Command_Type_PENALTY = 8,
  Command_Type_TIMEOUT = 9,
  Command_Type_BALL_PLACEMENT = 10
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_UNKNOWN;
const Command_Type Command_Type_Type_MAX = Command_Type_BALL_PLACEMENT;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
enum GameState_Type {
  GameState_Type_UNKNOWN = 0,
  GameState_Type_HALT = 1,
  GameState_Type_STOP = 2,
  GameState_Type_RUNNING = 3,
  GameState_Type_FREE_KICK = 4,
  GameState_Type_KICKOFF = 5,
  GameState_Type_PENALTY = 6,
  GameState_Type_TIMEOUT = 7,
  GameState_Type_BALL_PLACEMENT = 8
};
bool GameState_Type_IsValid(int value);
const GameState_Type GameState_Type_Type_MIN = GameState_Type_UNKNOWN;
const GameState_Type GameState_Type_Type_MAX = GameState_Type_BALL_PLACEMENT;
const int GameState_Type_Type_ARRAYSIZE = GameState_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_Type_descriptor();
inline const ::std::string& GameState_Type_Name(GameState_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_Type_descriptor(), value);
}
inline bool GameState_Type_Parse(
    const ::std::string& name, GameState_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_Type>(
    GameState_Type_descriptor(), name, value);
}
// ===================================================================

class YellowCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.YellowCard) */ {
 public:
  YellowCard();
  virtual ~YellowCard();

  YellowCard(const YellowCard& from);

  inline YellowCard& operator=(const YellowCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YellowCard(YellowCard&& from) noexcept
    : YellowCard() {
    *this = ::std::move(from);
  }

  inline YellowCard& operator=(YellowCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YellowCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YellowCard* internal_default_instance() {
    return reinterpret_cast<const YellowCard*>(
               &_YellowCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(YellowCard* other);
  friend void swap(YellowCard& a, YellowCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YellowCard* New() const final {
    return CreateMaybeMessage<YellowCard>(NULL);
  }

  YellowCard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<YellowCard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const YellowCard& from);
  void MergeFrom(const YellowCard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YellowCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  void clear_caused_by_game_event();
  static const int kCausedByGameEventFieldNumber = 2;
  private:
  const ::ssl_protos::gc::GameEvent& _internal_caused_by_game_event() const;
  public:
  const ::ssl_protos::gc::GameEvent& caused_by_game_event() const;
  ::ssl_protos::gc::GameEvent* release_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event);

  // optional .google.protobuf.Duration time_remaining = 3;
  bool has_time_remaining() const;
  void clear_time_remaining();
  static const int kTimeRemainingFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_time_remaining() const;
  public:
  const ::google::protobuf::Duration& time_remaining() const;
  ::google::protobuf::Duration* release_time_remaining();
  ::google::protobuf::Duration* mutable_time_remaining();
  void set_allocated_time_remaining(::google::protobuf::Duration* time_remaining);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.YellowCard)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_caused_by_game_event();
  void clear_has_caused_by_game_event();
  void set_has_time_remaining();
  void clear_has_time_remaining();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::GameEvent* caused_by_game_event_;
  ::google::protobuf::Duration* time_remaining_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.RedCard) */ {
 public:
  RedCard();
  virtual ~RedCard();

  RedCard(const RedCard& from);

  inline RedCard& operator=(const RedCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedCard(RedCard&& from) noexcept
    : RedCard() {
    *this = ::std::move(from);
  }

  inline RedCard& operator=(RedCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedCard* internal_default_instance() {
    return reinterpret_cast<const RedCard*>(
               &_RedCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RedCard* other);
  friend void swap(RedCard& a, RedCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedCard* New() const final {
    return CreateMaybeMessage<RedCard>(NULL);
  }

  RedCard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RedCard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RedCard& from);
  void MergeFrom(const RedCard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  void clear_caused_by_game_event();
  static const int kCausedByGameEventFieldNumber = 2;
  private:
  const ::ssl_protos::gc::GameEvent& _internal_caused_by_game_event() const;
  public:
  const ::ssl_protos::gc::GameEvent& caused_by_game_event() const;
  ::ssl_protos::gc::GameEvent* release_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.RedCard)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_caused_by_game_event();
  void clear_has_caused_by_game_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::GameEvent* caused_by_game_event_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Foul : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.Foul) */ {
 public:
  Foul();
  virtual ~Foul();

  Foul(const Foul& from);

  inline Foul& operator=(const Foul& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Foul(Foul&& from) noexcept
    : Foul() {
    *this = ::std::move(from);
  }

  inline Foul& operator=(Foul&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Foul& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Foul* internal_default_instance() {
    return reinterpret_cast<const Foul*>(
               &_Foul_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Foul* other);
  friend void swap(Foul& a, Foul& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Foul* New() const final {
    return CreateMaybeMessage<Foul>(NULL);
  }

  Foul* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Foul>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Foul& from);
  void MergeFrom(const Foul& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foul* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  void clear_caused_by_game_event();
  static const int kCausedByGameEventFieldNumber = 2;
  private:
  const ::ssl_protos::gc::GameEvent& _internal_caused_by_game_event() const;
  public:
  const ::ssl_protos::gc::GameEvent& caused_by_game_event() const;
  ::ssl_protos::gc::GameEvent* release_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event);

  // optional .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.Foul)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_caused_by_game_event();
  void clear_has_caused_by_game_event();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::GameEvent* caused_by_game_event_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Type Type;
  static const Type UNKNOWN =
    Command_Type_UNKNOWN;
  static const Type HALT =
    Command_Type_HALT;
  static const Type STOP =
    Command_Type_STOP;
  static const Type NORMAL_START =
    Command_Type_NORMAL_START;
  static const Type FORCE_START =
    Command_Type_FORCE_START;
  static const Type DIRECT =
    Command_Type_DIRECT;
  static const Type INDIRECT =
    Command_Type_INDIRECT;
  static const Type KICKOFF =
    Command_Type_KICKOFF;
  static const Type PENALTY =
    Command_Type_PENALTY;
  static const Type TIMEOUT =
    Command_Type_TIMEOUT;
  static const Type BALL_PLACEMENT =
    Command_Type_BALL_PLACEMENT;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Command.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ssl_protos::gc::Command_Type type() const;
  void set_type(::ssl_protos::gc::Command_Type value);

  // optional .ssl_protos.gc.Team for_team = 2;
  bool has_for_team() const;
  void clear_for_team();
  static const int kForTeamFieldNumber = 2;
  ::ssl_protos::gc::Team for_team() const;
  void set_for_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.Command)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_for_team();
  void clear_has_for_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  int for_team_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameState_Type Type;
  static const Type UNKNOWN =
    GameState_Type_UNKNOWN;
  static const Type HALT =
    GameState_Type_HALT;
  static const Type STOP =
    GameState_Type_STOP;
  static const Type RUNNING =
    GameState_Type_RUNNING;
  static const Type FREE_KICK =
    GameState_Type_FREE_KICK;
  static const Type KICKOFF =
    GameState_Type_KICKOFF;
  static const Type PENALTY =
    GameState_Type_PENALTY;
  static const Type TIMEOUT =
    GameState_Type_TIMEOUT;
  static const Type BALL_PLACEMENT =
    GameState_Type_BALL_PLACEMENT;
  static inline bool Type_IsValid(int value) {
    return GameState_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GameState_Type_Type_MIN;
  static const Type Type_MAX =
    GameState_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GameState_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GameState_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GameState_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GameState_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.GameState.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ssl_protos::gc::GameState_Type type() const;
  void set_type(::ssl_protos::gc::GameState_Type value);

  // optional .ssl_protos.gc.Team for_team = 2;
  bool has_for_team() const;
  void clear_for_team();
  static const int kForTeamFieldNumber = 2;
  ::ssl_protos::gc::Team for_team() const;
  void set_for_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.GameState)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_for_team();
  void clear_has_for_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  int for_team_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proposal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.Proposal) */ {
 public:
  Proposal();
  virtual ~Proposal();

  Proposal(const Proposal& from);

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(Proposal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proposal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Proposal* other);
  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proposal* New() const final {
    return CreateMaybeMessage<Proposal>(NULL);
  }

  Proposal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proposal& from);
  void MergeFrom(const Proposal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // optional .ssl_protos.gc.GameEvent game_event = 2;
  bool has_game_event() const;
  void clear_game_event();
  static const int kGameEventFieldNumber = 2;
  private:
  const ::ssl_protos::gc::GameEvent& _internal_game_event() const;
  public:
  const ::ssl_protos::gc::GameEvent& game_event() const;
  ::ssl_protos::gc::GameEvent* release_game_event();
  ::ssl_protos::gc::GameEvent* mutable_game_event();
  void set_allocated_game_event(::ssl_protos::gc::GameEvent* game_event);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.Proposal)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_game_event();
  void clear_has_game_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::Timestamp* timestamp_;
  ::ssl_protos::gc::GameEvent* game_event_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProposalGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.ProposalGroup) */ {
 public:
  ProposalGroup();
  virtual ~ProposalGroup();

  ProposalGroup(const ProposalGroup& from);

  inline ProposalGroup& operator=(const ProposalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProposalGroup(ProposalGroup&& from) noexcept
    : ProposalGroup() {
    *this = ::std::move(from);
  }

  inline ProposalGroup& operator=(ProposalGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProposalGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalGroup* internal_default_instance() {
    return reinterpret_cast<const ProposalGroup*>(
               &_ProposalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ProposalGroup* other);
  friend void swap(ProposalGroup& a, ProposalGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProposalGroup* New() const final {
    return CreateMaybeMessage<ProposalGroup>(NULL);
  }

  ProposalGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProposalGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProposalGroup& from);
  void MergeFrom(const ProposalGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.gc.Proposal proposals = 1;
  int proposals_size() const;
  void clear_proposals();
  static const int kProposalsFieldNumber = 1;
  ::ssl_protos::gc::Proposal* mutable_proposals(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Proposal >*
      mutable_proposals();
  const ::ssl_protos::gc::Proposal& proposals(int index) const;
  ::ssl_protos::gc::Proposal* add_proposals();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Proposal >&
      proposals() const;

  // optional bool accepted = 2;
  bool has_accepted() const;
  void clear_accepted();
  static const int kAcceptedFieldNumber = 2;
  bool accepted() const;
  void set_accepted(bool value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.ProposalGroup)
 private:
  void set_has_accepted();
  void clear_has_accepted();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Proposal > proposals_;
  bool accepted_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamInfo(TeamInfo&& from) noexcept
    : TeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamInfo& operator=(TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TeamInfo* other);
  friend void swap(TeamInfo& a, TeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const final {
    return CreateMaybeMessage<TeamInfo>(NULL);
  }

  TeamInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.gc.YellowCard yellow_cards = 4;
  int yellow_cards_size() const;
  void clear_yellow_cards();
  static const int kYellowCardsFieldNumber = 4;
  ::ssl_protos::gc::YellowCard* mutable_yellow_cards(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::YellowCard >*
      mutable_yellow_cards();
  const ::ssl_protos::gc::YellowCard& yellow_cards(int index) const;
  ::ssl_protos::gc::YellowCard* add_yellow_cards();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::YellowCard >&
      yellow_cards() const;

  // repeated .ssl_protos.gc.RedCard red_cards = 5;
  int red_cards_size() const;
  void clear_red_cards();
  static const int kRedCardsFieldNumber = 5;
  ::ssl_protos::gc::RedCard* mutable_red_cards(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::RedCard >*
      mutable_red_cards();
  const ::ssl_protos::gc::RedCard& red_cards(int index) const;
  ::ssl_protos::gc::RedCard* add_red_cards();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::RedCard >&
      red_cards() const;

  // repeated .ssl_protos.gc.Foul fouls = 9;
  int fouls_size() const;
  void clear_fouls();
  static const int kFoulsFieldNumber = 9;
  ::ssl_protos::gc::Foul* mutable_fouls(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Foul >*
      mutable_fouls();
  const ::ssl_protos::gc::Foul& fouls(int index) const;
  ::ssl_protos::gc::Foul* add_fouls();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Foul >&
      fouls() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.protobuf.Duration timeout_time_left = 7;
  bool has_timeout_time_left() const;
  void clear_timeout_time_left();
  static const int kTimeoutTimeLeftFieldNumber = 7;
  private:
  const ::google::protobuf::Duration& _internal_timeout_time_left() const;
  public:
  const ::google::protobuf::Duration& timeout_time_left() const;
  ::google::protobuf::Duration* release_timeout_time_left();
  ::google::protobuf::Duration* mutable_timeout_time_left();
  void set_allocated_timeout_time_left(::google::protobuf::Duration* timeout_time_left);

  // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
  bool has_requests_bot_substitution_since() const;
  void clear_requests_bot_substitution_since();
  static const int kRequestsBotSubstitutionSinceFieldNumber = 14;
  private:
  const ::google::protobuf::Timestamp& _internal_requests_bot_substitution_since() const;
  public:
  const ::google::protobuf::Timestamp& requests_bot_substitution_since() const;
  ::google::protobuf::Timestamp* release_requests_bot_substitution_since();
  ::google::protobuf::Timestamp* mutable_requests_bot_substitution_since();
  void set_allocated_requests_bot_substitution_since(::google::protobuf::Timestamp* requests_bot_substitution_since);

  // optional .google.protobuf.Timestamp requests_timeout_since = 15;
  bool has_requests_timeout_since() const;
  void clear_requests_timeout_since();
  static const int kRequestsTimeoutSinceFieldNumber = 15;
  private:
  const ::google::protobuf::Timestamp& _internal_requests_timeout_since() const;
  public:
  const ::google::protobuf::Timestamp& requests_timeout_since() const;
  ::google::protobuf::Timestamp* release_requests_timeout_since();
  ::google::protobuf::Timestamp* mutable_requests_timeout_since();
  void set_allocated_requests_timeout_since(::google::protobuf::Timestamp* requests_timeout_since);

  // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
  bool has_requests_emergency_stop_since() const;
  void clear_requests_emergency_stop_since();
  static const int kRequestsEmergencyStopSinceFieldNumber = 16;
  private:
  const ::google::protobuf::Timestamp& _internal_requests_emergency_stop_since() const;
  public:
  const ::google::protobuf::Timestamp& requests_emergency_stop_since() const;
  ::google::protobuf::Timestamp* release_requests_emergency_stop_since();
  ::google::protobuf::Timestamp* mutable_requests_emergency_stop_since();
  void set_allocated_requests_emergency_stop_since(::google::protobuf::Timestamp* requests_emergency_stop_since);

  // optional int32 goals = 2;
  bool has_goals() const;
  void clear_goals();
  static const int kGoalsFieldNumber = 2;
  ::google::protobuf::int32 goals() const;
  void set_goals(::google::protobuf::int32 value);

  // optional int32 goalkeeper = 3;
  bool has_goalkeeper() const;
  void clear_goalkeeper();
  static const int kGoalkeeperFieldNumber = 3;
  ::google::protobuf::int32 goalkeeper() const;
  void set_goalkeeper(::google::protobuf::int32 value);

  // optional int32 timeouts_left = 6;
  bool has_timeouts_left() const;
  void clear_timeouts_left();
  static const int kTimeoutsLeftFieldNumber = 6;
  ::google::protobuf::int32 timeouts_left() const;
  void set_timeouts_left(::google::protobuf::int32 value);

  // optional int32 ball_placement_failures = 10;
  bool has_ball_placement_failures() const;
  void clear_ball_placement_failures();
  static const int kBallPlacementFailuresFieldNumber = 10;
  ::google::protobuf::int32 ball_placement_failures() const;
  void set_ball_placement_failures(::google::protobuf::int32 value);

  // optional bool on_positive_half = 8;
  bool has_on_positive_half() const;
  void clear_on_positive_half();
  static const int kOnPositiveHalfFieldNumber = 8;
  bool on_positive_half() const;
  void set_on_positive_half(bool value);

  // optional bool ball_placement_failures_reached = 11;
  bool has_ball_placement_failures_reached() const;
  void clear_ball_placement_failures_reached();
  static const int kBallPlacementFailuresReachedFieldNumber = 11;
  bool ball_placement_failures_reached() const;
  void set_ball_placement_failures_reached(bool value);

  // optional bool can_place_ball = 12;
  bool has_can_place_ball() const;
  void clear_can_place_ball();
  static const int kCanPlaceBallFieldNumber = 12;
  bool can_place_ball() const;
  void set_can_place_ball(bool value);

  // optional int32 max_allowed_bots = 13;
  bool has_max_allowed_bots() const;
  void clear_max_allowed_bots();
  static const int kMaxAllowedBotsFieldNumber = 13;
  ::google::protobuf::int32 max_allowed_bots() const;
  void set_max_allowed_bots(::google::protobuf::int32 value);

  // optional int32 challenge_flags = 17;
  bool has_challenge_flags() const;
  void clear_challenge_flags();
  static const int kChallengeFlagsFieldNumber = 17;
  ::google::protobuf::int32 challenge_flags() const;
  void set_challenge_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.TeamInfo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_goals();
  void clear_has_goals();
  void set_has_goalkeeper();
  void clear_has_goalkeeper();
  void set_has_timeouts_left();
  void clear_has_timeouts_left();
  void set_has_timeout_time_left();
  void clear_has_timeout_time_left();
  void set_has_on_positive_half();
  void clear_has_on_positive_half();
  void set_has_ball_placement_failures();
  void clear_has_ball_placement_failures();
  void set_has_ball_placement_failures_reached();
  void clear_has_ball_placement_failures_reached();
  void set_has_can_place_ball();
  void clear_has_can_place_ball();
  void set_has_max_allowed_bots();
  void clear_has_max_allowed_bots();
  void set_has_requests_bot_substitution_since();
  void clear_has_requests_bot_substitution_since();
  void set_has_requests_timeout_since();
  void clear_has_requests_timeout_since();
  void set_has_requests_emergency_stop_since();
  void clear_has_requests_emergency_stop_since();
  void set_has_challenge_flags();
  void clear_has_challenge_flags();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::YellowCard > yellow_cards_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::RedCard > red_cards_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Foul > fouls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Duration* timeout_time_left_;
  ::google::protobuf::Timestamp* requests_bot_substitution_since_;
  ::google::protobuf::Timestamp* requests_timeout_since_;
  ::google::protobuf::Timestamp* requests_emergency_stop_since_;
  ::google::protobuf::int32 goals_;
  ::google::protobuf::int32 goalkeeper_;
  ::google::protobuf::int32 timeouts_left_;
  ::google::protobuf::int32 ball_placement_failures_;
  bool on_positive_half_;
  bool ball_placement_failures_reached_;
  bool can_place_ball_;
  ::google::protobuf::int32 max_allowed_bots_;
  ::google::protobuf::int32 challenge_flags_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class State_TeamStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<State_TeamStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::TeamInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<State_TeamStateEntry_DoNotUse, 
    ::std::string, ::ssl_protos::gc::TeamInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  State_TeamStateEntry_DoNotUse();
  State_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const State_TeamStateEntry_DoNotUse& other);
  static const State_TeamStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_TeamStateEntry_DoNotUse*>(&_State_TeamStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.gc.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(NULL);
  }

  State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ssl_protos.gc.TeamInfo> team_state = 8;
  int team_state_size() const;
  void clear_team_state();
  static const int kTeamStateFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::TeamInfo >&
      team_state() const;
  ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::TeamInfo >*
      mutable_team_state();

  // repeated .ssl_protos.gc.GameEvent game_events = 13;
  int game_events_size() const;
  void clear_game_events();
  static const int kGameEventsFieldNumber = 13;
  ::ssl_protos::gc::GameEvent* mutable_game_events(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::GameEvent >*
      mutable_game_events();
  const ::ssl_protos::gc::GameEvent& game_events(int index) const;
  ::ssl_protos::gc::GameEvent* add_game_events();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::GameEvent >&
      game_events() const;

  // repeated .ssl_protos.gc.ProposalGroup proposal_groups = 14;
  int proposal_groups_size() const;
  void clear_proposal_groups();
  static const int kProposalGroupsFieldNumber = 14;
  ::ssl_protos::gc::ProposalGroup* mutable_proposal_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::ProposalGroup >*
      mutable_proposal_groups();
  const ::ssl_protos::gc::ProposalGroup& proposal_groups(int index) const;
  ::ssl_protos::gc::ProposalGroup* add_proposal_groups();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::ProposalGroup >&
      proposal_groups() const;

  // optional .ssl_protos.gc.Command command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Command& _internal_command() const;
  public:
  const ::ssl_protos::gc::Command& command() const;
  ::ssl_protos::gc::Command* release_command();
  ::ssl_protos::gc::Command* mutable_command();
  void set_allocated_command(::ssl_protos::gc::Command* command);

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  bool has_stage_time_elapsed() const;
  void clear_stage_time_elapsed();
  static const int kStageTimeElapsedFieldNumber = 4;
  private:
  const ::google::protobuf::Duration& _internal_stage_time_elapsed() const;
  public:
  const ::google::protobuf::Duration& stage_time_elapsed() const;
  ::google::protobuf::Duration* release_stage_time_elapsed();
  ::google::protobuf::Duration* mutable_stage_time_elapsed();
  void set_allocated_stage_time_elapsed(::google::protobuf::Duration* stage_time_elapsed);

  // optional .google.protobuf.Duration stage_time_left = 5;
  bool has_stage_time_left() const;
  void clear_stage_time_left();
  static const int kStageTimeLeftFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_stage_time_left() const;
  public:
  const ::google::protobuf::Duration& stage_time_left() const;
  ::google::protobuf::Duration* release_stage_time_left();
  ::google::protobuf::Duration* mutable_stage_time_left();
  void set_allocated_stage_time_left(::google::protobuf::Duration* stage_time_left);

  // optional .google.protobuf.Timestamp match_time_start = 6;
  bool has_match_time_start() const;
  void clear_match_time_start();
  static const int kMatchTimeStartFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_match_time_start() const;
  public:
  const ::google::protobuf::Timestamp& match_time_start() const;
  ::google::protobuf::Timestamp* release_match_time_start();
  ::google::protobuf::Timestamp* mutable_match_time_start();
  void set_allocated_match_time_start(::google::protobuf::Timestamp* match_time_start);

  // optional .ssl_protos.gc.Vector2 placement_pos = 9;
  bool has_placement_pos() const;
  void clear_placement_pos();
  static const int kPlacementPosFieldNumber = 9;
  private:
  const ::ssl_protos::gc::Vector2& _internal_placement_pos() const;
  public:
  const ::ssl_protos::gc::Vector2& placement_pos() const;
  ::ssl_protos::gc::Vector2* release_placement_pos();
  ::ssl_protos::gc::Vector2* mutable_placement_pos();
  void set_allocated_placement_pos(::ssl_protos::gc::Vector2* placement_pos);

  // optional .ssl_protos.gc.Command next_command = 10;
  bool has_next_command() const;
  void clear_next_command();
  static const int kNextCommandFieldNumber = 10;
  private:
  const ::ssl_protos::gc::Command& _internal_next_command() const;
  public:
  const ::ssl_protos::gc::Command& next_command() const;
  ::ssl_protos::gc::Command* release_next_command();
  ::ssl_protos::gc::Command* mutable_next_command();
  void set_allocated_next_command(::ssl_protos::gc::Command* next_command);

  // optional .google.protobuf.Duration current_action_time_remaining = 12;
  bool has_current_action_time_remaining() const;
  void clear_current_action_time_remaining();
  static const int kCurrentActionTimeRemainingFieldNumber = 12;
  private:
  const ::google::protobuf::Duration& _internal_current_action_time_remaining() const;
  public:
  const ::google::protobuf::Duration& current_action_time_remaining() const;
  ::google::protobuf::Duration* release_current_action_time_remaining();
  ::google::protobuf::Duration* mutable_current_action_time_remaining();
  void set_allocated_current_action_time_remaining(::google::protobuf::Duration* current_action_time_remaining);

  // optional .ssl_protos.gc.GameState game_state = 19;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 19;
  private:
  const ::ssl_protos::gc::GameState& _internal_game_state() const;
  public:
  const ::ssl_protos::gc::GameState& game_state() const;
  ::ssl_protos::gc::GameState* release_game_state();
  ::ssl_protos::gc::GameState* mutable_game_state();
  void set_allocated_game_state(::ssl_protos::gc::GameState* game_state);

  // optional .ssl_protos.gc.Referee.Stage stage = 1;
  bool has_stage() const;
  void clear_stage();
  static const int kStageFieldNumber = 1;
  ::ssl_protos::gc::Referee_Stage stage() const;
  void set_stage(::ssl_protos::gc::Referee_Stage value);

  // optional .ssl_protos.gc.Division division = 15;
  bool has_division() const;
  void clear_division();
  static const int kDivisionFieldNumber = 15;
  ::ssl_protos::gc::Division division() const;
  void set_division(::ssl_protos::gc::Division value);

  // optional bool auto_continue = 16;
  bool has_auto_continue() const;
  void clear_auto_continue();
  static const int kAutoContinueFieldNumber = 16;
  bool auto_continue() const;
  void set_auto_continue(bool value);

  // optional .ssl_protos.gc.Team first_kickoff_team = 17;
  bool has_first_kickoff_team() const;
  void clear_first_kickoff_team();
  static const int kFirstKickoffTeamFieldNumber = 17;
  ::ssl_protos::gc::Team first_kickoff_team() const;
  void set_first_kickoff_team(::ssl_protos::gc::Team value);

  // @@protoc_insertion_point(class_scope:ssl_protos.gc.State)
 private:
  void set_has_stage();
  void clear_has_stage();
  void set_has_command();
  void clear_has_command();
  void set_has_game_state();
  void clear_has_game_state();
  void set_has_stage_time_elapsed();
  void clear_has_stage_time_elapsed();
  void set_has_stage_time_left();
  void clear_has_stage_time_left();
  void set_has_match_time_start();
  void clear_has_match_time_start();
  void set_has_placement_pos();
  void clear_has_placement_pos();
  void set_has_next_command();
  void clear_has_next_command();
  void set_has_current_action_time_remaining();
  void clear_has_current_action_time_remaining();
  void set_has_division();
  void clear_has_division();
  void set_has_auto_continue();
  void clear_has_auto_continue();
  void set_has_first_kickoff_team();
  void clear_has_first_kickoff_team();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      State_TeamStateEntry_DoNotUse,
      ::std::string, ::ssl_protos::gc::TeamInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > team_state_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::GameEvent > game_events_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::ProposalGroup > proposal_groups_;
  ::ssl_protos::gc::Command* command_;
  ::google::protobuf::Duration* stage_time_elapsed_;
  ::google::protobuf::Duration* stage_time_left_;
  ::google::protobuf::Timestamp* match_time_start_;
  ::ssl_protos::gc::Vector2* placement_pos_;
  ::ssl_protos::gc::Command* next_command_;
  ::google::protobuf::Duration* current_action_time_remaining_;
  ::ssl_protos::gc::GameState* game_state_;
  int stage_;
  int division_;
  bool auto_continue_;
  int first_kickoff_team_;
  friend struct ::protobuf_gc_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// YellowCard

// optional uint32 id = 1;
inline bool YellowCard::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YellowCard::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YellowCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YellowCard::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 YellowCard::id() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.YellowCard.id)
  return id_;
}
inline void YellowCard::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.YellowCard.id)
}

// optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
inline bool YellowCard::has_caused_by_game_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YellowCard::set_has_caused_by_game_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YellowCard::clear_has_caused_by_game_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::GameEvent& YellowCard::_internal_caused_by_game_event() const {
  return *caused_by_game_event_;
}
inline const ::ssl_protos::gc::GameEvent& YellowCard::caused_by_game_event() const {
  const ::ssl_protos::gc::GameEvent* p = caused_by_game_event_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.YellowCard.caused_by_game_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GameEvent*>(
      &::ssl_protos::gc::_GameEvent_default_instance_);
}
inline ::ssl_protos::gc::GameEvent* YellowCard::release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.YellowCard.caused_by_game_event)
  clear_has_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* temp = caused_by_game_event_;
  caused_by_game_event_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GameEvent* YellowCard::mutable_caused_by_game_event() {
  set_has_caused_by_game_event();
  if (caused_by_game_event_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GameEvent>(GetArenaNoVirtual());
    caused_by_game_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.YellowCard.caused_by_game_event)
  return caused_by_game_event_;
}
inline void YellowCard::set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    set_has_caused_by_game_event();
  } else {
    clear_has_caused_by_game_event();
  }
  caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.YellowCard.caused_by_game_event)
}

// optional .google.protobuf.Duration time_remaining = 3;
inline bool YellowCard::has_time_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YellowCard::set_has_time_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YellowCard::clear_has_time_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Duration& YellowCard::_internal_time_remaining() const {
  return *time_remaining_;
}
inline const ::google::protobuf::Duration& YellowCard::time_remaining() const {
  const ::google::protobuf::Duration* p = time_remaining_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.YellowCard.time_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* YellowCard::release_time_remaining() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.YellowCard.time_remaining)
  clear_has_time_remaining();
  ::google::protobuf::Duration* temp = time_remaining_;
  time_remaining_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* YellowCard::mutable_time_remaining() {
  set_has_time_remaining();
  if (time_remaining_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    time_remaining_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.YellowCard.time_remaining)
  return time_remaining_;
}
inline void YellowCard::set_allocated_time_remaining(::google::protobuf::Duration* time_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_remaining_);
  }
  if (time_remaining) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_remaining)->GetArena();
    if (message_arena != submessage_arena) {
      time_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_remaining, submessage_arena);
    }
    set_has_time_remaining();
  } else {
    clear_has_time_remaining();
  }
  time_remaining_ = time_remaining;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.YellowCard.time_remaining)
}

// -------------------------------------------------------------------

// RedCard

// optional uint32 id = 1;
inline bool RedCard::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedCard::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedCard::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedCard::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RedCard::id() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RedCard.id)
  return id_;
}
inline void RedCard::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.RedCard.id)
}

// optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
inline bool RedCard::has_caused_by_game_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedCard::set_has_caused_by_game_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedCard::clear_has_caused_by_game_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::GameEvent& RedCard::_internal_caused_by_game_event() const {
  return *caused_by_game_event_;
}
inline const ::ssl_protos::gc::GameEvent& RedCard::caused_by_game_event() const {
  const ::ssl_protos::gc::GameEvent* p = caused_by_game_event_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.RedCard.caused_by_game_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GameEvent*>(
      &::ssl_protos::gc::_GameEvent_default_instance_);
}
inline ::ssl_protos::gc::GameEvent* RedCard::release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.RedCard.caused_by_game_event)
  clear_has_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* temp = caused_by_game_event_;
  caused_by_game_event_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GameEvent* RedCard::mutable_caused_by_game_event() {
  set_has_caused_by_game_event();
  if (caused_by_game_event_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GameEvent>(GetArenaNoVirtual());
    caused_by_game_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.RedCard.caused_by_game_event)
  return caused_by_game_event_;
}
inline void RedCard::set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    set_has_caused_by_game_event();
  } else {
    clear_has_caused_by_game_event();
  }
  caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.RedCard.caused_by_game_event)
}

// -------------------------------------------------------------------

// Foul

// optional uint32 id = 1;
inline bool Foul::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Foul::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Foul::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Foul::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Foul::id() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Foul.id)
  return id_;
}
inline void Foul::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.Foul.id)
}

// optional .ssl_protos.gc.GameEvent caused_by_game_event = 2;
inline bool Foul::has_caused_by_game_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Foul::set_has_caused_by_game_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Foul::clear_has_caused_by_game_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::GameEvent& Foul::_internal_caused_by_game_event() const {
  return *caused_by_game_event_;
}
inline const ::ssl_protos::gc::GameEvent& Foul::caused_by_game_event() const {
  const ::ssl_protos::gc::GameEvent* p = caused_by_game_event_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Foul.caused_by_game_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GameEvent*>(
      &::ssl_protos::gc::_GameEvent_default_instance_);
}
inline ::ssl_protos::gc::GameEvent* Foul::release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Foul.caused_by_game_event)
  clear_has_caused_by_game_event();
  ::ssl_protos::gc::GameEvent* temp = caused_by_game_event_;
  caused_by_game_event_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GameEvent* Foul::mutable_caused_by_game_event() {
  set_has_caused_by_game_event();
  if (caused_by_game_event_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GameEvent>(GetArenaNoVirtual());
    caused_by_game_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Foul.caused_by_game_event)
  return caused_by_game_event_;
}
inline void Foul::set_allocated_caused_by_game_event(::ssl_protos::gc::GameEvent* caused_by_game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    set_has_caused_by_game_event();
  } else {
    clear_has_caused_by_game_event();
  }
  caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Foul.caused_by_game_event)
}

// optional .google.protobuf.Timestamp timestamp = 3;
inline bool Foul::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Foul::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Foul::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Timestamp& Foul::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& Foul::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Foul.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Foul::release_timestamp() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Foul.timestamp)
  clear_has_timestamp();
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Foul::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Foul.timestamp)
  return timestamp_;
}
inline void Foul::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Foul.timestamp)
}

// -------------------------------------------------------------------

// Command

// required .ssl_protos.gc.Command.Type type = 1;
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ssl_protos::gc::Command_Type Command::type() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Command.type)
  return static_cast< ::ssl_protos::gc::Command_Type >(type_);
}
inline void Command::set_type(::ssl_protos::gc::Command_Type value) {
  assert(::ssl_protos::gc::Command_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.Command.type)
}

// optional .ssl_protos.gc.Team for_team = 2;
inline bool Command::has_for_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_for_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_for_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_for_team() {
  for_team_ = 0;
  clear_has_for_team();
}
inline ::ssl_protos::gc::Team Command::for_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Command.for_team)
  return static_cast< ::ssl_protos::gc::Team >(for_team_);
}
inline void Command::set_for_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_for_team();
  for_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.Command.for_team)
}

// -------------------------------------------------------------------

// GameState

// required .ssl_protos.gc.GameState.Type type = 1;
inline bool GameState::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ssl_protos::gc::GameState_Type GameState::type() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameState.type)
  return static_cast< ::ssl_protos::gc::GameState_Type >(type_);
}
inline void GameState::set_type(::ssl_protos::gc::GameState_Type value) {
  assert(::ssl_protos::gc::GameState_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameState.type)
}

// optional .ssl_protos.gc.Team for_team = 2;
inline bool GameState::has_for_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameState::set_has_for_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameState::clear_has_for_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameState::clear_for_team() {
  for_team_ = 0;
  clear_has_for_team();
}
inline ::ssl_protos::gc::Team GameState::for_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.GameState.for_team)
  return static_cast< ::ssl_protos::gc::Team >(for_team_);
}
inline void GameState::set_for_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_for_team();
  for_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.GameState.for_team)
}

// -------------------------------------------------------------------

// Proposal

// optional .google.protobuf.Timestamp timestamp = 1;
inline bool Proposal::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proposal::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proposal::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::google::protobuf::Timestamp& Proposal::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& Proposal::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Proposal.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Proposal::release_timestamp() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Proposal.timestamp)
  clear_has_timestamp();
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Proposal::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Proposal.timestamp)
  return timestamp_;
}
inline void Proposal::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Proposal.timestamp)
}

// optional .ssl_protos.gc.GameEvent game_event = 2;
inline bool Proposal::has_game_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proposal::set_has_game_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proposal::clear_has_game_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::GameEvent& Proposal::_internal_game_event() const {
  return *game_event_;
}
inline const ::ssl_protos::gc::GameEvent& Proposal::game_event() const {
  const ::ssl_protos::gc::GameEvent* p = game_event_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.Proposal.game_event)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GameEvent*>(
      &::ssl_protos::gc::_GameEvent_default_instance_);
}
inline ::ssl_protos::gc::GameEvent* Proposal::release_game_event() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.Proposal.game_event)
  clear_has_game_event();
  ::ssl_protos::gc::GameEvent* temp = game_event_;
  game_event_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GameEvent* Proposal::mutable_game_event() {
  set_has_game_event();
  if (game_event_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GameEvent>(GetArenaNoVirtual());
    game_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.Proposal.game_event)
  return game_event_;
}
inline void Proposal::set_allocated_game_event(::ssl_protos::gc::GameEvent* game_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    set_has_game_event();
  } else {
    clear_has_game_event();
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.Proposal.game_event)
}

// -------------------------------------------------------------------

// ProposalGroup

// repeated .ssl_protos.gc.Proposal proposals = 1;
inline int ProposalGroup::proposals_size() const {
  return proposals_.size();
}
inline void ProposalGroup::clear_proposals() {
  proposals_.Clear();
}
inline ::ssl_protos::gc::Proposal* ProposalGroup::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.ProposalGroup.proposals)
  return proposals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Proposal >*
ProposalGroup::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.ProposalGroup.proposals)
  return &proposals_;
}
inline const ::ssl_protos::gc::Proposal& ProposalGroup::proposals(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ProposalGroup.proposals)
  return proposals_.Get(index);
}
inline ::ssl_protos::gc::Proposal* ProposalGroup::add_proposals() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.ProposalGroup.proposals)
  return proposals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Proposal >&
ProposalGroup::proposals() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.ProposalGroup.proposals)
  return proposals_;
}

// optional bool accepted = 2;
inline bool ProposalGroup::has_accepted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProposalGroup::set_has_accepted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProposalGroup::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProposalGroup::clear_accepted() {
  accepted_ = false;
  clear_has_accepted();
}
inline bool ProposalGroup::accepted() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.ProposalGroup.accepted)
  return accepted_;
}
inline void ProposalGroup::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.ProposalGroup.accepted)
}

// -------------------------------------------------------------------

// TeamInfo

// optional string name = 1;
inline bool TeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.name)
  return name_.GetNoArena();
}
inline void TeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.name)
}
#if LANG_CXX11
inline void TeamInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ssl_protos.gc.TeamInfo.name)
}
#endif
inline void TeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssl_protos.gc.TeamInfo.name)
}
inline void TeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssl_protos.gc.TeamInfo.name)
}
inline ::std::string* TeamInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.TeamInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.TeamInfo.name)
}

// optional int32 goals = 2;
inline bool TeamInfo::has_goals() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamInfo::set_has_goals() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamInfo::clear_has_goals() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamInfo::clear_goals() {
  goals_ = 0;
  clear_has_goals();
}
inline ::google::protobuf::int32 TeamInfo::goals() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.goals)
  return goals_;
}
inline void TeamInfo::set_goals(::google::protobuf::int32 value) {
  set_has_goals();
  goals_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.goals)
}

// optional int32 goalkeeper = 3;
inline bool TeamInfo::has_goalkeeper() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamInfo::set_has_goalkeeper() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamInfo::clear_has_goalkeeper() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamInfo::clear_goalkeeper() {
  goalkeeper_ = 0;
  clear_has_goalkeeper();
}
inline ::google::protobuf::int32 TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.goalkeeper)
  return goalkeeper_;
}
inline void TeamInfo::set_goalkeeper(::google::protobuf::int32 value) {
  set_has_goalkeeper();
  goalkeeper_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.goalkeeper)
}

// repeated .ssl_protos.gc.YellowCard yellow_cards = 4;
inline int TeamInfo::yellow_cards_size() const {
  return yellow_cards_.size();
}
inline void TeamInfo::clear_yellow_cards() {
  yellow_cards_.Clear();
}
inline ::ssl_protos::gc::YellowCard* TeamInfo::mutable_yellow_cards(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.yellow_cards)
  return yellow_cards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::YellowCard >*
TeamInfo::mutable_yellow_cards() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.TeamInfo.yellow_cards)
  return &yellow_cards_;
}
inline const ::ssl_protos::gc::YellowCard& TeamInfo::yellow_cards(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.yellow_cards)
  return yellow_cards_.Get(index);
}
inline ::ssl_protos::gc::YellowCard* TeamInfo::add_yellow_cards() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.TeamInfo.yellow_cards)
  return yellow_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::YellowCard >&
TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.TeamInfo.yellow_cards)
  return yellow_cards_;
}

// repeated .ssl_protos.gc.RedCard red_cards = 5;
inline int TeamInfo::red_cards_size() const {
  return red_cards_.size();
}
inline void TeamInfo::clear_red_cards() {
  red_cards_.Clear();
}
inline ::ssl_protos::gc::RedCard* TeamInfo::mutable_red_cards(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.red_cards)
  return red_cards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::RedCard >*
TeamInfo::mutable_red_cards() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.TeamInfo.red_cards)
  return &red_cards_;
}
inline const ::ssl_protos::gc::RedCard& TeamInfo::red_cards(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.red_cards)
  return red_cards_.Get(index);
}
inline ::ssl_protos::gc::RedCard* TeamInfo::add_red_cards() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.TeamInfo.red_cards)
  return red_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::RedCard >&
TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.TeamInfo.red_cards)
  return red_cards_;
}

// optional int32 timeouts_left = 6;
inline bool TeamInfo::has_timeouts_left() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamInfo::set_has_timeouts_left() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamInfo::clear_has_timeouts_left() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamInfo::clear_timeouts_left() {
  timeouts_left_ = 0;
  clear_has_timeouts_left();
}
inline ::google::protobuf::int32 TeamInfo::timeouts_left() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.timeouts_left)
  return timeouts_left_;
}
inline void TeamInfo::set_timeouts_left(::google::protobuf::int32 value) {
  set_has_timeouts_left();
  timeouts_left_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.timeouts_left)
}

// optional .google.protobuf.Duration timeout_time_left = 7;
inline bool TeamInfo::has_timeout_time_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_timeout_time_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_timeout_time_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Duration& TeamInfo::_internal_timeout_time_left() const {
  return *timeout_time_left_;
}
inline const ::google::protobuf::Duration& TeamInfo::timeout_time_left() const {
  const ::google::protobuf::Duration* p = timeout_time_left_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.timeout_time_left)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TeamInfo::release_timeout_time_left() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.TeamInfo.timeout_time_left)
  clear_has_timeout_time_left();
  ::google::protobuf::Duration* temp = timeout_time_left_;
  timeout_time_left_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* TeamInfo::mutable_timeout_time_left() {
  set_has_timeout_time_left();
  if (timeout_time_left_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    timeout_time_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.timeout_time_left)
  return timeout_time_left_;
}
inline void TeamInfo::set_allocated_timeout_time_left(::google::protobuf::Duration* timeout_time_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_time_left_);
  }
  if (timeout_time_left) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timeout_time_left)->GetArena();
    if (message_arena != submessage_arena) {
      timeout_time_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout_time_left, submessage_arena);
    }
    set_has_timeout_time_left();
  } else {
    clear_has_timeout_time_left();
  }
  timeout_time_left_ = timeout_time_left;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.TeamInfo.timeout_time_left)
}

// optional bool on_positive_half = 8;
inline bool TeamInfo::has_on_positive_half() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamInfo::set_has_on_positive_half() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamInfo::clear_has_on_positive_half() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamInfo::clear_on_positive_half() {
  on_positive_half_ = false;
  clear_has_on_positive_half();
}
inline bool TeamInfo::on_positive_half() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.on_positive_half)
  return on_positive_half_;
}
inline void TeamInfo::set_on_positive_half(bool value) {
  set_has_on_positive_half();
  on_positive_half_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.on_positive_half)
}

// repeated .ssl_protos.gc.Foul fouls = 9;
inline int TeamInfo::fouls_size() const {
  return fouls_.size();
}
inline void TeamInfo::clear_fouls() {
  fouls_.Clear();
}
inline ::ssl_protos::gc::Foul* TeamInfo::mutable_fouls(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.fouls)
  return fouls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Foul >*
TeamInfo::mutable_fouls() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.TeamInfo.fouls)
  return &fouls_;
}
inline const ::ssl_protos::gc::Foul& TeamInfo::fouls(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.fouls)
  return fouls_.Get(index);
}
inline ::ssl_protos::gc::Foul* TeamInfo::add_fouls() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.TeamInfo.fouls)
  return fouls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::Foul >&
TeamInfo::fouls() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.TeamInfo.fouls)
  return fouls_;
}

// optional int32 ball_placement_failures = 10;
inline bool TeamInfo::has_ball_placement_failures() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamInfo::set_has_ball_placement_failures() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamInfo::clear_has_ball_placement_failures() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamInfo::clear_ball_placement_failures() {
  ball_placement_failures_ = 0;
  clear_has_ball_placement_failures();
}
inline ::google::protobuf::int32 TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.ball_placement_failures)
  return ball_placement_failures_;
}
inline void TeamInfo::set_ball_placement_failures(::google::protobuf::int32 value) {
  set_has_ball_placement_failures();
  ball_placement_failures_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.ball_placement_failures)
}

// optional bool ball_placement_failures_reached = 11;
inline bool TeamInfo::has_ball_placement_failures_reached() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamInfo::set_has_ball_placement_failures_reached() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamInfo::clear_has_ball_placement_failures_reached() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamInfo::clear_ball_placement_failures_reached() {
  ball_placement_failures_reached_ = false;
  clear_has_ball_placement_failures_reached();
}
inline bool TeamInfo::ball_placement_failures_reached() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.ball_placement_failures_reached)
  return ball_placement_failures_reached_;
}
inline void TeamInfo::set_ball_placement_failures_reached(bool value) {
  set_has_ball_placement_failures_reached();
  ball_placement_failures_reached_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.ball_placement_failures_reached)
}

// optional bool can_place_ball = 12;
inline bool TeamInfo::has_can_place_ball() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TeamInfo::set_has_can_place_ball() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TeamInfo::clear_has_can_place_ball() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TeamInfo::clear_can_place_ball() {
  can_place_ball_ = false;
  clear_has_can_place_ball();
}
inline bool TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.can_place_ball)
  return can_place_ball_;
}
inline void TeamInfo::set_can_place_ball(bool value) {
  set_has_can_place_ball();
  can_place_ball_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.can_place_ball)
}

// optional int32 max_allowed_bots = 13;
inline bool TeamInfo::has_max_allowed_bots() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TeamInfo::set_has_max_allowed_bots() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TeamInfo::clear_has_max_allowed_bots() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TeamInfo::clear_max_allowed_bots() {
  max_allowed_bots_ = 0;
  clear_has_max_allowed_bots();
}
inline ::google::protobuf::int32 TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.max_allowed_bots)
  return max_allowed_bots_;
}
inline void TeamInfo::set_max_allowed_bots(::google::protobuf::int32 value) {
  set_has_max_allowed_bots();
  max_allowed_bots_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.max_allowed_bots)
}

// optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
inline bool TeamInfo::has_requests_bot_substitution_since() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfo::set_has_requests_bot_substitution_since() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfo::clear_has_requests_bot_substitution_since() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::google::protobuf::Timestamp& TeamInfo::_internal_requests_bot_substitution_since() const {
  return *requests_bot_substitution_since_;
}
inline const ::google::protobuf::Timestamp& TeamInfo::requests_bot_substitution_since() const {
  const ::google::protobuf::Timestamp* p = requests_bot_substitution_since_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.requests_bot_substitution_since)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TeamInfo::release_requests_bot_substitution_since() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.TeamInfo.requests_bot_substitution_since)
  clear_has_requests_bot_substitution_since();
  ::google::protobuf::Timestamp* temp = requests_bot_substitution_since_;
  requests_bot_substitution_since_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TeamInfo::mutable_requests_bot_substitution_since() {
  set_has_requests_bot_substitution_since();
  if (requests_bot_substitution_since_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    requests_bot_substitution_since_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.requests_bot_substitution_since)
  return requests_bot_substitution_since_;
}
inline void TeamInfo::set_allocated_requests_bot_substitution_since(::google::protobuf::Timestamp* requests_bot_substitution_since) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requests_bot_substitution_since_);
  }
  if (requests_bot_substitution_since) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(requests_bot_substitution_since)->GetArena();
    if (message_arena != submessage_arena) {
      requests_bot_substitution_since = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requests_bot_substitution_since, submessage_arena);
    }
    set_has_requests_bot_substitution_since();
  } else {
    clear_has_requests_bot_substitution_since();
  }
  requests_bot_substitution_since_ = requests_bot_substitution_since;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.TeamInfo.requests_bot_substitution_since)
}

// optional .google.protobuf.Timestamp requests_timeout_since = 15;
inline bool TeamInfo::has_requests_timeout_since() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_requests_timeout_since() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_requests_timeout_since() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::google::protobuf::Timestamp& TeamInfo::_internal_requests_timeout_since() const {
  return *requests_timeout_since_;
}
inline const ::google::protobuf::Timestamp& TeamInfo::requests_timeout_since() const {
  const ::google::protobuf::Timestamp* p = requests_timeout_since_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.requests_timeout_since)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TeamInfo::release_requests_timeout_since() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.TeamInfo.requests_timeout_since)
  clear_has_requests_timeout_since();
  ::google::protobuf::Timestamp* temp = requests_timeout_since_;
  requests_timeout_since_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TeamInfo::mutable_requests_timeout_since() {
  set_has_requests_timeout_since();
  if (requests_timeout_since_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    requests_timeout_since_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.requests_timeout_since)
  return requests_timeout_since_;
}
inline void TeamInfo::set_allocated_requests_timeout_since(::google::protobuf::Timestamp* requests_timeout_since) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requests_timeout_since_);
  }
  if (requests_timeout_since) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(requests_timeout_since)->GetArena();
    if (message_arena != submessage_arena) {
      requests_timeout_since = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requests_timeout_since, submessage_arena);
    }
    set_has_requests_timeout_since();
  } else {
    clear_has_requests_timeout_since();
  }
  requests_timeout_since_ = requests_timeout_since;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.TeamInfo.requests_timeout_since)
}

// optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
inline bool TeamInfo::has_requests_emergency_stop_since() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_requests_emergency_stop_since() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_requests_emergency_stop_since() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::google::protobuf::Timestamp& TeamInfo::_internal_requests_emergency_stop_since() const {
  return *requests_emergency_stop_since_;
}
inline const ::google::protobuf::Timestamp& TeamInfo::requests_emergency_stop_since() const {
  const ::google::protobuf::Timestamp* p = requests_emergency_stop_since_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.requests_emergency_stop_since)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TeamInfo::release_requests_emergency_stop_since() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.TeamInfo.requests_emergency_stop_since)
  clear_has_requests_emergency_stop_since();
  ::google::protobuf::Timestamp* temp = requests_emergency_stop_since_;
  requests_emergency_stop_since_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TeamInfo::mutable_requests_emergency_stop_since() {
  set_has_requests_emergency_stop_since();
  if (requests_emergency_stop_since_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    requests_emergency_stop_since_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.TeamInfo.requests_emergency_stop_since)
  return requests_emergency_stop_since_;
}
inline void TeamInfo::set_allocated_requests_emergency_stop_since(::google::protobuf::Timestamp* requests_emergency_stop_since) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requests_emergency_stop_since_);
  }
  if (requests_emergency_stop_since) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(requests_emergency_stop_since)->GetArena();
    if (message_arena != submessage_arena) {
      requests_emergency_stop_since = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requests_emergency_stop_since, submessage_arena);
    }
    set_has_requests_emergency_stop_since();
  } else {
    clear_has_requests_emergency_stop_since();
  }
  requests_emergency_stop_since_ = requests_emergency_stop_since;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.TeamInfo.requests_emergency_stop_since)
}

// optional int32 challenge_flags = 17;
inline bool TeamInfo::has_challenge_flags() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TeamInfo::set_has_challenge_flags() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TeamInfo::clear_has_challenge_flags() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TeamInfo::clear_challenge_flags() {
  challenge_flags_ = 0;
  clear_has_challenge_flags();
}
inline ::google::protobuf::int32 TeamInfo::challenge_flags() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.TeamInfo.challenge_flags)
  return challenge_flags_;
}
inline void TeamInfo::set_challenge_flags(::google::protobuf::int32 value) {
  set_has_challenge_flags();
  challenge_flags_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.TeamInfo.challenge_flags)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// optional .ssl_protos.gc.Referee.Stage stage = 1;
inline bool State::has_stage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void State::set_has_stage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void State::clear_has_stage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void State::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::ssl_protos::gc::Referee_Stage State::stage() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.stage)
  return static_cast< ::ssl_protos::gc::Referee_Stage >(stage_);
}
inline void State::set_stage(::ssl_protos::gc::Referee_Stage value) {
  assert(::ssl_protos::gc::Referee_Stage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.State.stage)
}

// optional .ssl_protos.gc.Command command = 2;
inline bool State::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void State::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void State::clear_command() {
  if (command_ != NULL) command_->Clear();
  clear_has_command();
}
inline const ::ssl_protos::gc::Command& State::_internal_command() const {
  return *command_;
}
inline const ::ssl_protos::gc::Command& State::command() const {
  const ::ssl_protos::gc::Command* p = command_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.command)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Command*>(
      &::ssl_protos::gc::_Command_default_instance_);
}
inline ::ssl_protos::gc::Command* State::release_command() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.command)
  clear_has_command();
  ::ssl_protos::gc::Command* temp = command_;
  command_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Command* State::mutable_command() {
  set_has_command();
  if (command_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Command>(GetArenaNoVirtual());
    command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.command)
  return command_;
}
inline void State::set_allocated_command(::ssl_protos::gc::Command* command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete command_;
  }
  if (command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
  } else {
    clear_has_command();
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.command)
}

// optional .ssl_protos.gc.GameState game_state = 19;
inline bool State::has_game_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void State::set_has_game_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void State::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void State::clear_game_state() {
  if (game_state_ != NULL) game_state_->Clear();
  clear_has_game_state();
}
inline const ::ssl_protos::gc::GameState& State::_internal_game_state() const {
  return *game_state_;
}
inline const ::ssl_protos::gc::GameState& State::game_state() const {
  const ::ssl_protos::gc::GameState* p = game_state_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.game_state)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::GameState*>(
      &::ssl_protos::gc::_GameState_default_instance_);
}
inline ::ssl_protos::gc::GameState* State::release_game_state() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.game_state)
  clear_has_game_state();
  ::ssl_protos::gc::GameState* temp = game_state_;
  game_state_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::GameState* State::mutable_game_state() {
  set_has_game_state();
  if (game_state_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::GameState>(GetArenaNoVirtual());
    game_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.game_state)
  return game_state_;
}
inline void State::set_allocated_game_state(::ssl_protos::gc::GameState* game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete game_state_;
  }
  if (game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    set_has_game_state();
  } else {
    clear_has_game_state();
  }
  game_state_ = game_state;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.game_state)
}

// optional .google.protobuf.Duration stage_time_elapsed = 4;
inline bool State::has_stage_time_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::set_has_stage_time_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void State::clear_has_stage_time_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::google::protobuf::Duration& State::_internal_stage_time_elapsed() const {
  return *stage_time_elapsed_;
}
inline const ::google::protobuf::Duration& State::stage_time_elapsed() const {
  const ::google::protobuf::Duration* p = stage_time_elapsed_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.stage_time_elapsed)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* State::release_stage_time_elapsed() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.stage_time_elapsed)
  clear_has_stage_time_elapsed();
  ::google::protobuf::Duration* temp = stage_time_elapsed_;
  stage_time_elapsed_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* State::mutable_stage_time_elapsed() {
  set_has_stage_time_elapsed();
  if (stage_time_elapsed_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    stage_time_elapsed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.stage_time_elapsed)
  return stage_time_elapsed_;
}
inline void State::set_allocated_stage_time_elapsed(::google::protobuf::Duration* stage_time_elapsed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stage_time_elapsed_);
  }
  if (stage_time_elapsed) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(stage_time_elapsed)->GetArena();
    if (message_arena != submessage_arena) {
      stage_time_elapsed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stage_time_elapsed, submessage_arena);
    }
    set_has_stage_time_elapsed();
  } else {
    clear_has_stage_time_elapsed();
  }
  stage_time_elapsed_ = stage_time_elapsed;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.stage_time_elapsed)
}

// optional .google.protobuf.Duration stage_time_left = 5;
inline bool State::has_stage_time_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void State::set_has_stage_time_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void State::clear_has_stage_time_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::google::protobuf::Duration& State::_internal_stage_time_left() const {
  return *stage_time_left_;
}
inline const ::google::protobuf::Duration& State::stage_time_left() const {
  const ::google::protobuf::Duration* p = stage_time_left_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.stage_time_left)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* State::release_stage_time_left() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.stage_time_left)
  clear_has_stage_time_left();
  ::google::protobuf::Duration* temp = stage_time_left_;
  stage_time_left_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* State::mutable_stage_time_left() {
  set_has_stage_time_left();
  if (stage_time_left_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    stage_time_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.stage_time_left)
  return stage_time_left_;
}
inline void State::set_allocated_stage_time_left(::google::protobuf::Duration* stage_time_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stage_time_left_);
  }
  if (stage_time_left) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(stage_time_left)->GetArena();
    if (message_arena != submessage_arena) {
      stage_time_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stage_time_left, submessage_arena);
    }
    set_has_stage_time_left();
  } else {
    clear_has_stage_time_left();
  }
  stage_time_left_ = stage_time_left;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.stage_time_left)
}

// optional .google.protobuf.Timestamp match_time_start = 6;
inline bool State::has_match_time_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void State::set_has_match_time_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void State::clear_has_match_time_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::google::protobuf::Timestamp& State::_internal_match_time_start() const {
  return *match_time_start_;
}
inline const ::google::protobuf::Timestamp& State::match_time_start() const {
  const ::google::protobuf::Timestamp* p = match_time_start_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.match_time_start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* State::release_match_time_start() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.match_time_start)
  clear_has_match_time_start();
  ::google::protobuf::Timestamp* temp = match_time_start_;
  match_time_start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* State::mutable_match_time_start() {
  set_has_match_time_start();
  if (match_time_start_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    match_time_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.match_time_start)
  return match_time_start_;
}
inline void State::set_allocated_match_time_start(::google::protobuf::Timestamp* match_time_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(match_time_start_);
  }
  if (match_time_start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(match_time_start)->GetArena();
    if (message_arena != submessage_arena) {
      match_time_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_time_start, submessage_arena);
    }
    set_has_match_time_start();
  } else {
    clear_has_match_time_start();
  }
  match_time_start_ = match_time_start;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.match_time_start)
}

// map<string, .ssl_protos.gc.TeamInfo> team_state = 8;
inline int State::team_state_size() const {
  return team_state_.size();
}
inline void State::clear_team_state() {
  team_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::TeamInfo >&
State::team_state() const {
  // @@protoc_insertion_point(field_map:ssl_protos.gc.State.team_state)
  return team_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ssl_protos::gc::TeamInfo >*
State::mutable_team_state() {
  // @@protoc_insertion_point(field_mutable_map:ssl_protos.gc.State.team_state)
  return team_state_.MutableMap();
}

// optional .ssl_protos.gc.Vector2 placement_pos = 9;
inline bool State::has_placement_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void State::set_has_placement_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void State::clear_has_placement_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ssl_protos::gc::Vector2& State::_internal_placement_pos() const {
  return *placement_pos_;
}
inline const ::ssl_protos::gc::Vector2& State::placement_pos() const {
  const ::ssl_protos::gc::Vector2* p = placement_pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.placement_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* State::release_placement_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.placement_pos)
  clear_has_placement_pos();
  ::ssl_protos::gc::Vector2* temp = placement_pos_;
  placement_pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* State::mutable_placement_pos() {
  set_has_placement_pos();
  if (placement_pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    placement_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.placement_pos)
  return placement_pos_;
}
inline void State::set_allocated_placement_pos(::ssl_protos::gc::Vector2* placement_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(placement_pos_);
  }
  if (placement_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      placement_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, placement_pos, submessage_arena);
    }
    set_has_placement_pos();
  } else {
    clear_has_placement_pos();
  }
  placement_pos_ = placement_pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.placement_pos)
}

// optional .ssl_protos.gc.Command next_command = 10;
inline bool State::has_next_command() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void State::set_has_next_command() {
  _has_bits_[0] |= 0x00000020u;
}
inline void State::clear_has_next_command() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void State::clear_next_command() {
  if (next_command_ != NULL) next_command_->Clear();
  clear_has_next_command();
}
inline const ::ssl_protos::gc::Command& State::_internal_next_command() const {
  return *next_command_;
}
inline const ::ssl_protos::gc::Command& State::next_command() const {
  const ::ssl_protos::gc::Command* p = next_command_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.next_command)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Command*>(
      &::ssl_protos::gc::_Command_default_instance_);
}
inline ::ssl_protos::gc::Command* State::release_next_command() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.next_command)
  clear_has_next_command();
  ::ssl_protos::gc::Command* temp = next_command_;
  next_command_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Command* State::mutable_next_command() {
  set_has_next_command();
  if (next_command_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Command>(GetArenaNoVirtual());
    next_command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.next_command)
  return next_command_;
}
inline void State::set_allocated_next_command(::ssl_protos::gc::Command* next_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete next_command_;
  }
  if (next_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_command, submessage_arena);
    }
    set_has_next_command();
  } else {
    clear_has_next_command();
  }
  next_command_ = next_command;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.next_command)
}

// optional .google.protobuf.Duration current_action_time_remaining = 12;
inline bool State::has_current_action_time_remaining() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void State::set_has_current_action_time_remaining() {
  _has_bits_[0] |= 0x00000040u;
}
inline void State::clear_has_current_action_time_remaining() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::google::protobuf::Duration& State::_internal_current_action_time_remaining() const {
  return *current_action_time_remaining_;
}
inline const ::google::protobuf::Duration& State::current_action_time_remaining() const {
  const ::google::protobuf::Duration* p = current_action_time_remaining_;
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.current_action_time_remaining)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* State::release_current_action_time_remaining() {
  // @@protoc_insertion_point(field_release:ssl_protos.gc.State.current_action_time_remaining)
  clear_has_current_action_time_remaining();
  ::google::protobuf::Duration* temp = current_action_time_remaining_;
  current_action_time_remaining_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* State::mutable_current_action_time_remaining() {
  set_has_current_action_time_remaining();
  if (current_action_time_remaining_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    current_action_time_remaining_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.current_action_time_remaining)
  return current_action_time_remaining_;
}
inline void State::set_allocated_current_action_time_remaining(::google::protobuf::Duration* current_action_time_remaining) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_action_time_remaining_);
  }
  if (current_action_time_remaining) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(current_action_time_remaining)->GetArena();
    if (message_arena != submessage_arena) {
      current_action_time_remaining = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_action_time_remaining, submessage_arena);
    }
    set_has_current_action_time_remaining();
  } else {
    clear_has_current_action_time_remaining();
  }
  current_action_time_remaining_ = current_action_time_remaining;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.gc.State.current_action_time_remaining)
}

// repeated .ssl_protos.gc.GameEvent game_events = 13;
inline int State::game_events_size() const {
  return game_events_.size();
}
inline ::ssl_protos::gc::GameEvent* State::mutable_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.game_events)
  return game_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::GameEvent >*
State::mutable_game_events() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.State.game_events)
  return &game_events_;
}
inline const ::ssl_protos::gc::GameEvent& State::game_events(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.game_events)
  return game_events_.Get(index);
}
inline ::ssl_protos::gc::GameEvent* State::add_game_events() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.State.game_events)
  return game_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::GameEvent >&
State::game_events() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.State.game_events)
  return game_events_;
}

// repeated .ssl_protos.gc.ProposalGroup proposal_groups = 14;
inline int State::proposal_groups_size() const {
  return proposal_groups_.size();
}
inline void State::clear_proposal_groups() {
  proposal_groups_.Clear();
}
inline ::ssl_protos::gc::ProposalGroup* State::mutable_proposal_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.gc.State.proposal_groups)
  return proposal_groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::ProposalGroup >*
State::mutable_proposal_groups() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.gc.State.proposal_groups)
  return &proposal_groups_;
}
inline const ::ssl_protos::gc::ProposalGroup& State::proposal_groups(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.proposal_groups)
  return proposal_groups_.Get(index);
}
inline ::ssl_protos::gc::ProposalGroup* State::add_proposal_groups() {
  // @@protoc_insertion_point(field_add:ssl_protos.gc.State.proposal_groups)
  return proposal_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::gc::ProposalGroup >&
State::proposal_groups() const {
  // @@protoc_insertion_point(field_list:ssl_protos.gc.State.proposal_groups)
  return proposal_groups_;
}

// optional .ssl_protos.gc.Division division = 15;
inline bool State::has_division() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void State::set_has_division() {
  _has_bits_[0] |= 0x00000200u;
}
inline void State::clear_has_division() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void State::clear_division() {
  division_ = 0;
  clear_has_division();
}
inline ::ssl_protos::gc::Division State::division() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.division)
  return static_cast< ::ssl_protos::gc::Division >(division_);
}
inline void State::set_division(::ssl_protos::gc::Division value) {
  assert(::ssl_protos::gc::Division_IsValid(value));
  set_has_division();
  division_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.State.division)
}

// optional bool auto_continue = 16;
inline bool State::has_auto_continue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void State::set_has_auto_continue() {
  _has_bits_[0] |= 0x00000400u;
}
inline void State::clear_has_auto_continue() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void State::clear_auto_continue() {
  auto_continue_ = false;
  clear_has_auto_continue();
}
inline bool State::auto_continue() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.auto_continue)
  return auto_continue_;
}
inline void State::set_auto_continue(bool value) {
  set_has_auto_continue();
  auto_continue_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.State.auto_continue)
}

// optional .ssl_protos.gc.Team first_kickoff_team = 17;
inline bool State::has_first_kickoff_team() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void State::set_has_first_kickoff_team() {
  _has_bits_[0] |= 0x00000800u;
}
inline void State::clear_has_first_kickoff_team() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void State::clear_first_kickoff_team() {
  first_kickoff_team_ = 0;
  clear_has_first_kickoff_team();
}
inline ::ssl_protos::gc::Team State::first_kickoff_team() const {
  // @@protoc_insertion_point(field_get:ssl_protos.gc.State.first_kickoff_team)
  return static_cast< ::ssl_protos::gc::Team >(first_kickoff_team_);
}
inline void State::set_first_kickoff_team(::ssl_protos::gc::Team value) {
  assert(::ssl_protos::gc::Team_IsValid(value));
  set_has_first_kickoff_team();
  first_kickoff_team_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.gc.State.first_kickoff_team)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gc
}  // namespace ssl_protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssl_protos::gc::Command_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::gc::Command_Type>() {
  return ::ssl_protos::gc::Command_Type_descriptor();
}
template <> struct is_proto_enum< ::ssl_protos::gc::GameState_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::gc::GameState_Type>() {
  return ::ssl_protos::gc::GameState_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gc_5fstate_2eproto
