// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection_tracked.proto

#ifndef PROTOBUF_INCLUDED_vision_5fdetection_5ftracked_2eproto
#define PROTOBUF_INCLUDED_vision_5fdetection_5ftracked_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gc_common.pb.h"
#include "gc_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vision_5fdetection_5ftracked_2eproto 

namespace protobuf_vision_5fdetection_5ftracked_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vision_5fdetection_5ftracked_2eproto
namespace ssl_protos {
namespace vision {
class KickedBall;
class KickedBallDefaultTypeInternal;
extern KickedBallDefaultTypeInternal _KickedBall_default_instance_;
class TrackedBall;
class TrackedBallDefaultTypeInternal;
extern TrackedBallDefaultTypeInternal _TrackedBall_default_instance_;
class TrackedFrame;
class TrackedFrameDefaultTypeInternal;
extern TrackedFrameDefaultTypeInternal _TrackedFrame_default_instance_;
class TrackedRobot;
class TrackedRobotDefaultTypeInternal;
extern TrackedRobotDefaultTypeInternal _TrackedRobot_default_instance_;
}  // namespace vision
}  // namespace ssl_protos
namespace google {
namespace protobuf {
template<> ::ssl_protos::vision::KickedBall* Arena::CreateMaybeMessage<::ssl_protos::vision::KickedBall>(Arena*);
template<> ::ssl_protos::vision::TrackedBall* Arena::CreateMaybeMessage<::ssl_protos::vision::TrackedBall>(Arena*);
template<> ::ssl_protos::vision::TrackedFrame* Arena::CreateMaybeMessage<::ssl_protos::vision::TrackedFrame>(Arena*);
template<> ::ssl_protos::vision::TrackedRobot* Arena::CreateMaybeMessage<::ssl_protos::vision::TrackedRobot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssl_protos {
namespace vision {

enum Capability {
  CAPABILITY_UNKNOWN = 0,
  CAPABILITY_DETECT_FLYING_BALLS = 1,
  CAPABILITY_DETECT_MULTIPLE_BALLS = 2,
  CAPABILITY_DETECT_KICKED_BALLS = 3
};
bool Capability_IsValid(int value);
const Capability Capability_MIN = CAPABILITY_UNKNOWN;
const Capability Capability_MAX = CAPABILITY_DETECT_KICKED_BALLS;
const int Capability_ARRAYSIZE = Capability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Capability_descriptor();
inline const ::std::string& Capability_Name(Capability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Capability_descriptor(), value);
}
inline bool Capability_Parse(
    const ::std::string& name, Capability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Capability>(
    Capability_descriptor(), name, value);
}
// ===================================================================

class TrackedBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.TrackedBall) */ {
 public:
  TrackedBall();
  virtual ~TrackedBall();

  TrackedBall(const TrackedBall& from);

  inline TrackedBall& operator=(const TrackedBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackedBall(TrackedBall&& from) noexcept
    : TrackedBall() {
    *this = ::std::move(from);
  }

  inline TrackedBall& operator=(TrackedBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedBall* internal_default_instance() {
    return reinterpret_cast<const TrackedBall*>(
               &_TrackedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrackedBall* other);
  friend void swap(TrackedBall& a, TrackedBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackedBall* New() const final {
    return CreateMaybeMessage<TrackedBall>(NULL);
  }

  TrackedBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackedBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackedBall& from);
  void MergeFrom(const TrackedBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::ssl_protos::gc::Vector3& _internal_pos() const;
  public:
  const ::ssl_protos::gc::Vector3& pos() const;
  ::ssl_protos::gc::Vector3* release_pos();
  ::ssl_protos::gc::Vector3* mutable_pos();
  void set_allocated_pos(::ssl_protos::gc::Vector3* pos);

  // optional .ssl_protos.gc.Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector3& _internal_vel() const;
  public:
  const ::ssl_protos::gc::Vector3& vel() const;
  ::ssl_protos::gc::Vector3* release_vel();
  ::ssl_protos::gc::Vector3* mutable_vel();
  void set_allocated_vel(::ssl_protos::gc::Vector3* vel);

  // optional float visibility = 3;
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 3;
  float visibility() const;
  void set_visibility(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.TrackedBall)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_vel();
  void clear_has_vel();
  void set_has_visibility();
  void clear_has_visibility();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector3* pos_;
  ::ssl_protos::gc::Vector3* vel_;
  float visibility_;
  friend struct ::protobuf_vision_5fdetection_5ftracked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KickedBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.KickedBall) */ {
 public:
  KickedBall();
  virtual ~KickedBall();

  KickedBall(const KickedBall& from);

  inline KickedBall& operator=(const KickedBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickedBall(KickedBall&& from) noexcept
    : KickedBall() {
    *this = ::std::move(from);
  }

  inline KickedBall& operator=(KickedBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickedBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickedBall* internal_default_instance() {
    return reinterpret_cast<const KickedBall*>(
               &_KickedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KickedBall* other);
  friend void swap(KickedBall& a, KickedBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickedBall* New() const final {
    return CreateMaybeMessage<KickedBall>(NULL);
  }

  KickedBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KickedBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KickedBall& from);
  void MergeFrom(const KickedBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickedBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.Vector2 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::ssl_protos::gc::Vector2& _internal_pos() const;
  public:
  const ::ssl_protos::gc::Vector2& pos() const;
  ::ssl_protos::gc::Vector2* release_pos();
  ::ssl_protos::gc::Vector2* mutable_pos();
  void set_allocated_pos(::ssl_protos::gc::Vector2* pos);

  // required .ssl_protos.gc.Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector3& _internal_vel() const;
  public:
  const ::ssl_protos::gc::Vector3& vel() const;
  ::ssl_protos::gc::Vector3* release_vel();
  ::ssl_protos::gc::Vector3* mutable_vel();
  void set_allocated_vel(::ssl_protos::gc::Vector3* vel);

  // optional .ssl_protos.gc.Vector2 stop_pos = 5;
  bool has_stop_pos() const;
  void clear_stop_pos();
  static const int kStopPosFieldNumber = 5;
  private:
  const ::ssl_protos::gc::Vector2& _internal_stop_pos() const;
  public:
  const ::ssl_protos::gc::Vector2& stop_pos() const;
  ::ssl_protos::gc::Vector2* release_stop_pos();
  ::ssl_protos::gc::Vector2* mutable_stop_pos();
  void set_allocated_stop_pos(::ssl_protos::gc::Vector2* stop_pos);

  // optional .ssl_protos.gc.RobotId robot_id = 6;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 6;
  private:
  const ::ssl_protos::gc::RobotId& _internal_robot_id() const;
  public:
  const ::ssl_protos::gc::RobotId& robot_id() const;
  ::ssl_protos::gc::RobotId* release_robot_id();
  ::ssl_protos::gc::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::ssl_protos::gc::RobotId* robot_id);

  // required double start_timestamp = 3;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 3;
  double start_timestamp() const;
  void set_start_timestamp(double value);

  // optional double stop_timestamp = 4;
  bool has_stop_timestamp() const;
  void clear_stop_timestamp();
  static const int kStopTimestampFieldNumber = 4;
  double stop_timestamp() const;
  void set_stop_timestamp(double value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.KickedBall)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_vel();
  void clear_has_vel();
  void set_has_start_timestamp();
  void clear_has_start_timestamp();
  void set_has_stop_timestamp();
  void clear_has_stop_timestamp();
  void set_has_stop_pos();
  void clear_has_stop_pos();
  void set_has_robot_id();
  void clear_has_robot_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::Vector2* pos_;
  ::ssl_protos::gc::Vector3* vel_;
  ::ssl_protos::gc::Vector2* stop_pos_;
  ::ssl_protos::gc::RobotId* robot_id_;
  double start_timestamp_;
  double stop_timestamp_;
  friend struct ::protobuf_vision_5fdetection_5ftracked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackedRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.TrackedRobot) */ {
 public:
  TrackedRobot();
  virtual ~TrackedRobot();

  TrackedRobot(const TrackedRobot& from);

  inline TrackedRobot& operator=(const TrackedRobot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackedRobot(TrackedRobot&& from) noexcept
    : TrackedRobot() {
    *this = ::std::move(from);
  }

  inline TrackedRobot& operator=(TrackedRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedRobot* internal_default_instance() {
    return reinterpret_cast<const TrackedRobot*>(
               &_TrackedRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TrackedRobot* other);
  friend void swap(TrackedRobot& a, TrackedRobot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackedRobot* New() const final {
    return CreateMaybeMessage<TrackedRobot>(NULL);
  }

  TrackedRobot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackedRobot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackedRobot& from);
  void MergeFrom(const TrackedRobot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedRobot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ssl_protos.gc.RobotId robot_id = 1;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  private:
  const ::ssl_protos::gc::RobotId& _internal_robot_id() const;
  public:
  const ::ssl_protos::gc::RobotId& robot_id() const;
  ::ssl_protos::gc::RobotId* release_robot_id();
  ::ssl_protos::gc::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::ssl_protos::gc::RobotId* robot_id);

  // required .ssl_protos.gc.Vector2 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::ssl_protos::gc::Vector2& _internal_pos() const;
  public:
  const ::ssl_protos::gc::Vector2& pos() const;
  ::ssl_protos::gc::Vector2* release_pos();
  ::ssl_protos::gc::Vector2* mutable_pos();
  void set_allocated_pos(::ssl_protos::gc::Vector2* pos);

  // optional .ssl_protos.gc.Vector2 vel = 4;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 4;
  private:
  const ::ssl_protos::gc::Vector2& _internal_vel() const;
  public:
  const ::ssl_protos::gc::Vector2& vel() const;
  ::ssl_protos::gc::Vector2* release_vel();
  ::ssl_protos::gc::Vector2* mutable_vel();
  void set_allocated_vel(::ssl_protos::gc::Vector2* vel);

  // required float orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  float orientation() const;
  void set_orientation(float value);

  // optional float vel_angular = 5;
  bool has_vel_angular() const;
  void clear_vel_angular();
  static const int kVelAngularFieldNumber = 5;
  float vel_angular() const;
  void set_vel_angular(float value);

  // optional float visibility = 6;
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 6;
  float visibility() const;
  void set_visibility(float value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.TrackedRobot)
 private:
  void set_has_robot_id();
  void clear_has_robot_id();
  void set_has_pos();
  void clear_has_pos();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_vel();
  void clear_has_vel();
  void set_has_vel_angular();
  void clear_has_vel_angular();
  void set_has_visibility();
  void clear_has_visibility();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ssl_protos::gc::RobotId* robot_id_;
  ::ssl_protos::gc::Vector2* pos_;
  ::ssl_protos::gc::Vector2* vel_;
  float orientation_;
  float vel_angular_;
  float visibility_;
  friend struct ::protobuf_vision_5fdetection_5ftracked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackedFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssl_protos.vision.TrackedFrame) */ {
 public:
  TrackedFrame();
  virtual ~TrackedFrame();

  TrackedFrame(const TrackedFrame& from);

  inline TrackedFrame& operator=(const TrackedFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackedFrame(TrackedFrame&& from) noexcept
    : TrackedFrame() {
    *this = ::std::move(from);
  }

  inline TrackedFrame& operator=(TrackedFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedFrame* internal_default_instance() {
    return reinterpret_cast<const TrackedFrame*>(
               &_TrackedFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TrackedFrame* other);
  friend void swap(TrackedFrame& a, TrackedFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackedFrame* New() const final {
    return CreateMaybeMessage<TrackedFrame>(NULL);
  }

  TrackedFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackedFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackedFrame& from);
  void MergeFrom(const TrackedFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ssl_protos.vision.TrackedBall balls = 3;
  int balls_size() const;
  void clear_balls();
  static const int kBallsFieldNumber = 3;
  ::ssl_protos::vision::TrackedBall* mutable_balls(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedBall >*
      mutable_balls();
  const ::ssl_protos::vision::TrackedBall& balls(int index) const;
  ::ssl_protos::vision::TrackedBall* add_balls();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedBall >&
      balls() const;

  // repeated .ssl_protos.vision.TrackedRobot robots = 4;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 4;
  ::ssl_protos::vision::TrackedRobot* mutable_robots(int index);
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedRobot >*
      mutable_robots();
  const ::ssl_protos::vision::TrackedRobot& robots(int index) const;
  ::ssl_protos::vision::TrackedRobot* add_robots();
  const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedRobot >&
      robots() const;

  // repeated .ssl_protos.vision.Capability capabilities = 6;
  int capabilities_size() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 6;
  ::ssl_protos::vision::Capability capabilities(int index) const;
  void set_capabilities(int index, ::ssl_protos::vision::Capability value);
  void add_capabilities(::ssl_protos::vision::Capability value);
  const ::google::protobuf::RepeatedField<int>& capabilities() const;
  ::google::protobuf::RepeatedField<int>* mutable_capabilities();

  // optional .ssl_protos.vision.KickedBall kicked_ball = 5;
  bool has_kicked_ball() const;
  void clear_kicked_ball();
  static const int kKickedBallFieldNumber = 5;
  private:
  const ::ssl_protos::vision::KickedBall& _internal_kicked_ball() const;
  public:
  const ::ssl_protos::vision::KickedBall& kicked_ball() const;
  ::ssl_protos::vision::KickedBall* release_kicked_ball();
  ::ssl_protos::vision::KickedBall* mutable_kicked_ball();
  void set_allocated_kicked_ball(::ssl_protos::vision::KickedBall* kicked_ball);

  // required double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  void clear_frame_number();
  static const int kFrameNumberFieldNumber = 1;
  ::google::protobuf::uint32 frame_number() const;
  void set_frame_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssl_protos.vision.TrackedFrame)
 private:
  void set_has_frame_number();
  void clear_has_frame_number();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_kicked_ball();
  void clear_has_kicked_ball();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedBall > balls_;
  ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedRobot > robots_;
  ::google::protobuf::RepeatedField<int> capabilities_;
  ::ssl_protos::vision::KickedBall* kicked_ball_;
  double timestamp_;
  ::google::protobuf::uint32 frame_number_;
  friend struct ::protobuf_vision_5fdetection_5ftracked_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackedBall

// required .ssl_protos.gc.Vector3 pos = 1;
inline bool TrackedBall::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedBall::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedBall::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector3& TrackedBall::_internal_pos() const {
  return *pos_;
}
inline const ::ssl_protos::gc::Vector3& TrackedBall::pos() const {
  const ::ssl_protos::gc::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedBall.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector3*>(
      &::ssl_protos::gc::_Vector3_default_instance_);
}
inline ::ssl_protos::gc::Vector3* TrackedBall::release_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedBall.pos)
  clear_has_pos();
  ::ssl_protos::gc::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector3* TrackedBall::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedBall.pos)
  return pos_;
}
inline void TrackedBall::set_allocated_pos(::ssl_protos::gc::Vector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedBall.pos)
}

// optional .ssl_protos.gc.Vector3 vel = 2;
inline bool TrackedBall::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedBall::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedBall::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector3& TrackedBall::_internal_vel() const {
  return *vel_;
}
inline const ::ssl_protos::gc::Vector3& TrackedBall::vel() const {
  const ::ssl_protos::gc::Vector3* p = vel_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedBall.vel)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector3*>(
      &::ssl_protos::gc::_Vector3_default_instance_);
}
inline ::ssl_protos::gc::Vector3* TrackedBall::release_vel() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedBall.vel)
  clear_has_vel();
  ::ssl_protos::gc::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector3* TrackedBall::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector3>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedBall.vel)
  return vel_;
}
inline void TrackedBall::set_allocated_vel(::ssl_protos::gc::Vector3* vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_);
  }
  if (vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    set_has_vel();
  } else {
    clear_has_vel();
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedBall.vel)
}

// optional float visibility = 3;
inline bool TrackedBall::has_visibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackedBall::set_has_visibility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackedBall::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackedBall::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline float TrackedBall::visibility() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedBall.visibility)
  return visibility_;
}
inline void TrackedBall::set_visibility(float value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedBall.visibility)
}

// -------------------------------------------------------------------

// KickedBall

// required .ssl_protos.gc.Vector2 pos = 1;
inline bool KickedBall::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickedBall::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickedBall::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::Vector2& KickedBall::_internal_pos() const {
  return *pos_;
}
inline const ::ssl_protos::gc::Vector2& KickedBall::pos() const {
  const ::ssl_protos::gc::Vector2* p = pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* KickedBall::release_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.KickedBall.pos)
  clear_has_pos();
  ::ssl_protos::gc::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* KickedBall::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.KickedBall.pos)
  return pos_;
}
inline void KickedBall::set_allocated_pos(::ssl_protos::gc::Vector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.KickedBall.pos)
}

// required .ssl_protos.gc.Vector3 vel = 2;
inline bool KickedBall::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickedBall::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickedBall::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector3& KickedBall::_internal_vel() const {
  return *vel_;
}
inline const ::ssl_protos::gc::Vector3& KickedBall::vel() const {
  const ::ssl_protos::gc::Vector3* p = vel_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.vel)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector3*>(
      &::ssl_protos::gc::_Vector3_default_instance_);
}
inline ::ssl_protos::gc::Vector3* KickedBall::release_vel() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.KickedBall.vel)
  clear_has_vel();
  ::ssl_protos::gc::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector3* KickedBall::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector3>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.KickedBall.vel)
  return vel_;
}
inline void KickedBall::set_allocated_vel(::ssl_protos::gc::Vector3* vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_);
  }
  if (vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    set_has_vel();
  } else {
    clear_has_vel();
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.KickedBall.vel)
}

// required double start_timestamp = 3;
inline bool KickedBall::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KickedBall::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KickedBall::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KickedBall::clear_start_timestamp() {
  start_timestamp_ = 0;
  clear_has_start_timestamp();
}
inline double KickedBall::start_timestamp() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.start_timestamp)
  return start_timestamp_;
}
inline void KickedBall::set_start_timestamp(double value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.KickedBall.start_timestamp)
}

// optional double stop_timestamp = 4;
inline bool KickedBall::has_stop_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KickedBall::set_has_stop_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KickedBall::clear_has_stop_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KickedBall::clear_stop_timestamp() {
  stop_timestamp_ = 0;
  clear_has_stop_timestamp();
}
inline double KickedBall::stop_timestamp() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.stop_timestamp)
  return stop_timestamp_;
}
inline void KickedBall::set_stop_timestamp(double value) {
  set_has_stop_timestamp();
  stop_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.KickedBall.stop_timestamp)
}

// optional .ssl_protos.gc.Vector2 stop_pos = 5;
inline bool KickedBall::has_stop_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickedBall::set_has_stop_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickedBall::clear_has_stop_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ssl_protos::gc::Vector2& KickedBall::_internal_stop_pos() const {
  return *stop_pos_;
}
inline const ::ssl_protos::gc::Vector2& KickedBall::stop_pos() const {
  const ::ssl_protos::gc::Vector2* p = stop_pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.stop_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* KickedBall::release_stop_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.KickedBall.stop_pos)
  clear_has_stop_pos();
  ::ssl_protos::gc::Vector2* temp = stop_pos_;
  stop_pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* KickedBall::mutable_stop_pos() {
  set_has_stop_pos();
  if (stop_pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    stop_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.KickedBall.stop_pos)
  return stop_pos_;
}
inline void KickedBall::set_allocated_stop_pos(::ssl_protos::gc::Vector2* stop_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_pos_);
  }
  if (stop_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_pos, submessage_arena);
    }
    set_has_stop_pos();
  } else {
    clear_has_stop_pos();
  }
  stop_pos_ = stop_pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.KickedBall.stop_pos)
}

// optional .ssl_protos.gc.RobotId robot_id = 6;
inline bool KickedBall::has_robot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickedBall::set_has_robot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickedBall::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ssl_protos::gc::RobotId& KickedBall::_internal_robot_id() const {
  return *robot_id_;
}
inline const ::ssl_protos::gc::RobotId& KickedBall::robot_id() const {
  const ::ssl_protos::gc::RobotId* p = robot_id_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.KickedBall.robot_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::RobotId*>(
      &::ssl_protos::gc::_RobotId_default_instance_);
}
inline ::ssl_protos::gc::RobotId* KickedBall::release_robot_id() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.KickedBall.robot_id)
  clear_has_robot_id();
  ::ssl_protos::gc::RobotId* temp = robot_id_;
  robot_id_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::RobotId* KickedBall::mutable_robot_id() {
  set_has_robot_id();
  if (robot_id_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::RobotId>(GetArenaNoVirtual());
    robot_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.KickedBall.robot_id)
  return robot_id_;
}
inline void KickedBall::set_allocated_robot_id(::ssl_protos::gc::RobotId* robot_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(robot_id_);
  }
  if (robot_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.KickedBall.robot_id)
}

// -------------------------------------------------------------------

// TrackedRobot

// required .ssl_protos.gc.RobotId robot_id = 1;
inline bool TrackedRobot::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedRobot::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedRobot::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssl_protos::gc::RobotId& TrackedRobot::_internal_robot_id() const {
  return *robot_id_;
}
inline const ::ssl_protos::gc::RobotId& TrackedRobot::robot_id() const {
  const ::ssl_protos::gc::RobotId* p = robot_id_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.robot_id)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::RobotId*>(
      &::ssl_protos::gc::_RobotId_default_instance_);
}
inline ::ssl_protos::gc::RobotId* TrackedRobot::release_robot_id() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedRobot.robot_id)
  clear_has_robot_id();
  ::ssl_protos::gc::RobotId* temp = robot_id_;
  robot_id_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::RobotId* TrackedRobot::mutable_robot_id() {
  set_has_robot_id();
  if (robot_id_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::RobotId>(GetArenaNoVirtual());
    robot_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedRobot.robot_id)
  return robot_id_;
}
inline void TrackedRobot::set_allocated_robot_id(::ssl_protos::gc::RobotId* robot_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(robot_id_);
  }
  if (robot_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      robot_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedRobot.robot_id)
}

// required .ssl_protos.gc.Vector2 pos = 2;
inline bool TrackedRobot::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedRobot::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedRobot::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssl_protos::gc::Vector2& TrackedRobot::_internal_pos() const {
  return *pos_;
}
inline const ::ssl_protos::gc::Vector2& TrackedRobot::pos() const {
  const ::ssl_protos::gc::Vector2* p = pos_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* TrackedRobot::release_pos() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedRobot.pos)
  clear_has_pos();
  ::ssl_protos::gc::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* TrackedRobot::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedRobot.pos)
  return pos_;
}
inline void TrackedRobot::set_allocated_pos(::ssl_protos::gc::Vector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedRobot.pos)
}

// required float orientation = 3;
inline bool TrackedRobot::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackedRobot::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackedRobot::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackedRobot::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float TrackedRobot::orientation() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.orientation)
  return orientation_;
}
inline void TrackedRobot::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedRobot.orientation)
}

// optional .ssl_protos.gc.Vector2 vel = 4;
inline bool TrackedRobot::has_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackedRobot::set_has_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackedRobot::clear_has_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ssl_protos::gc::Vector2& TrackedRobot::_internal_vel() const {
  return *vel_;
}
inline const ::ssl_protos::gc::Vector2& TrackedRobot::vel() const {
  const ::ssl_protos::gc::Vector2* p = vel_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.vel)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::gc::Vector2*>(
      &::ssl_protos::gc::_Vector2_default_instance_);
}
inline ::ssl_protos::gc::Vector2* TrackedRobot::release_vel() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedRobot.vel)
  clear_has_vel();
  ::ssl_protos::gc::Vector2* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline ::ssl_protos::gc::Vector2* TrackedRobot::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::gc::Vector2>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedRobot.vel)
  return vel_;
}
inline void TrackedRobot::set_allocated_vel(::ssl_protos::gc::Vector2* vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_);
  }
  if (vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    set_has_vel();
  } else {
    clear_has_vel();
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedRobot.vel)
}

// optional float vel_angular = 5;
inline bool TrackedRobot::has_vel_angular() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackedRobot::set_has_vel_angular() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackedRobot::clear_has_vel_angular() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackedRobot::clear_vel_angular() {
  vel_angular_ = 0;
  clear_has_vel_angular();
}
inline float TrackedRobot::vel_angular() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.vel_angular)
  return vel_angular_;
}
inline void TrackedRobot::set_vel_angular(float value) {
  set_has_vel_angular();
  vel_angular_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedRobot.vel_angular)
}

// optional float visibility = 6;
inline bool TrackedRobot::has_visibility() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackedRobot::set_has_visibility() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackedRobot::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackedRobot::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline float TrackedRobot::visibility() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedRobot.visibility)
  return visibility_;
}
inline void TrackedRobot::set_visibility(float value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedRobot.visibility)
}

// -------------------------------------------------------------------

// TrackedFrame

// required uint32 frame_number = 1;
inline bool TrackedFrame::has_frame_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackedFrame::set_has_frame_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackedFrame::clear_has_frame_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackedFrame::clear_frame_number() {
  frame_number_ = 0u;
  clear_has_frame_number();
}
inline ::google::protobuf::uint32 TrackedFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.frame_number)
  return frame_number_;
}
inline void TrackedFrame::set_frame_number(::google::protobuf::uint32 value) {
  set_has_frame_number();
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedFrame.frame_number)
}

// required double timestamp = 2;
inline bool TrackedFrame::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedFrame::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedFrame::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackedFrame::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double TrackedFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.timestamp)
  return timestamp_;
}
inline void TrackedFrame::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedFrame.timestamp)
}

// repeated .ssl_protos.vision.TrackedBall balls = 3;
inline int TrackedFrame::balls_size() const {
  return balls_.size();
}
inline void TrackedFrame::clear_balls() {
  balls_.Clear();
}
inline ::ssl_protos::vision::TrackedBall* TrackedFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedFrame.balls)
  return balls_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedBall >*
TrackedFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.TrackedFrame.balls)
  return &balls_;
}
inline const ::ssl_protos::vision::TrackedBall& TrackedFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.balls)
  return balls_.Get(index);
}
inline ::ssl_protos::vision::TrackedBall* TrackedFrame::add_balls() {
  // @@protoc_insertion_point(field_add:ssl_protos.vision.TrackedFrame.balls)
  return balls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedBall >&
TrackedFrame::balls() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.TrackedFrame.balls)
  return balls_;
}

// repeated .ssl_protos.vision.TrackedRobot robots = 4;
inline int TrackedFrame::robots_size() const {
  return robots_.size();
}
inline void TrackedFrame::clear_robots() {
  robots_.Clear();
}
inline ::ssl_protos::vision::TrackedRobot* TrackedFrame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedFrame.robots)
  return robots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedRobot >*
TrackedFrame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.TrackedFrame.robots)
  return &robots_;
}
inline const ::ssl_protos::vision::TrackedRobot& TrackedFrame::robots(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.robots)
  return robots_.Get(index);
}
inline ::ssl_protos::vision::TrackedRobot* TrackedFrame::add_robots() {
  // @@protoc_insertion_point(field_add:ssl_protos.vision.TrackedFrame.robots)
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_protos::vision::TrackedRobot >&
TrackedFrame::robots() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.TrackedFrame.robots)
  return robots_;
}

// optional .ssl_protos.vision.KickedBall kicked_ball = 5;
inline bool TrackedFrame::has_kicked_ball() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedFrame::set_has_kicked_ball() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedFrame::clear_has_kicked_ball() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackedFrame::clear_kicked_ball() {
  if (kicked_ball_ != NULL) kicked_ball_->Clear();
  clear_has_kicked_ball();
}
inline const ::ssl_protos::vision::KickedBall& TrackedFrame::_internal_kicked_ball() const {
  return *kicked_ball_;
}
inline const ::ssl_protos::vision::KickedBall& TrackedFrame::kicked_ball() const {
  const ::ssl_protos::vision::KickedBall* p = kicked_ball_;
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.kicked_ball)
  return p != NULL ? *p : *reinterpret_cast<const ::ssl_protos::vision::KickedBall*>(
      &::ssl_protos::vision::_KickedBall_default_instance_);
}
inline ::ssl_protos::vision::KickedBall* TrackedFrame::release_kicked_ball() {
  // @@protoc_insertion_point(field_release:ssl_protos.vision.TrackedFrame.kicked_ball)
  clear_has_kicked_ball();
  ::ssl_protos::vision::KickedBall* temp = kicked_ball_;
  kicked_ball_ = NULL;
  return temp;
}
inline ::ssl_protos::vision::KickedBall* TrackedFrame::mutable_kicked_ball() {
  set_has_kicked_ball();
  if (kicked_ball_ == NULL) {
    auto* p = CreateMaybeMessage<::ssl_protos::vision::KickedBall>(GetArenaNoVirtual());
    kicked_ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ssl_protos.vision.TrackedFrame.kicked_ball)
  return kicked_ball_;
}
inline void TrackedFrame::set_allocated_kicked_ball(::ssl_protos::vision::KickedBall* kicked_ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kicked_ball_;
  }
  if (kicked_ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kicked_ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kicked_ball, submessage_arena);
    }
    set_has_kicked_ball();
  } else {
    clear_has_kicked_ball();
  }
  kicked_ball_ = kicked_ball;
  // @@protoc_insertion_point(field_set_allocated:ssl_protos.vision.TrackedFrame.kicked_ball)
}

// repeated .ssl_protos.vision.Capability capabilities = 6;
inline int TrackedFrame::capabilities_size() const {
  return capabilities_.size();
}
inline void TrackedFrame::clear_capabilities() {
  capabilities_.Clear();
}
inline ::ssl_protos::vision::Capability TrackedFrame::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:ssl_protos.vision.TrackedFrame.capabilities)
  return static_cast< ::ssl_protos::vision::Capability >(capabilities_.Get(index));
}
inline void TrackedFrame::set_capabilities(int index, ::ssl_protos::vision::Capability value) {
  assert(::ssl_protos::vision::Capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:ssl_protos.vision.TrackedFrame.capabilities)
}
inline void TrackedFrame::add_capabilities(::ssl_protos::vision::Capability value) {
  assert(::ssl_protos::vision::Capability_IsValid(value));
  capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:ssl_protos.vision.TrackedFrame.capabilities)
}
inline const ::google::protobuf::RepeatedField<int>&
TrackedFrame::capabilities() const {
  // @@protoc_insertion_point(field_list:ssl_protos.vision.TrackedFrame.capabilities)
  return capabilities_;
}
inline ::google::protobuf::RepeatedField<int>*
TrackedFrame::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:ssl_protos.vision.TrackedFrame.capabilities)
  return &capabilities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace ssl_protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ssl_protos::vision::Capability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ssl_protos::vision::Capability>() {
  return ::ssl_protos::vision::Capability_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vision_5fdetection_5ftracked_2eproto
